var Ft=Object.defineProperty;var V=(r,e)=>()=>(r&&(e=r(r=0)),e);var Ht=(r,e)=>{for(var t in e)Ft(r,t,{get:e[t],enumerable:!0})};function D(r){if(r instanceof Error)return r.message;if(typeof r=="string")return r;if(typeof r=="object"&&r!==null&&"message"in r&&typeof r.message=="string")return r.message;try{return String(r)}catch{return"Unknown error"}}function ge(r,e){return`${r}: ${D(e)}`}var he=V(()=>{"use strict"});function m(r){let e=new Uint8Array(r),t=Array.from(e,n=>String.fromCharCode(n)).join("");return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function E(r){let e=r.replace(/-/g,"+").replace(/_/g,"/"),t=e.length%4;t&&(e+="=".repeat(4-t));let s=atob(e),n=new Uint8Array(s.length);for(let a=0;a<s.length;a++)n[a]=s.charCodeAt(a);return n.buffer}function G(r){if(r.length!==65||r[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let e=m(r.slice(1,33).buffer),t=m(r.slice(33).buffer);return{kty:"EC",crv:"P-256",x:e,y:t}}async function j(r){let e={crv:r.crv,kty:r.kty,x:r.x,y:r.y},t=JSON.stringify(e),s=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(t));return m(s)}function We(r){return"{"+Object.keys(r).sort().map(s=>[s,r[s]]).map(([s,n])=>`"${String(s)}":${JSON.stringify(n)}`).join(",")+"}"}function oe(r){let e={kmsVersion:r.kmsVersion,method:r.method,algVersion:r.algVersion,purpose:r.purpose};r.credentialId&&(e.credentialId=m(r.credentialId));let t=We(e);return new TextEncoder().encode(t).buffer}function de(r){let e={kmsVersion:r.kmsVersion,kid:r.kid,alg:r.alg,purpose:r.purpose,createdAt:r.createdAt,keyType:r.keyType},t=We(e);return new TextEncoder().encode(t).buffer}async function ke(r){let e=await crypto.subtle.exportKey("raw",r),t=await crypto.subtle.importKey("raw",e,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),s=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",t,s)}function Fe(r,e){return Nt(r,e)}function Nt(r,e){let t=new Uint8Array(r),s=new Uint8Array(e);if(t.length!==s.length)return!1;let n=0;for(let a=0;a<t.length;a++)n|=t[a]^s[a];return n===0}async function te(r){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(r))}async function He(r={min:150,max:300,mid:220}){let e=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),t=crypto.getRandomValues(new Uint8Array(16)),s=1e5,n=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:t,iterations:s},e,256);let o=performance.now()-n,d=Math.round(s*r.mid/o);return d=Math.min(Math.max(d,5e4),2e6),{iterations:d,measuredMs:o}}var J=V(()=>{"use strict"});async function ue(){return new Promise((r,e)=>{let t=indexedDB.open(Gt,jt);t.onerror=()=>{e(new Error("Failed to open IndexedDB"))},t.onsuccess=()=>{H=t.result,r()},t.onupgradeneeded=s=>{let n=s.target.result;if(n.objectStoreNames.contains("config")||n.createObjectStore("config",{keyPath:"method"}),!n.objectStoreNames.contains("keys")){let a=n.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!n.objectStoreNames.contains("leases")){let a=n.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!n.objectStoreNames.contains("audit")){let a=n.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}n.objectStoreNames.contains("meta")||n.createObjectStore("meta",{keyPath:"key"})}})}async function _(){if(H||await ue(),!H)throw new Error("Database not initialized");return H}function $e(){H&&(H.close(),H=null)}async function ce(r,e){let t=await _();return new Promise((s,n)=>{let d=t.transaction(r,"readonly").objectStore(r).get(e);d.onsuccess=()=>{s(d.result)},d.onerror=()=>{n(new Error(`Failed to get from ${r}`))}})}async function z(r,e){let t=await _();return new Promise((s,n)=>{let d=t.transaction(r,"readwrite").objectStore(r).put(e);d.onsuccess=()=>{s()},d.onerror=()=>{n(new Error(`Failed to put to ${r}`))}})}async function Ke(r,e){let t=await _();return new Promise((s,n)=>{let d=t.transaction(r,"readwrite").objectStore(r).delete(e);d.onsuccess=()=>{s()},d.onerror=()=>{n(new Error(`Failed to delete from ${r}`))}})}async function Jt(r){let e=await _();return new Promise((t,s)=>{let o=e.transaction(r,"readonly").objectStore(r).getAll();o.onsuccess=()=>{t(o.result)},o.onerror=()=>{s(new Error(`Failed to getAll from ${r}`))}})}async function B(r,e,t,s=r.algorithm,n=r.usages,a={alg:"unknown",purpose:"unknown"}){let o=crypto.getRandomValues(new Uint8Array(12)),d=Date.now(),i=de({kmsVersion:2,kid:t,alg:a.alg,purpose:a.purpose,createdAt:d,keyType:Array.isArray(n)?n.join(","):String(n)}),u=r.type==="private"?"pkcs8":"raw",c=await crypto.subtle.exportKey(u,r),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:o,additionalData:i},e,c),l={kid:t,kmsVersion:2,wrappedKey:p,iv:o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength),aad:i,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:d};await z("keys",l)}async function Ne(r,e,t,s=[]){let n=await ce("keys",r);if(!n)throw new Error(`No wrapped key with id: ${r}`);let a=new Uint8Array(n.iv),o=n.aad,d=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:o},e,n.wrappedKey),i=typeof t=="string"?t:t.name,c=i==="ECDSA"||i==="ECDH"||i==="Ed25519"||i.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(c,d,t,!1,s)}async function q(r){return await ce("keys",r)??null}async function L(){return Jt("keys")}async function Ge(r){await Ke("keys",r)}async function A(r){let e=await ce("meta",r);return e?e.value:null}async function U(r,e){await z("meta",{key:r,value:e})}async function je(r){await Ke("meta",r)}async function Je(r){await z("audit",r)}async function Q(){let r=await _();return new Promise((e,t)=>{let o=r.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();o.onsuccess=()=>{e(o.result)},o.onerror=()=>{t(new Error("Failed to get audit entries"))}})}async function _e(){let r=await Q();return r.length>0?r[r.length-1]:null}async function be(r){await z("leases",r)}async function re(r){return await ce("leases",r)??null}async function ve(r){let e=await _();return new Promise((t,s)=>{let d=e.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(r);d.onsuccess=()=>{t(d.result)},d.onerror=()=>{s(new Error("Failed to get user leases"))}})}async function se(r){await Ke("leases",r)}async function ze(r){let t=(await L()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let s=t[0];if(!s)throw new Error("No VAPID key found after filtering");let n={...s,subscription:r};await z("keys",n)}async function Qe(){let e=(await L()).filter(a=>a.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");let{subscription:s,...n}=t;await z("keys",n)}async function Ie(){let e=(await L()).filter(s=>s.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return t.subscription??null}var Gt,jt,H,le=V(()=>{"use strict";J();Gt="kms-v2",jt=1,H=null});function Pe(){let r=new Uint8Array(32);return crypto.getRandomValues(r),r}async function Se(r,e,t){let s=t??Pe(),{iterations:n}=await He(),a=crypto.getRandomValues(new Uint8Array(16)),o=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),d=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:n},o,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),i=await ke(d),u=crypto.getRandomValues(new Uint8Array(12)),c=oe({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:u,additionalData:c},d,s),l={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:n,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:i,encryptedMS:p,msIV:u.buffer.slice(u.byteOffset,u.byteOffset+u.byteLength),msAAD:c,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await U(pe(r),l),{success:!0,ms:s}}async function Ae(r,e,t,s,n="",a,o){let d=s??Pe(),i=a??crypto.getRandomValues(new Uint8Array(32)),u=o??await te("ATS/KMS/KEK-wrap/salt/v2"),c=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),p=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),l=u instanceof Uint8Array?u.buffer:u,y=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:l,info:c},p,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),f=crypto.getRandomValues(new Uint8Array(12)),k=oe({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:e,purpose:"master-secret"}),g=await crypto.subtle.encrypt({name:"AES-GCM",iv:f,additionalData:k},y,d),w=Date.now(),K=i.buffer.slice(i.byteOffset,i.byteOffset+i.byteLength),P;u instanceof Uint8Array?P=u.buffer.slice(u.byteOffset,u.byteOffset+u.byteLength):P=u;let S={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:e,rpId:n,kdf:{algorithm:"HKDF-SHA256",appSalt:K,hkdfSalt:P,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:g,msIV:f.buffer.slice(f.byteOffset,f.byteOffset+f.byteLength),msAAD:k,msVersion:1,createdAt:w,updatedAt:w};return await U(ye(r),S),{success:!0,ms:d}}async function Ee(r,e,t,s=""){let n=t??Pe(),a=crypto.getRandomValues(new Uint8Array(32)),o=await te("ATS/KMS/KEK-gate/salt/v2"),d=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),i=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:o,info:d},i,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),c=crypto.getRandomValues(new Uint8Array(12)),p=oe({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:e,purpose:"master-secret"}),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,additionalData:p},u,n),y=Date.now(),f={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:e,rpId:s,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:l,msIV:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),msAAD:p,msVersion:1,createdAt:y,updatedAt:y};return await U(fe(r),f),{success:!0,ms:n}}async function Ce(r,e){let t=await A(pe(r));if(!t)return{success:!1,error:"Passphrase not set up"};let s=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),n=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:t.kdf.salt,iterations:t.kdf.iterations},s,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await ke(n);if(!Fe(a,t.kcv))return{success:!1,error:"Invalid passphrase"};try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},n,t.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function xe(r,e){let t=await A(ye(r));if(!t)return{success:!1,error:"Passkey not set up"};let s=t.kdf.hkdfSalt,n=new TextEncoder().encode(t.kdf.info),a=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:s,info:n},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let d=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},o,t.encryptedMS);return{success:!0,ms:new Uint8Array(d)}}catch{return{success:!1,error:"Decryption failed"}}}async function Re(r){let e=await A(fe(r));if(!e)return{success:!1,error:"Passkey gate not set up"};let t=new Uint8Array(e.pepperWrapped),s=await te("ATS/KMS/KEK-gate/salt/v2"),n=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:s,info:n},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let d=await crypto.subtle.decrypt({name:"AES-GCM",iv:e.msIV,additionalData:e.msAAD},o,e.encryptedMS);return{success:!0,ms:new Uint8Array(d)}}catch{return{success:!1,error:"Decryption failed"}}}async function Ye(r){let e=await A(pe(r)),t=await A(ye(r)),s=await A(fe(r));return!!(e||t||s)}async function Me(r){return!!await A(pe(r))}async function De(r){let e=await A(ye(r)),t=await A(fe(r));return!!(e||t)}async function ne(r){let e=await te("ATS/KMS/MKEK/salt/v2"),t=new TextEncoder().encode("ATS/KMS/MKEK/v2"),s=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:t},s,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function O(r,e){let t=Date.now(),s=null;try{let n;switch(r.method){case"passphrase":n=await Ce(r.userId,r.passphrase);break;case"passkey-prf":n=await xe(r.userId,r.prfOutput);break;case"passkey-gate":n=await Re(r.userId);break;default:throw new Error("Unknown credential method")}if(!n.success)throw new Error(n.error??"Unlock failed");s=n.ms;let a=await ne(s),o=await e(a,s),d=Date.now();return{result:o,unlockTime:t,lockTime:d,duration:d-t}}finally{s&&s.fill(0)}}var pe,ye,fe,Xe=V(()=>{"use strict";J();le();pe=r=>`enrollment:passphrase:v2:${r}`,ye=r=>`enrollment:passkey-prf:v2:${r}`,fe=r=>`enrollment:passkey-gate:v2:${r}`});async function Ze(){}async function me(){let r=await A("LRK");return r||(r=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await U("LRK",r)),r}async function ae(r){let e=await crypto.subtle.digest("SHA-256",r);return m(e)}async function T(r){let e=await q("audit-user");if(e&&e.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,r,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),o=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),d=await ae(e.publicKeyRaw);C={type:"UAK",keyPair:{privateKey:a,publicKey:o},keyId:d};return}let t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",t.publicKey);await B(t.privateKey,r,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:s});let n=await ae(s);C={type:"UAK",keyPair:t,keyId:n}}async function et(r,e){if(!C||C.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let t=Date.now(),s=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),n=await crypto.subtle.exportKey("raw",s.publicKey),a=m(n),o={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:r,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:t,notAfter:e,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},d=JSON.stringify(o,Object.keys(o).sort()),i=await crypto.subtle.sign("Ed25519",C.keyPair.privateKey,new TextEncoder().encode(d)),u={...o,sig:m(i)},c=await me(),p=de({kmsVersion:2,kid:`lak-${r}`,alg:"EdDSA",purpose:"lak",createdAt:t,keyType:"lease-audit-key"}),l=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",s.privateKey,c,{name:"AES-GCM",iv:l,additionalData:p});return await U(`lease-audit-key:${r}`,{leaseId:r,wrappedKey:y,iv:l,aad:p,publicKeyRaw:n,delegationCert:u,expiresAt:e,createdAt:t}),{lakKeyPair:s,delegationCert:u}}async function tt(r,e){let t=await A(`lease-audit-key:${r}`);if(!t)throw new Error(`LAK not found for lease: ${r}`);let s=await me(),n=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,s,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),o=await ae(t.publicKeyRaw);C={type:"LAK",keyPair:{privateKey:n,publicKey:a},keyId:o,cert:e}}async function rt(){let r=await q("audit-instance");if(r&&r.publicKeyRaw){let i=await me(),u=await crypto.subtle.unwrapKey("pkcs8",r.wrappedKey,i,{name:"AES-GCM",iv:r.iv,additionalData:r.aad},{name:"Ed25519"},!1,["sign"]),c=await crypto.subtle.importKey("raw",r.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),p=await ae(r.publicKeyRaw);C={type:"KIAK",keyPair:{privateKey:u,publicKey:c},keyId:p};return}let e=await me(),t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),s=await crypto.subtle.exportKey("raw",t.publicKey);await B(t.privateKey,e,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:s});let n=await q("audit-instance");if(!n)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",n.wrappedKey,e,{name:"AES-GCM",iv:n.iv,additionalData:n.aad},{name:"Ed25519"},!1,["sign"]),o=await crypto.subtle.importKey("raw",s,{name:"Ed25519"},!1,["verify"]),d=await ae(s);C={type:"KIAK",keyPair:{privateKey:a,publicKey:o},keyId:d}}async function R(r){let e,t,s=new Promise((n,a)=>{e=n,t=a});return Le=Le.then(async()=>{try{if(!C)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let n=Date.now(),a=await _e(),o=a?a.chainHash:"",i={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:n,op:r.op,kid:r.kid,requestId:r.requestId,userId:r.userId,origin:r.origin,leaseId:r.leaseId,unlockTime:r.unlockTime,lockTime:r.lockTime,duration:r.duration,details:r.details,previousHash:o,signer:C.type,signerId:C.keyId},u=JSON.stringify(i),c=new TextEncoder().encode(o+u),p=await crypto.subtle.digest("SHA-256",c),l=m(p),y=new TextEncoder().encode(l),f=await crypto.subtle.sign("Ed25519",C.keyPair.privateKey,y),k=m(f),g={kmsVersion:i.kmsVersion,seqNum:i.seqNum,timestamp:i.timestamp,op:i.op,kid:i.kid,requestId:i.requestId,userId:i.userId,...i.origin!==void 0&&{origin:i.origin},...i.leaseId!==void 0&&{leaseId:i.leaseId},...i.unlockTime!==void 0&&{unlockTime:i.unlockTime},...i.lockTime!==void 0&&{lockTime:i.lockTime},...i.duration!==void 0&&{duration:i.duration},...i.details!==void 0&&{details:i.details},previousHash:i.previousHash,chainHash:l,signer:i.signer,signerId:i.signerId,...C.cert!==void 0&&{cert:C.cert},sig:k};await Je(g),e(g)}catch(n){t(n)}}).catch(()=>{}),s}async function st(){let r=await Q(),e=[],t=0;for(let s of r){let n={kmsVersion:s.kmsVersion,seqNum:s.seqNum,timestamp:s.timestamp,op:s.op,kid:s.kid,requestId:s.requestId,userId:s.userId,origin:s.origin,leaseId:s.leaseId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:s.details,previousHash:s.previousHash,signer:s.signer,signerId:s.signerId},a=JSON.stringify(n),o=new TextEncoder().encode(s.previousHash+a),d=await crypto.subtle.digest("SHA-256",o);m(d)!==s.chainHash&&e.push(`Chain hash mismatch at seq ${s.seqNum}`),t+=1}return{valid:e.length===0,verified:t,errors:e}}async function nt(){let r=await q("audit-user");if(!r||!r.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:m(r.publicKeyRaw)}}function at(){C=null,Le=Promise.resolve()}var Le,C,it=V(()=>{"use strict";le();J();Le=Promise.resolve(),C=null});function I(r,e){if(typeof e!="object"||e===null)throw new v(r,"params","object",e);return e}function b(r,e,t){if(typeof t!="string")throw new v(r,e,"string",t);return t}function $(r,e,t){if(t!==void 0)return b(r,e,t)}function we(r,e,t){if(typeof t!="number")throw new v(r,e,"number",t);return t}function _t(r,e,t){if(typeof t!="boolean")throw new v(r,e,"boolean",t);return t}function ot(r,e,t){if(t!==void 0)return _t(r,e,t)}function Ue(r,e,t){if(t instanceof ArrayBuffer)return t;if(t instanceof Uint8Array){let s=new ArrayBuffer(t.byteLength);return new Uint8Array(s).set(t),s}throw new v(r,e,"ArrayBuffer or Uint8Array",t)}function Te(r,e,t){if(t!==void 0){if(t instanceof Uint8Array)return t;if(t instanceof ArrayBuffer)return new Uint8Array(t);throw new v(r,e,"ArrayBuffer or Uint8Array",t)}}function N(r,e){if(typeof e!="object"||e===null)throw new v(r,"credentials","AuthCredentials object",e);let t=e;if(typeof t.method!="string")throw new v(r,"credentials.method","string",t.method);if(typeof t.userId!="string")throw new v(r,"credentials.userId","string",t.userId);switch(t.method){case"passphrase":if(typeof t.passphrase!="string")throw new v(r,"credentials.passphrase","string",t.passphrase);return{method:"passphrase",passphrase:t.passphrase,userId:t.userId};case"passkey-prf":if(!(t.prfOutput instanceof ArrayBuffer))throw new v(r,"credentials.prfOutput","ArrayBuffer",t.prfOutput);return{method:"passkey-prf",prfOutput:t.prfOutput,userId:t.userId};case"passkey-gate":return{method:"passkey-gate",userId:t.userId};default:throw new v(r,"credentials.method","passphrase | passkey-prf | passkey-gate",t.method)}}function zt(r,e){if(typeof e!="object"||e===null)throw new v(r,"payload","VAPIDPayload object",e);let t=e;return{aud:b(r,"payload.aud",t.aud),sub:b(r,"payload.sub",t.sub),exp:we(r,"payload.exp",t.exp),jti:b(r,"payload.jti",t.jti)}}function dt(r){let e=I("setupPassphrase",r),t=Te("setupPassphrase","existingMS",e.existingMS);return{userId:b("setupPassphrase","userId",e.userId),passphrase:b("setupPassphrase","passphrase",e.passphrase),...t!==void 0&&{existingMS:t}}}function ut(r){let e=I("setupPasskeyPRF",r);if(!e.credentialId)throw new Error("credentialId required");let t=$("setupPasskeyPRF","rpId",e.rpId),s=Te("setupPasskeyPRF","existingMS",e.existingMS);return{userId:b("setupPasskeyPRF","userId",e.userId),credentialId:Ue("setupPasskeyPRF","credentialId",e.credentialId),prfOutput:Ue("setupPasskeyPRF","prfOutput",e.prfOutput),...t!==void 0&&{rpId:t},...s!==void 0&&{existingMS:s}}}function ct(r){let e=I("setupWithPopup",r);return{userId:b("setupWithPopup","userId",e.userId)}}function lt(r){let e=I("setupPasskeyGate",r),t=$("setupPasskeyGate","rpId",e.rpId),s=Te("setupPasskeyGate","existingMS",e.existingMS);return{userId:b("setupPasskeyGate","userId",e.userId),credentialId:Ue("setupPasskeyGate","credentialId",e.credentialId),...t!==void 0&&{rpId:t},...s!==void 0&&{existingMS:s}}}function pt(r){let e=I("addEnrollment",r);return{userId:b("addEnrollment","userId",e.userId),credentials:N("addEnrollment",e.credentials)}}function yt(r){let e=I("generateVAPID",r);return{credentials:N("generateVAPID",e.credentials)}}function ft(r){let e=I("regenerateVAPID",r);return{credentials:N("regenerateVAPID",e.credentials)}}function mt(r){let e=I("signJWT",r);return{kid:b("signJWT","kid",e.kid),payload:zt("signJWT",e.payload),credentials:N("signJWT",e.credentials)}}function wt(r){let e=I("createLease",r),t={userId:b("createLease","userId",e.userId),ttlHours:we("createLease","ttlHours",e.ttlHours),credentials:N("createLease",e.credentials)},s=ot("createLease","autoExtend",e.autoExtend);return s!==void 0&&(t.autoExtend=s),t}function gt(r){let e=I("extendLeases",r);if(!Array.isArray(e.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof e.leaseIds}`);if(e.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let s={leaseIds:e.leaseIds.map((a,o)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${o} - expected non-empty string`);return a}),userId:b("extendLeases","userId",e.userId)},n=ot("extendLeases","requestAuth",e.requestAuth);return n!==void 0&&(s.requestAuth=n),e.credentials!==void 0&&(s.credentials=N("extendLeases",e.credentials)),s}function ht(r){let e=I("issueVAPIDJWT",r),t=$("issueVAPIDJWT","kid",e.kid),s=$("issueVAPIDJWT","jti",e.jti),n=e.exp!==void 0?we("issueVAPIDJWT","exp",e.exp):void 0;return{leaseId:b("issueVAPIDJWT","leaseId",e.leaseId),...t!==void 0&&{kid:t},...s!==void 0&&{jti:s},...n!==void 0&&{exp:n}}}function kt(r){let e=I("issueVAPIDJWTs",r),t=$("issueVAPIDJWTs","kid",e.kid);return{leaseId:b("issueVAPIDJWTs","leaseId",e.leaseId),count:we("issueVAPIDJWTs","count",e.count),...t!==void 0&&{kid:t}}}function Kt(r){if(r==null)return{};let e=I("isSetup",r),t=$("isSetup","userId",e.userId);return t!==void 0?{userId:t}:{}}function bt(r){if(r==null)return{};let e=I("getEnrollments",r),t=$("getEnrollments","userId",e.userId);return t!==void 0?{userId:t}:{}}function vt(r){let e=I("getPublicKey",r);return{kid:b("getPublicKey","kid",e.kid)}}function It(r){let e=I("getUserLeases",r);return{userId:b("getUserLeases","userId",e.userId)}}function Pt(r){let e=I("verifyLease",r),t={leaseId:b("verifyLease","leaseId",e.leaseId)};if("deleteIfInvalid"in e){if(typeof e.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");t.deleteIfInvalid=e.deleteIfInvalid}return t}function St(r){let e=I("removeEnrollment",r);return{enrollmentId:b("removeEnrollment","enrollmentId",e.enrollmentId),credentials:N("removeEnrollment",e.credentials)}}function Yt(r,e){if(typeof e!="object"||e===null)throw new v(r,"subscription","object",e);let t=e,s=b(r,"subscription.endpoint",t.endpoint);if(!s.startsWith("https://"))throw new Error(`${r}: subscription.endpoint must use HTTPS`);let n;try{n=new URL(s)}catch{throw new Error(`${r}: subscription.endpoint is not a valid URL`)}if(!Qt.some(l=>n.hostname===l||n.hostname.endsWith(`.${l}`)))throw new Error(`${r}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${n.hostname}`);let o=t.expirationTime;if(o!==null&&typeof o!="number")throw new v(r,"subscription.expirationTime","number or null",o);if(typeof t.keys!="object"||t.keys===null)throw new v(r,"subscription.keys","object",t.keys);let d=t.keys,i=b(r,"subscription.keys.p256dh",d.p256dh),u=b(r,"subscription.keys.auth",d.auth);if(i.length===0)throw new Error(`${r}: subscription.keys.p256dh must be non-empty`);if(u.length===0)throw new Error(`${r}: subscription.keys.auth must be non-empty`);let c=b(r,"subscription.eid",t.eid);if(c.length===0)throw new Error(`${r}: subscription.eid must be non-empty`);let p=t.createdAt;if(typeof p!="number")throw new v(r,"subscription.createdAt","number",p);return{endpoint:s,expirationTime:o,keys:{p256dh:i,auth:u},eid:c,createdAt:p}}function At(r){let e=I("setPushSubscription",r);return{subscription:Yt("setPushSubscription",e.subscription)}}var v,Qt,Et=V(()=>{"use strict";v=class extends Error{constructor(t,s,n,a){super(`RPC ${t}: Invalid ${s} - expected ${n}, got ${typeof a}`);this.method=t;this.param=s;this.expected=n;this.received=a;this.name="RPCValidationError"}};Qt=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"]});function Zt(r){if(typeof r!="object"||r===null)return!1;let e=r;return typeof e.tokensIssued=="number"&&typeof e.lastResetAt=="number"}function Ct(r){return Zt(r)?r:{tokensIssued:0,lastResetAt:Date.now()}}var xt=V(()=>{"use strict"});var Bt={};Ht(Bt,{handleMessage:()=>Mt});async function er(r,e){let t=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},t,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function Rt(){let r=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),e=await crypto.subtle.exportKey("raw",r.publicKey),t=crypto.randomUUID(),s=crypto.getRandomValues(new Uint8Array(32)),n=crypto.getRandomValues(new Uint8Array(32));return X.set(t,{privateKey:r.privateKey,appSalt:s,hkdfSalt:n,createdAt:Date.now()}),setTimeout(()=>{X.delete(t)},10*60*1e3),{publicKey:m(e),keyId:t,appSalt:m(s.buffer),hkdfSalt:m(n.buffer)}}async function tr(r){let e=X.get(r.transportKeyId);if(!e)throw new Error("Transport key not found or expired");let t=E(r.ephemeralPublicKey),s=await crypto.subtle.importKey("raw",t,{name:"ECDH",namedCurve:"P-256"},!1,[]),n=await crypto.subtle.deriveBits({name:"ECDH",public:s},e.privateKey,256),a=await crypto.subtle.importKey("raw",n,"HKDF",!1,["deriveBits"]),o=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},a,256),d=await crypto.subtle.importKey("raw",o,{name:"AES-GCM",length:256},!1,["decrypt"]),i=E(r.iv),u=E(r.encryptedCredentials),c=await crypto.subtle.decrypt({name:"AES-GCM",iv:i,tagLength:128},d,u),p=JSON.parse(new TextDecoder().decode(c)),l;if(r.method==="passphrase"){let y=p;l=await Dt({userId:r.userId,passphrase:y.passphrase},r.requestId)}else if(r.method==="passkey-prf"){let y=p;l=await Lt({userId:r.userId,credentialId:E(y.credentialId),prfOutput:E(y.prfOutput),...y.rpId!==void 0&&{rpId:y.rpId},appSalt:e.appSalt,hkdfSalt:e.hkdfSalt},r.requestId)}else if(r.method==="passkey-gate"){let y=p;l=await Ut({userId:r.userId,credentialId:E(y.credentialId),...y.rpId!==void 0&&{rpId:y.rpId}},r.requestId)}else{let y=r.method;throw new Error(`Unknown method: ${String(y)}`)}return X.delete(r.transportKeyId),l}async function rr(r,e){let t=await Rt(),s=new URL("https://kms.ats.run/");s.searchParams.set("mode","setup");let a=await new Promise((d,i)=>{let u=setTimeout(()=>{i(new Error("Setup with popup timeout"))},3e5);Y.set(e,{resolve:d,reject:i,timeout:u}),self.postMessage({type:"worker:setup-with-popup",requestId:e,userId:r.userId,popupURL:s.toString(),transportKey:t.publicKey,transportKeyId:t.keyId,appSalt:t.appSalt,hkdfSalt:t.hkdfSalt})});return await tr({method:a.method,transportKeyId:a.transportKeyId,ephemeralPublicKey:a.ephemeralPublicKey,iv:a.iv,encryptedCredentials:a.encryptedCredentials,userId:a.userId,requestId:e})}async function Mt(r){let{id:e,method:t,params:s}=r;try{let n;switch(t){case"setupWithPopup":n=await rr(ct(s),e);break;case"setupPassphrase":n=await Dt(dt(s),e);break;case"setupPasskeyPRF":n=await Lt(ut(s),e);break;case"setupPasskeyGate":n=await Ut(lt(s),e);break;case"addEnrollment":n=await sr(pt(s),e);break;case"generateVAPID":n=await nr(yt(s),e);break;case"regenerateVAPID":n=await ar(ft(s),e);break;case"signJWT":n=await ir(mt(s),e);break;case"createLease":n=await or(wt(s),e);break;case"extendLeases":n=await dr(gt(s),e);break;case"issueVAPIDJWT":n=await Tt(ht(s),e);break;case"issueVAPIDJWTs":n=await ur(kt(s),e);break;case"isSetup":n=await cr(Kt(s));break;case"getEnrollments":n=await lr(bt(s));break;case"verifyAuditChain":n=await pr();break;case"getAuditLog":n=await yr();break;case"getPublicKey":n=await fr(vt(s));break;case"getAuditPublicKey":n=await mr();break;case"getUserLeases":n=await wr(It(s));break;case"verifyLease":n=await gr(Pt(s));break;case"getVAPIDKid":n=await hr();break;case"resetKMS":n=await vr();break;case"removeEnrollment":n=await Ir(St(s),e);break;case"setPushSubscription":n=await kr(At(s));break;case"removePushSubscription":n=await Kr();break;case"getPushSubscription":n=await br();break;default:throw new Error(`Unknown RPC method: ${t}`)}return{id:e,result:n}}catch(n){return{id:e,error:D(n)}}}async function Dt(r,e){let{userId:t,passphrase:s,existingMS:n}=r;if(!s||s.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await Se(t,s,n);if(!a.success)throw new Error(a.error);let o=await ne(a.ms);await T(o);let d=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in d)||!("publicKey"in d))throw new Error("Failed to generate ECDSA keypair");let i=d,u=await crypto.subtle.exportKey("raw",i.publicKey),c=G(new Uint8Array(u)),p=await j(c);return await B(i.privateKey,o,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:u}),a.ms.fill(0),await R({op:"setup-passphrase",kid:"",requestId:e,userId:t,details:{method:"passphrase",vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:m(u),vapidKid:p}}async function Lt(r,e){let{userId:t,credentialId:s,prfOutput:n,rpId:a="",existingMS:o,appSalt:d,hkdfSalt:i}=r;if(!s||s.byteLength===0)throw new Error("credentialId required");if(!n||n.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let u=await Ae(t,s,n,o,a,d,i);if(!u.success)throw new Error(u.error);let c=await ne(u.ms);await T(c);let p=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in p)||!("publicKey"in p))throw new Error("Failed to generate ECDSA keypair");let l=p,y=await crypto.subtle.exportKey("raw",l.publicKey),f=G(new Uint8Array(y)),k=await j(f);return await B(l.privateKey,c,k,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:y}),u.ms.fill(0),await R({op:"setup-passkey-prf",kid:"",requestId:e,userId:t,details:{method:"passkey-prf",credentialId:m(s),vapidKid:k}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:m(y),vapidKid:k}}async function Ut(r,e){let{userId:t,credentialId:s,rpId:n="",existingMS:a}=r;if(!s||s.byteLength===0)throw new Error("credentialId required");let o=await Ee(t,s,a,n);if(!o.success)throw new Error(o.error);let d=await ne(o.ms);await T(d);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let u=i,c=await crypto.subtle.exportKey("raw",u.publicKey),p=G(new Uint8Array(c)),l=await j(p);return await B(u.privateKey,d,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),o.ms.fill(0),await R({op:"setup-passkey-gate",kid:"",requestId:e,userId:t,details:{method:"passkey-gate",credentialId:m(s),vapidKid:l}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:m(c),vapidKid:l}}async function sr(r,e){let{userId:t,credentials:s}=r;await O(s,async(h,M)=>(await T(h),!0));let n;if(s.method==="passphrase"){let h=await Ce(t,s.passphrase);if(!h.success)throw new Error(h.error);n=h.ms}else if(s.method==="passkey-prf"){let h=await xe(t,s.prfOutput);if(!h.success)throw new Error(h.error);n=h.ms}else if(s.method==="passkey-gate"){let h=await Re(t);if(!h.success)throw new Error(h.error);n=h.ms}else throw new Error("Invalid credentials method");let a=await Rt(),o=new URL("https://kms.ats.run/");o.searchParams.set("mode","setup");let i=await new Promise((h,M)=>{let Z=setTimeout(()=>{M(new Error("Add enrollment popup timeout"))},3e5);Y.set(e,{resolve:h,reject:M,timeout:Z}),self.postMessage({type:"worker:setup-with-popup",requestId:e,userId:r.userId,popupURL:o.toString(),transportKey:a.publicKey,transportKeyId:a.keyId,appSalt:a.appSalt,hkdfSalt:a.hkdfSalt})}),u=X.get(i.transportKeyId);if(!u)throw new Error("Transport key not found or expired");let c=E(i.ephemeralPublicKey),p=await crypto.subtle.importKey("raw",c,{name:"ECDH",namedCurve:"P-256"},!1,[]),l=await crypto.subtle.deriveBits({name:"ECDH",public:p},u.privateKey,256),y=await crypto.subtle.importKey("raw",l,"HKDF",!1,["deriveBits"]),f=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},y,256),k=await crypto.subtle.importKey("raw",f,{name:"AES-GCM",length:256},!1,["decrypt"]),g=E(i.iv),w=E(i.encryptedCredentials),K=await crypto.subtle.decrypt({name:"AES-GCM",iv:g,tagLength:128},k,w),P=JSON.parse(new TextDecoder().decode(K));X.delete(i.transportKeyId);let S=i.method,x;if(S==="passphrase")x=await Se(t,P.passphrase,n);else if(S==="passkey-prf"){let h=P,M=h.rpId||"";x=await Ae(t,E(h.credentialId),E(h.prfOutput),n,M)}else if(S==="passkey-gate"){let h=P,M=h.rpId||"";x=await Ee(t,E(h.credentialId),n,M)}else{let h=S;throw new Error(`Unknown enrollment method: ${String(h)}`)}if(n.fill(0),!x.success)throw new Error(x.error);return await R({op:"add-enrollment",kid:"",requestId:e,userId:s.userId,details:{method:S,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${S}:v2`}}async function nr(r,e){let{credentials:t}=r,s=await O(t,async(n,a)=>{await T(n);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let d=o,i=await crypto.subtle.exportKey("raw",d.publicKey),u=G(new Uint8Array(i)),c=await j(u);return await B(d.privateKey,n,c,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:i}),{kid:c,publicKey:m(i)}});return await R({op:"generate",kid:s.result.kid,requestId:e,userId:t.userId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),s.result}async function ar(r,e){let{credentials:t}=r,s=await O(t,async(n,a)=>{await T(n);let d=(await L()).filter(y=>y.purpose==="vapid");for(let y of d)await Ge(y.kid);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let u=i,c=await crypto.subtle.exportKey("raw",u.publicKey),p=G(new Uint8Array(c)),l=await j(p);return await B(u.privateKey,n,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),{kid:l,publicKey:m(c),oldKids:d.map(y=>y.kid)}});return await R({op:"regenerate-vapid",kid:s.result.kid,requestId:e,userId:t.userId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:s.result.oldKids,deletedCount:s.result.oldKids.length}}),{kid:s.result.kid,publicKey:s.result.publicKey}}async function ir(r,e){let{kid:t,payload:s,credentials:n}=r;if(!s.aud||!s.sub||!s.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(s.exp<=a)throw new Error("JWT exp must be in the future");if(s.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let o=await O(n,async(d,i)=>{await T(d);let u=await Ne(t,d,{name:"ECDSA",namedCurve:"P-256"},["sign"]),c={typ:"JWT",alg:"ES256",kid:t},p=m(new TextEncoder().encode(JSON.stringify(c)).buffer),l=m(new TextEncoder().encode(JSON.stringify(s)).buffer),y=new TextEncoder().encode(`${p}.${l}`),f=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},u,y),k=m(f);return{jwt:`${p}.${l}.${k}`}});return await R({op:"sign",kid:t,requestId:e,userId:n.userId,unlockTime:o.unlockTime,lockTime:o.lockTime,duration:o.duration,details:{algorithm:"ES256",aud:s.aud,exp:s.exp,jti:s.jti}}),o.result}async function or(r,e){let{userId:t,ttlHours:s,credentials:n,autoExtend:a}=r;if(s<=0||s>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let d=(await L()).filter(w=>w.purpose==="vapid");if(d.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");d.sort((w,K)=>K.createdAt-w.createdAt);let i=d[0];if(!i)throw new Error("VAPID key record not found after filtering");let u=i.kid,c=`lease-${crypto.randomUUID()}`,p=crypto.getRandomValues(new Uint8Array(32)),l=Date.now(),y=l+s*3600*1e3,f=await O(n,async(w,K)=>{await T(w);let{delegationCert:P}=await et(c,y),S=await er(K,p),x=await q(u);if(!x)throw new Error(`No wrapped key with id: ${u}`);let h=new Uint8Array(x.iv),M=x.aad,Z=await crypto.subtle.unwrapKey("pkcs8",x.wrappedKey,w,{name:"AES-GCM",iv:h,additionalData:M},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),ie=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",Z,S,{name:"AES-GCM",iv:ie}),iv:ie,sessionKEK:S,lakDelegationCert:P}});await U(`sessionkek:${c}`,f.result.sessionKEK),Be.set(c,f.result.sessionKEK);let k={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},g={leaseId:c,userId:t,ttlHours:s,createdAt:l,exp:y,autoExtend:a??!0,quotas:k,wrappedLeaseKey:f.result.wrappedLeaseKey,wrappedLeaseKeyIV:f.result.iv.buffer.slice(f.result.iv.byteOffset,f.result.iv.byteOffset+f.result.iv.byteLength),leaseSalt:p.buffer.slice(p.byteOffset,p.byteOffset+p.byteLength),kid:u,lakDelegationCert:f.result.lakDelegationCert};return await be(g),await U(`quota:${c}`,{leaseId:c,tokensIssued:0,lastResetAt:l,perEndpoint:{}}),await R({op:"create-lease",kid:u,requestId:e,userId:t,details:{action:"create-lease",leaseId:c,userId:t,ttlHours:s,autoExtend:g.autoExtend}}),{leaseId:c,exp:y,quotas:k,autoExtend:g.autoExtend??!0}}async function dr(r,e){let{leaseIds:t,credentials:s,requestAuth:n}=r,a=[],o=0,d=0,i=0,u=!1;if(s)try{await O(s,async(c,p)=>(u=!0,Promise.resolve()))}catch(c){for(let p of t){let l=await re(p);l&&l.autoExtend===!1&&(a.push({leaseId:p,status:"skipped",reason:`Authentication failed: ${D(c)}`}),d++)}if(d===t.length)return{results:a,extended:o,skipped:d,failed:i}}for(let c of t)try{let p=await re(c);if(!p){a.push({leaseId:c,status:"skipped",reason:`Lease not found: ${c}`}),d++;continue}if(p.autoExtend===!1&&!n){a.push({leaseId:c,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),d++;continue}if(p.autoExtend===!1&&n&&!u){a.push({leaseId:c,status:"skipped",reason:"Authentication required but credentials not valid"}),d++;continue}let y=(await L()).filter(P=>P.purpose==="vapid");if(y.length===0){a.push({leaseId:c,status:"skipped",reason:"No VAPID key found"}),d++;continue}y.sort((P,S)=>S.createdAt-P.createdAt);let k=y[0].kid;if(p.kid!==k){a.push({leaseId:c,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${p.kid}, current kid: ${k})`}),d++;continue}let g=Date.now(),w=g+30*24*60*60*1e3,K={...p,exp:w,createdAt:g};await be(K),await R({op:"extend-lease",kid:K.kid,requestId:e,userId:K.userId,details:{action:"extend-lease",leaseId:K.leaseId,userId:K.userId,newExp:w,autoExtend:K.autoExtend}}),a.push({leaseId:c,status:"extended",result:{leaseId:K.leaseId,exp:K.exp,iat:K.createdAt,kid:K.kid,autoExtend:K.autoExtend??!1}}),o++}catch(p){a.push({leaseId:c,status:"skipped",reason:`Error extending lease: ${D(p)}`}),i++}return{results:a,extended:o,skipped:d,failed:i}}async function Tt(r,e){let{leaseId:t}=r,{kid:s}=r;if(!s){let ee=(await L()).filter(Wt=>Wt.purpose==="vapid");if(ee.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(ee.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let Oe=ee[0];if(!Oe)throw new Error("No VAPID key found after filtering");s=Oe.kid}let n=await re(t);if(!n)throw new Error(`Lease not found: ${t}`);if(Date.now()>=n.exp)throw new Error("Lease expired");let o=(await L()).filter(W=>W.purpose==="vapid");if(o.length===0)throw new Error("No VAPID key available");o.sort((W,ee)=>ee.createdAt-W.createdAt);let d=o[0]?.kid;if(!d)throw new Error("Failed to determine current VAPID key");if(n.kid!==d)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await tt(t,n.lakDelegationCert);let i=await Ie();if(!i)throw new Error("No push subscription found. Call setPushSubscription() first.");let u=await A(`quota:${t}`),c=Ct(u),p=Date.now()-3600*1e3;if(c.lastResetAt<p&&(c.tokensIssued=0,c.lastResetAt=Date.now()),c.tokensIssued>=n.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");c.tokensIssued++,await U(`quota:${t}`,c);let l=r.jti??crypto.randomUUID(),y=r.exp??Math.floor(Date.now()/1e3)+900,f=new URL(i.endpoint),k=`${f.protocol}//${f.host}`,g={aud:k,sub:"mailto:kms@example.com",exp:y,jti:l,uid:n.userId,eid:i.eid},w=Be.get(t);if(!w){let W=await A(`sessionkek:${t}`);if(!W)throw new Error(`SessionKEK not found for lease: ${t}`);w=W,Be.set(t,w)}let K=n.wrappedLeaseKey,P=new Uint8Array(n.wrappedLeaseKeyIV),S=await crypto.subtle.unwrapKey("pkcs8",K,w,{name:"AES-GCM",iv:P},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),x={typ:"JWT",alg:"ES256",kid:n.kid},h=m(new TextEncoder().encode(JSON.stringify(x)).buffer),M=m(new TextEncoder().encode(JSON.stringify(g)).buffer),Z=new TextEncoder().encode(`${h}.${M}`),ie=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},S,Z),qe=m(ie),qt=`${h}.${M}.${qe}`,Ot=await R({op:"sign",kid:n.kid,requestId:e,userId:n.userId,leaseId:t,details:{action:"issue-lease-jwt",jti:l,aud:k,eid:i.eid}});return{jwt:qt,jti:l,exp:y,auditEntry:Ot}}async function ur(r,e){let{leaseId:t,count:s,kid:n}=r;if(!Number.isInteger(s)||s<1||s>10)throw new Error("count must be an integer between 1 and 10");let a=900,o=Math.floor(a*.6),d=Math.floor(Date.now()/1e3),i=[];for(let u=0;u<s;u++){let c=crypto.randomUUID(),p=d+a+u*o,l=await Tt({leaseId:t,...n!==void 0&&{kid:n},jti:c,exp:p},`${e}-${u}`);i.push(l)}return i}async function cr(r){let e=r?.userId??"default",t=await Ye(e),s=[];await Me(e)&&s.push("passphrase"),await De(e)&&s.push("passkey");let n;return t&&r?.userId&&(n=await ve(r.userId)),{isSetup:t,methods:s,...n!==void 0&&{leases:n}}}async function lr(r){let e=r?.userId??"default",t=[];if(await Me(e)&&t.push("enrollment:passphrase:v2"),await De(e)){let s=await A(`enrollment:passkey-prf:v2:${e}`),n=await A(`enrollment:passkey-gate:v2:${e}`);s&&t.push("enrollment:passkey-prf:v2"),n&&t.push("enrollment:passkey-gate:v2")}return{enrollments:t}}async function pr(){return await st()}async function yr(){return{entries:await Q()}}async function fr(r){let{kid:e}=r,t=await q(e);if(!t||!t.publicKeyRaw)throw new Error(`Public key not found for kid: ${e}`);return{publicKey:m(t.publicKeyRaw)}}async function mr(){return await nt()}async function wr(r){let{userId:e}=r;return{leases:await ve(e)}}async function gr(r){let{leaseId:e,deleteIfInvalid:t=!1}=r,s=await re(e);if(!s)return{leaseId:e,valid:!1,reason:"not-found",kid:""};if(Date.now()>=s.exp)return t&&await se(e),{leaseId:e,valid:!1,reason:"expired",kid:s.kid};let a=(await L()).filter(i=>i.purpose==="vapid");if(a.length===0)return t&&await se(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:s.kid};a.sort((i,u)=>u.createdAt-i.createdAt);let o=a[0];if(!o)return t&&await se(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:s.kid};let d=o.kid;return s.kid!==d?(t&&await se(e),{leaseId:e,valid:!1,reason:"wrong-key",kid:s.kid}):{leaseId:e,valid:!0,kid:s.kid}}async function hr(){let e=(await L()).filter(s=>s.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return{kid:t.kid}}async function kr(r){return await ze(r.subscription),{success:!0}}async function Kr(){return await Qe(),{success:!0}}async function br(){return{subscription:await Ie()}}async function vr(){$e();let r=indexedDB.deleteDatabase("kms-v2");return await new Promise((e,t)=>{r.onsuccess=()=>e(),r.onerror=()=>t(new Error(r.error?.message??"Failed to delete database"))}),await ue(),at(),{success:!0}}async function Ir(r,e){let{enrollmentId:t,credentials:s}=r;return await O(s,async(n,a)=>(await T(n),!0)),await je(t),await R({op:"reset",kid:"",requestId:e,userId:s.userId,details:{action:"remove-enrollment",enrollmentId:t}}),{success:!0}}var Be,X,Y,Vt=V(()=>{"use strict";Xe();it();le();J();he();Et();xt();Be=new Map,X=new Map,Y=new Map;self.addEventListener("message",r=>{let e=r.data;if("type"in e&&e.type==="worker:popup-credentials"){let t=e.requestId;if(t&&e.credentials){let s=Y.get(t);s&&(clearTimeout(s.timeout),Y.delete(t),s.resolve(e.credentials))}return}if("type"in e&&e.type==="worker:popup-error"){let t=e.requestId;if(t){let s=Y.get(t);s&&(clearTimeout(s.timeout),Y.delete(t),s.reject(new Error(e.reason||"Popup setup failed")))}return}(async()=>{let t=r.data,s=await Mt(t);self.postMessage(s)})().catch(t=>{console.error("[KMS Worker] Message handling failed:",t);let s=r.data;self.postMessage({id:s?.id||"unknown",error:t instanceof Error?t.message:"Unknown error"})})});(async()=>{try{await ue(),await Ze(),await rt(),(await Q()).length===0&&await R({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(r){console.error("[KMS Worker] Initialization failed:",r)}})()});he();function $t(r){if(typeof r!="object"||r===null)return!1;let e=r;if("enabled"in e&&typeof e.enabled!="boolean")return!1;if("results"in e){if(typeof e.results!="object"||e.results===null)return!1;let t=e.results;if("first"in t&&!(t.first instanceof ArrayBuffer)&&!(t.first instanceof Uint8Array)||"second"in t&&!(t.second instanceof ArrayBuffer)&&!(t.second instanceof Uint8Array))return!1}return!0}function F(r){let t=r.getClientExtensionResults().prf;if(t){if(!$t(t)){console.warn("[WebAuthn] Invalid PRF extension result structure:",t);return}return t}}J();var Ve=class{worker=null;parentOrigin;workerUrl;isInitialized=!1;pendingUnlockRequest=null;isStatelessPopup=!1;transportPublicKey=null;transportKeyId=null;appSalt=null;popupState=null;messagePort=null;constructor(e){this.parentOrigin=e.parentOrigin,this.workerUrl=e.workerUrl??"./kms-worker.7b8c403d.js"}async init(){if(this.isInitialized)throw new Error("KMSClient already initialized");try{let e=new URLSearchParams(window.location.search);this.transportPublicKey=e.get("transportKey"),this.transportKeyId=e.get("keyId"),this.appSalt=e.get("appSalt"),this.popupState=e.get("state");let t=e.get("parentOrigin");this.isStatelessPopup=!!(this.transportPublicKey&&this.transportKeyId),console.log("[KMS Client] Popup detection:",{url:window.location.href,transportKey:this.transportPublicKey?.slice(0,20)+"...",keyId:this.transportKeyId,state:this.popupState,parentOrigin:t,isStatelessPopup:this.isStatelessPopup}),this.isStatelessPopup&&console.log("[KMS Client] Running in stateless popup mode"),window.addEventListener("message",this.handleParentMessage.bind(this)),this.worker=new Worker(this.workerUrl,{type:"module",name:"kms-worker-v2"}),this.worker.addEventListener("message",this.handleWorkerMessage.bind(this)),this.worker.addEventListener("error",this.handleWorkerError.bind(this)),this.isInitialized=!0,this.isStatelessPopup?console.log("[KMS Client] Stateless popup: Ready for two-phase handshake (hello → ready → connect)"):this.sendToParent({type:"kms:ready"})}catch(e){throw console.error("[KMS Client] Initialization failed:",e),new Error(ge("Failed to initialize KMS client",e))}}handleParentMessage(e){if(e.origin!==this.parentOrigin){console.warn("[KMS Client] Rejected message from invalid origin:",{expected:this.parentOrigin,received:e.origin});return}if(e.data?.type==="kms:hello"&&this.isStatelessPopup){if(console.log("[KMS Client] Received kms:hello message"),e.data.state!==this.popupState){console.error("[KMS Client] State mismatch in kms:hello:",{expected:this.popupState,received:e.data.state});return}console.log("[KMS Client] Replying kms:ready to parent"),e.source&&e.source.postMessage({type:"kms:ready",state:this.popupState},e.origin);return}if(e.data?.type==="kms:connect"&&this.isStatelessPopup){if(console.log("[KMS Client] Received kms:connect message with port"),e.data.state!==this.popupState){console.error("[KMS Client] State mismatch in kms:connect:",{expected:this.popupState,received:e.data.state});return}if(!e.ports||e.ports.length===0){console.error("[KMS Client] No MessagePort transferred in kms:connect");return}this.messagePort=e.ports[0]||null,console.log("[KMS Client] MessagePort established successfully"),this.messagePort&&(this.messagePort.postMessage({type:"kms:connected"}),console.log("[KMS Client] Sent kms:connected confirmation to parent"));return}let t=e.data;if(t?.type==="kms:popup-opened"){let a=t.requestId;this.worker?.postMessage({type:"worker:popup-opened",requestId:a});return}if(t?.type==="kms:popup-blocked"){let a=t.requestId,o=t.reason||"Popup was blocked";this.worker?.postMessage({type:"worker:popup-blocked",requestId:a,reason:o});return}if(t?.type==="kms:popup-ready")return;if(!this.isInitialized||!this.worker){console.error("[KMS Client] Received message before initialization");return}let s=e.data,n=["createLease","generateVAPID","signJWT","regenerateVAPID","addEnrollment"];if(s?.method&&n.includes(s.method)){this.showUnlockModal(s);return}if(s?.method==="extendLeases"&&s.params&&typeof s.params=="object"&&"requestAuth"in s.params&&s.params.requestAuth===!0){this.showUnlockModal(s);return}try{this.worker.postMessage(e.data)}catch(a){console.error("[KMS Client] Failed to forward message to Worker:",a),s?.id&&this.sendToParent({id:s.id,error:ge("Failed to forward message",a)})}}handleWorkerMessage(e){try{let t=e.data;if("type"in t&&t.type==="worker:setup-with-popup"){this.handleSetupWithPopup({requestId:t.requestId,userId:t.userId,popupURL:t.popupURL,transportKey:t.transportKey,transportKeyId:t.transportKeyId,appSalt:t.appSalt,hkdfSalt:t.hkdfSalt});return}if("type"in t&&t.type==="worker:request-popup-from-parent"){this.handleWorkerPopupRequest(t.url,t.requestId);return}this.sendToParent(t)}catch(t){console.error("[KMS Client] Failed to forward message to parent:",t)}}handleWorkerPopupRequest(e,t){if(!this.parentOrigin){this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:"Parent origin not configured"});return}let s=window.parent&&window.parent!==window?window.parent:null;if(!s){this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:"No parent window available"});return}try{s.postMessage({type:"kms:request-popup",url:e,requestId:t},this.parentOrigin)}catch(n){console.error("[KMS Client] Failed to send popup request to parent:",n),this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:n instanceof Error?n.message:"Unknown error"})}}async handleSetupWithPopup(e){try{if(!this.parentOrigin)throw new Error("Parent origin not configured");let t=window.parent&&window.parent!==window?window.parent:null;if(!t)throw new Error("No parent window available");let s=new URL(e.popupURL);s.searchParams.set("parentOrigin",this.parentOrigin),t.postMessage({type:"kms:request-popup",url:s.toString(),requestId:e.requestId},this.parentOrigin);let a=await new Promise((i,u)=>{let c=setTimeout(()=>{u(new Error("Popup ready timeout"))},3e4),p=l=>{let y=l.data;y?.type==="kms:popup-ready"&&y.requestId===e.requestId&&(l.ports&&l.ports.length>0&&l.ports[0]?(clearTimeout(c),window.removeEventListener("message",p),i(l.ports[0])):(clearTimeout(c),window.removeEventListener("message",p),u(new Error("No MessagePort received with popup-ready"))))};window.addEventListener("message",p)}),o=new Promise((i,u)=>{let c=setTimeout(()=>{u(new Error("Credentials timeout"))},3e5);a.onmessage=p=>{let l=p.data;l?.type==="popup:credentials"?(clearTimeout(c),a.close(),i({method:l.method,transportKeyId:l.transportKeyId,userId:l.userId,ephemeralPublicKey:l.ephemeralPublicKey,iv:l.iv,encryptedCredentials:l.encryptedCredentials})):l?.type==="popup:error"?(clearTimeout(c),a.close(),u(new Error(l.reason||"Popup error"))):l?.type==="popup:connected"&&console.log("[KMS Client] Popup connected, waiting for credentials...")}});a.postMessage({type:"kms:connect",transportKey:e.transportKey,transportKeyId:e.transportKeyId,appSalt:e.appSalt,hkdfSalt:e.hkdfSalt,userId:e.userId});let d=await o;this.worker?.postMessage({type:"worker:popup-credentials",requestId:e.requestId,credentials:d})}catch(t){console.error("[KMS Client] Setup with popup failed:",t),this.worker?.postMessage({type:"worker:popup-error",requestId:e.requestId,reason:t instanceof Error?t.message:"Unknown error"})}}handleWorkerError(e){console.error("[KMS Client] Worker error:",{message:e.message,filename:e.filename,lineno:e.lineno,colno:e.colno})}sendToParent(e){let t=window.opener&&window.opener!==null&&window.opener!==window,s=window.parent&&window.parent!==window,n=t?window.opener:s?window.parent:null;if(!n){console.error("[KMS Client] No parent/opener window available",{hasValidOpener:t,hasValidParent:s});return}try{n.postMessage(e,this.parentOrigin)}catch(a){console.error("[KMS Client] Failed to send message to parent/opener:",a)}}async getEnrollments(e){return new Promise((t,s)=>{let n=`get-enrollments-${Date.now()}`,a={id:n,method:"getEnrollments",params:{userId:e}},o=d=>{let i=d.data;if(i.id===n)if(this.worker?.removeEventListener("message",o),i.error){let u=typeof i.error=="string"?i.error:i.error.message;s(new Error(u))}else t(i.result?.enrollments||[])};this.worker?.addEventListener("message",o),this.worker?.postMessage(a),setTimeout(()=>{this.worker?.removeEventListener("message",o),s(new Error("getEnrollments timeout"))},5e3)})}showUnlockModal(e){this.pendingUnlockRequest=e;let t=document.getElementById("unlock-modal"),s=document.getElementById("kms-webauthn-btn"),n=document.getElementById("kms-passphrase-input"),a=document.getElementById("kms-passphrase-btn");if(!t||!s||!n||!a){console.error("[KMS Client] Modal elements not found"),e?this.sendToParent({id:e.id,error:"Modal UI not found"}):this.sendToParent({type:"kms:unlock-error",error:"Modal UI not found"});return}t.classList.remove("hidden"),s.onclick=()=>this.handleWebAuthnUnlock(),a.onclick=()=>this.handlePassphraseUnlock(n.value),n.onkeydown=o=>{o.key==="Enter"&&this.handlePassphraseUnlock(n.value).catch(d=>{console.error("[KMS Client] Passphrase unlock failed:",d),this.showError(d instanceof Error?d.message:"Unknown error")})},this.hideError()}async handleWebAuthnUnlock(){this.showLoading(),this.hideError();try{let e=localStorage.getItem("kms:appSalt"),t;e?t=new Uint8Array(e.split(",").map(l=>parseInt(l,10))):t=crypto.getRandomValues(new Uint8Array(32));let s=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:t}}}}});if(!s)throw new Error("No credential returned");let a=F(s)?.results?.first;if(!this.pendingUnlockRequest)throw new Error("No pending operation");let o=this.pendingUnlockRequest.params?.userId;if(!o)throw new Error("userId not found in request params");let d=await this.getEnrollments(o),i=d.includes("enrollment:passkey-prf:v2"),u=d.includes("enrollment:passkey-gate:v2"),c;if(i&&a)c={method:"passkey-prf",prfOutput:a,userId:o};else if(u)c={method:"passkey-gate",userId:o};else throw new Error("No passkey enrollment found for this user");let p={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:c}};this.setupUnlockResponseListener(p),this.worker?.postMessage(p)}catch(e){this.hideLoading(),this.showError(`WebAuthn failed: ${D(e)}`),console.error("[KMS Client] WebAuthn unlock failed:",e)}}async handlePassphraseUnlock(e){if(!e||e.trim().length===0){this.showError("Please enter a passphrase");return}this.showLoading(),this.hideError();try{if(!this.pendingUnlockRequest)throw new Error("No pending operation");let t=this.pendingUnlockRequest.params?.userId;if(!t)throw new Error("userId not found in request params");let s={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:{method:"passphrase",passphrase:e,userId:t}}};this.setupUnlockResponseListener(s),this.worker?.postMessage(s)}catch(t){console.error("[KMS Client] Passphrase unlock failed:",t),this.hideLoading(),this.showError(`Unlock failed: ${D(t)}`)}}setupUnlockResponseListener(e){let t=s=>{let n=s.data;n.id===e.id&&(this.worker?.removeEventListener("message",t),this.hideModal(),this.sendToParent(n),this.pendingUnlockRequest=null)};this.worker?.addEventListener("message",t)}showError(e){let t=document.getElementById("kms-modal-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideError(){let e=document.getElementById("kms-modal-error");e&&e.classList.add("hidden")}showLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.remove("hidden")}hideLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.add("hidden")}hideModal(){let e=document.getElementById("unlock-modal");e&&e.classList.add("hidden");let t=document.getElementById("kms-passphrase-input");t&&(t.value=""),this.hideLoading(),this.hideError()}async promptUnlockForEnrollment(e,t){this.hideSetupSuccess();let s=document.querySelector("#setup-modal .kms-modal-body");if(s){s.querySelectorAll(".kms-auth-option, .kms-divider").forEach(i=>i.classList.add("hidden"));let a=document.createElement("div");a.id="multi-enrollment-unlock",a.className="multi-enrollment-instructions",a.innerHTML=`
        <p class="multi-enrollment-title">
          🔒 Multi-Enrollment Authentication Required
        </p>
        <p class="multi-enrollment-description">
          You already have an authentication method set up. Please authenticate with your existing method to add a new one.
        </p>
      `,s.insertBefore(a,s.firstChild);let o=e.some(i=>i.includes("passphrase")),d=e.some(i=>i.includes("passkey"));if(o){let i=document.createElement("div");i.className="kms-auth-option",i.id="temp-passphrase-unlock",i.innerHTML=`
          <label for="temp-passphrase-input" class="kms-input-label">Passphrase</label>
          <input
            type="password"
            id="temp-passphrase-input"
            class="kms-input"
            placeholder="Enter your passphrase"
            autocomplete="off"
          />
          <button id="temp-passphrase-btn" class="kms-auth-btn kms-secondary">
            <span class="kms-auth-icon">🔐</span>
            <span class="kms-auth-label">Unlock with Passphrase</span>
          </button>
        `,s.appendChild(i)}if(d){let i=document.createElement("div");i.className="kms-auth-option",i.id="temp-passkey-unlock",i.innerHTML=`
          <button id="temp-passkey-btn" class="kms-auth-btn kms-primary">
            <span class="kms-auth-icon">🔑</span>
            <span class="kms-auth-label">Unlock with Passkey</span>
          </button>
        `,s.appendChild(i)}}return new Promise(n=>{let a=()=>{document.getElementById("multi-enrollment-unlock")?.remove(),document.getElementById("temp-passphrase-unlock")?.remove(),document.getElementById("temp-passkey-unlock")?.remove(),s?.querySelectorAll(".kms-auth-option, .kms-divider")?.forEach(c=>c.classList.remove("hidden"))},o=document.getElementById("temp-passphrase-btn"),d=document.getElementById("temp-passphrase-input");if(o&&d){let u=()=>{let c=d.value;if(!c){this.showSetupError("Please enter your passphrase");return}a(),n({method:"passphrase",passphrase:c,userId:t})};o.onclick=u,d.onkeydown=c=>{c.key==="Enter"&&u()}}let i=document.getElementById("temp-passkey-btn");i&&(i.onclick=async()=>{try{let u=localStorage.getItem("kms:appSalt"),c;u?c=new Uint8Array(u.split(",").map(w=>parseInt(w,10))):c=crypto.getRandomValues(new Uint8Array(32));let p=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:c}}}}});if(!p)throw new Error("No credential returned");let y=F(p)?.results?.first,f=e.some(w=>w.includes("prf")),k=e.some(w=>w.includes("gate")),g;if(f&&y)g={method:"passkey-prf",prfOutput:y,userId:t};else if(k)g={method:"passkey-gate",userId:t};else throw new Error("Unable to determine passkey method");a(),n(g)}catch(u){this.showSetupError(`Passkey unlock failed: ${D(u)}`)}})})}setupSetupModalHandlers(){let e=document.getElementById("kms-setup-webauthn-btn"),t=document.getElementById("kms-setup-passphrase-input"),s=document.getElementById("kms-setup-passphrase-confirm-input"),n=document.getElementById("kms-setup-passphrase-btn"),a=document.getElementById("kms-passphrase-char-count");if(!e||!t||!s||!n){console.error("[KMS Client] Setup modal elements not found");return}e.onclick=()=>this.handleWebAuthnSetup();let o=document.getElementById("kms-passphrase-match-feedback"),d=()=>{let u=t.value,c=s.value;if(o){if(c.length===0){o.classList.add("hidden");return}o.classList.remove("hidden"),u===c?(o.textContent="✓ Passphrases match",o.classList.remove("error"),o.classList.add("success")):(o.textContent="✗ Passphrases do not match",o.classList.remove("success"),o.classList.add("error"))}};t.oninput=()=>{let u=t.value.length,c=12;a&&(a.textContent=`${u} / ${c} characters`,u<c?(a.classList.remove("success"),a.classList.add("error")):(a.classList.remove("error"),a.classList.add("success"))),d()},s.oninput=d,n.onclick=()=>this.handlePassphraseSetup(t.value,s.value);let i=()=>{this.handlePassphraseSetup(t.value,s.value).catch(u=>{console.error("[KMS Client] Passphrase setup failed:",u),this.showSetupError(u instanceof Error?u.message:"Unknown error")})};t.onkeydown=u=>{u.key==="Enter"&&i()},s.onkeydown=u=>{u.key==="Enter"&&i()}}async encryptCredentials(e,t){let s=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),n=E(t),a=await crypto.subtle.importKey("raw",n,{name:"ECDH",namedCurve:"P-256"},!1,[]),o=await crypto.subtle.deriveBits({name:"ECDH",public:a},s.privateKey,256),d=await crypto.subtle.importKey("raw",o,"HKDF",!1,["deriveBits"]),i=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},d,256),u=await crypto.subtle.importKey("raw",i,{name:"AES-GCM",length:256},!1,["encrypt"]),c=crypto.getRandomValues(new Uint8Array(12)),p=new TextEncoder().encode(JSON.stringify(e)),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,tagLength:128},u,p),y=await crypto.subtle.exportKey("raw",s.publicKey);return{ephemeralPublicKey:m(y),iv:m(c.buffer),encryptedCredentials:m(l)}}async handleWebAuthnSetup(){this.showSetupLoading(),this.hideSetupError();try{let e="demouser@ats.run",t=window.location.hostname;if(this.isStatelessPopup){let l=E(this.appSalt),y=await navigator.credentials.create({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),rp:{id:t,name:"ATS KMS V2"},user:{id:new TextEncoder().encode(e),name:e,displayName:e},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},extensions:{prf:{eval:{first:l}}}}});if(!y)throw new Error("No credential returned");let f=F(y),k=f?.enabled===!0,g=f?.results?.first,w;if(k)if(g)w="passkey-prf",console.log("[KMS Client] PRF output available from create() (modern platform)");else{console.log("[KMS Client] PRF enabled but no output yet, calling get() (legacy platform)");let x=await navigator.credentials.get({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:l}}}}});g=F(x)?.results?.first,g?(w="passkey-prf",console.log("[KMS Client] PRF output obtained from get()")):(w="passkey-gate",console.warn("[KMS Client] PRF enabled but no output from get(), falling back to gate mode"))}else w="passkey-gate",console.log("[KMS Client] PRF not supported by authenticator, using gate mode");let K={credentialId:m(y.rawId),rpId:t};w==="passkey-prf"&&g&&(K.prfOutput=m(g));let P=await this.encryptCredentials(K,this.transportPublicKey),S=this.credentialPort;S?(console.log("[KMS Client] Sending credentials via MessagePort to iframe"),S.postMessage({type:"popup:credentials",method:w,transportKeyId:this.transportKeyId,userId:e,...P}),this.hideSetupLoading(),this.showSetupSuccess()):window.opener&&(console.log("[KMS Client] Sending credentials via window.opener to parent"),window.opener.postMessage({type:"kms:setup-credentials",method:w,transportKeyId:this.transportKeyId,userId:e,...P},this.parentOrigin),this.hideSetupLoading(),this.showSetupSuccess());return}let s=await this.getEnrollments(e),n=null;s.length>0&&(this.hideSetupLoading(),n=await this.promptUnlockForEnrollment(s,e),this.showSetupLoading());let a=crypto.getRandomValues(new Uint8Array(32)),o=await navigator.credentials.create({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),rp:{id:t,name:"ATS KMS V2"},user:{id:new TextEncoder().encode(e),name:e,displayName:e},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},extensions:{prf:{eval:{first:a}}}}});if(!o)throw new Error("No credential returned");let i=F(o)?.enabled===!0,u;if(i){let l=await navigator.credentials.get({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:a}}}}});u=F(l)?.results?.first}let c;n?c={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:e,method:i&&u?"passkey-prf":"passkey-gate",credentials:n,newCredentials:{credentialId:o.rawId,...u&&{prfOutput:u},rpId:t}}}:c={id:`setup-${Date.now()}`,method:i&&u?"setupPasskeyPRF":"setupPasskeyGate",params:{userId:e,credentialId:o.rawId,...u&&{prfOutput:u},rpId:t}},this.worker?.postMessage(c);let p=await new Promise((l,y)=>{let f=k=>{let g=k.data;if(g.id===c.id)if(this.worker?.removeEventListener("message",f),g.error){let w=typeof g.error=="string"?g.error:g.error.message;y(new Error(w))}else l(g.result)};this.worker?.addEventListener("message",f),setTimeout(()=>{this.worker?.removeEventListener("message",f),y(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),localStorage.setItem("kms:appSalt",Array.from(a).toString()),this.notifySetupComplete({method:u?"passkey-prf":"passkey-gate",result:p})}catch(e){this.hideSetupLoading(),this.showSetupError(`WebAuthn setup failed: ${D(e)}`),console.error("[KMS Client] WebAuthn setup failed:",e)}}async handlePassphraseSetup(e,t){if(!e||e.trim().length===0){this.showSetupError("Please enter a passphrase");return}if(e.length<12){this.showSetupError("Passphrase must be at least 12 characters");return}if(!t||t.trim().length===0){this.showSetupError("Please confirm your passphrase");return}if(e!==t){this.showSetupError("Passphrases do not match");return}this.showSetupLoading(),this.hideSetupError();try{let s="demouser@ats.run";if(console.log("[KMS Client] handlePassphraseSetup - isStatelessPopup:",this.isStatelessPopup,{transportKey:this.transportPublicKey?.slice(0,20)+"...",keyId:this.transportKeyId}),this.isStatelessPopup){console.log("[KMS Client] Entering stateless popup flow for passphrase setup"),console.log("[KMS Client] window.opener check:",{hasOpener:!!window.opener,openerIsWindow:window.opener===window,parentOrigin:this.parentOrigin});let i=await this.encryptCredentials({passphrase:e},this.transportPublicKey);console.log("[KMS Client] Credentials encrypted, preparing to send");let u=this.credentialPort;u?(console.log("[KMS Client] Sending credentials via MessagePort to iframe"),u.postMessage({type:"popup:credentials",method:"passphrase",transportKeyId:this.transportKeyId,userId:s,...i}),this.hideSetupLoading(),this.showSetupSuccess()):window.opener?(console.log("[KMS Client] Sending credentials via window.opener to parent"),window.opener.postMessage({type:"kms:setup-credentials",method:"passphrase",transportKeyId:this.transportKeyId,userId:s,...i},this.parentOrigin),this.hideSetupLoading(),this.showSetupSuccess()):(console.error("[KMS Client] No communication channel available"),this.hideSetupLoading(),this.showSetupError("Communication channel not ready. Please try again."));return}let n=await this.getEnrollments(s),a=null;n.length>0&&(this.hideSetupLoading(),a=await this.promptUnlockForEnrollment(n,s),this.showSetupLoading());let o;a?o={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:s,method:"passphrase",credentials:a,newCredentials:{passphrase:e}}}:o={id:`setup-${Date.now()}`,method:"setupPassphrase",params:{userId:s,passphrase:e}},this.worker?.postMessage(o);let d=await new Promise((i,u)=>{let c=p=>{let l=p.data;if(l.id===o.id)if(this.worker?.removeEventListener("message",c),l.error){let y=typeof l.error=="string"?l.error:l.error.message;u(new Error(y))}else i(l.result)};this.worker?.addEventListener("message",c),setTimeout(()=>{this.worker?.removeEventListener("message",c),u(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),this.notifySetupComplete({method:"passphrase",result:d})}catch(s){this.hideSetupLoading(),this.showSetupError(`Setup failed: ${D(s)}`),console.error("[KMS Client] Passphrase setup failed:",s)}}showSetupError(e){let t=document.getElementById("kms-setup-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideSetupError(){let e=document.getElementById("kms-setup-error");e&&e.classList.add("hidden")}showSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.remove("hidden")}hideSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.add("hidden")}showSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.remove("hidden")}hideSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.add("hidden")}notifySetupComplete(e){let t={type:"kms:setup-complete",method:e.method,result:e.result};window.opener&&window.opener.postMessage(t,this.parentOrigin);try{localStorage.setItem("kms:setup-complete",JSON.stringify({timestamp:Date.now(),...t}))}catch(s){console.warn("[KMS Client] Failed to set localStorage flag:",s)}try{let s=new BroadcastChannel("kms-setup");s.postMessage(t),s.close()}catch(s){console.warn("[KMS Client] BroadcastChannel not available:",s)}}async terminate(){this.worker&&(this.worker.terminate(),this.worker=null),this.isInitialized=!1}async send(e){let{handleMessage:t}=await Promise.resolve().then(()=>(Vt(),Bt));return await t(e)}};if(typeof window<"u"&&typeof document<"u"){let r=new URLSearchParams(window.location.search),e=r.get("parentOrigin")??"https://allthe.services",t=window.self!==window.top,s=r.get("mode")==="setup"||r.has("setup"),n=!t&&(window.opener!==null||s),a=new Ve({parentOrigin:e}),o=()=>{if(a.init().catch(d=>{console.error("[KMS Client] Auto-initialization failed:",d)}),n)if(r.has("transportKey")&&r.has("keyId"))setTimeout(()=>{a.setupSetupModalHandlers();let i=document.getElementById("setup-modal");i&&i.classList.remove("hidden")},100);else{console.log("[KMS Client] Popup in KMS-only mode, signaling ready to parent...");let i=r.get("parentOrigin")??"http://localhost:5173";window.opener&&window.opener.postMessage({type:"kms:popup-ready"},i),window.addEventListener("message",u=>{if(u.data?.type==="kms:connect-port"&&u.origin===i){if(console.log("[KMS Client] Popup received kms:connect-port from parent"),!u.ports||!u.ports[0]){console.error("[KMS Client] No MessagePort received with kms:connect-port");return}let p=u.ports[0];p.onmessage=l=>{let y=l.data;y?.type==="kms:connect"&&(console.log("[KMS Client] Popup received kms:connect via MessagePort"),a.transportPublicKey=y.transportKey,a.transportKeyId=y.transportKeyId,a.appSalt=y.appSalt,a.hkdfSalt=y.hkdfSalt,a.isStatelessPopup=!0,a.credentialPort=p,p.postMessage({type:"popup:connected"}),setTimeout(()=>{a.setupSetupModalHandlers();let f=document.getElementById("setup-modal");f&&f.classList.remove("hidden")},100))}}})}};if(document.readyState==="loading"?document.addEventListener("DOMContentLoaded",o):o(),document.readyState==="loading")document.addEventListener("DOMContentLoaded",()=>{let d=document.getElementById("kms-unlock-form"),i=document.getElementById("kms-setup-form");d&&d.addEventListener("submit",u=>(u.preventDefault(),!1)),i&&i.addEventListener("submit",u=>(u.preventDefault(),!1))});else{let d=document.getElementById("kms-unlock-form"),i=document.getElementById("kms-setup-form");d&&d.addEventListener("submit",u=>(u.preventDefault(),!1)),i&&i.addEventListener("submit",u=>(u.preventDefault(),!1))}if(t){try{new BroadcastChannel("kms-setup-credentials").addEventListener("message",u=>{console.log("[KMS Client] Iframe received credentials from popup via BroadcastChannel"),u.data?.type==="kms:setup-credentials"&&window.parent&&(window.parent.postMessage(u.data,e),console.log("[KMS Client] Iframe forwarded credentials to parent"))}),new BroadcastChannel("kms-setup").addEventListener("message",u=>{let c=u.data;c?.type==="kms:setup-complete"&&window.parent&&window.parent.postMessage(c,e)})}catch(d){console.warn("[KMS Client] BroadcastChannel not available for iframe:",d)}window.addEventListener("storage",d=>{if(d.key==="kms:setup-credentials"&&d.newValue)try{console.log("[KMS Client] Iframe received credentials from popup via localStorage");let i=JSON.parse(d.newValue);i?.type==="kms:setup-credentials"&&(window.parent&&(window.parent.postMessage(i,e),console.log("[KMS Client] Iframe forwarded credentials to parent")),localStorage.removeItem("kms:setup-credentials"))}catch(i){console.warn("[KMS Client] Failed to parse setup-credentials from localStorage:",i)}if(d.key==="kms:setup-complete"&&d.newValue)try{let i=JSON.parse(d.newValue);window.parent&&window.parent.postMessage({type:i.type,method:i.method,result:i.result},e),localStorage.removeItem("kms:setup-complete")}catch(i){console.warn("[KMS Client] Failed to parse setup-complete from localStorage:",i)}});try{let d=localStorage.getItem("kms:setup-complete");if(d){let i=JSON.parse(d);i.timestamp&&Date.now()-i.timestamp<5e3&&window.parent&&window.parent.postMessage({type:i.type,method:i.method,result:i.result},e),localStorage.removeItem("kms:setup-complete")}}catch(d){console.warn("[KMS Client] Failed to check localStorage for setup-complete:",d)}}window.__kmsClient=a,window.__kmsContext={isIframe:t,isStandaloneSetup:n}}export{Ve as KMSClient};
