var Ot=Object.defineProperty;var W=(r,e)=>()=>(r&&(e=r(r=0)),e);var Ft=(r,e)=>{for(var t in e)Ot(r,t,{get:e[t],enumerable:!0})};function L(r){if(r instanceof Error)return r.message;if(typeof r=="string")return r;if(typeof r=="object"&&r!==null&&"message"in r&&typeof r.message=="string")return r.message;try{return String(r)}catch{return"Unknown error"}}function ve(r,e){return`${r}: ${L(e)}`}var be=W(()=>{"use strict"});function w(r){let e=new Uint8Array(r),t=Array.from(e,n=>String.fromCharCode(n)).join("");return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function S(r){let e=r.replace(/-/g,"+").replace(/_/g,"/"),t=e.length%4;t&&(e+="=".repeat(4-t));let s=atob(e),n=new Uint8Array(s.length);for(let a=0;a<s.length;a++)n[a]=s.charCodeAt(a);return n.buffer}function z(r){if(r.length!==65||r[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let e=w(r.slice(1,33).buffer),t=w(r.slice(33).buffer);return{kty:"EC",crv:"P-256",x:e,y:t}}async function Q(r){let e={crv:r.crv,kty:r.kty,x:r.x,y:r.y},t=JSON.stringify(e),s=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(t));return w(s)}function We(r){return"{"+Object.keys(r).sort().map(s=>[s,r[s]]).map(([s,n])=>`"${String(s)}":${JSON.stringify(n)}`).join(",")+"}"}function de(r){let e={kmsVersion:r.kmsVersion,method:r.method,algVersion:r.algVersion,purpose:r.purpose};r.credentialId&&(e.credentialId=w(r.credentialId));let t=We(e);return new TextEncoder().encode(t).buffer}function ue(r){let e={kmsVersion:r.kmsVersion,kid:r.kid,alg:r.alg,purpose:r.purpose,createdAt:r.createdAt,keyType:r.keyType},t=We(e);return new TextEncoder().encode(t).buffer}async function Ie(r){let e=await crypto.subtle.exportKey("raw",r),t=await crypto.subtle.importKey("raw",e,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),s=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",t,s)}function Oe(r,e){return Nt(r,e)}function Nt(r,e){let t=new Uint8Array(r),s=new Uint8Array(e);if(t.length!==s.length)return!1;let n=0;for(let a=0;a<t.length;a++)n|=t[a]^s[a];return n===0}async function re(r){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(r))}async function Fe(r={min:150,max:300,mid:220}){let e=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),t=crypto.getRandomValues(new Uint8Array(16)),s=1e5,n=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:t,iterations:s},e,256);let o=performance.now()-n,u=Math.round(s*r.mid/o);return u=Math.min(Math.max(u,5e4),2e6),{iterations:u,measuredMs:o}}var Y=W(()=>{"use strict"});async function le(){return new Promise((r,e)=>{let t=indexedDB.open($t,Gt);t.onerror=()=>{e(new Error("Failed to open IndexedDB"))},t.onsuccess=()=>{$=t.result,r()},t.onupgradeneeded=s=>{let n=s.target.result;if(n.objectStoreNames.contains("config")||n.createObjectStore("config",{keyPath:"method"}),!n.objectStoreNames.contains("keys")){let a=n.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!n.objectStoreNames.contains("leases")){let a=n.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!n.objectStoreNames.contains("audit")){let a=n.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}n.objectStoreNames.contains("meta")||n.createObjectStore("meta",{keyPath:"key"})}})}async function X(){if($||await le(),!$)throw new Error("Database not initialized");return $}function He(){$&&($.close(),$=null)}async function ce(r,e){let t=await X();return new Promise((s,n)=>{let u=t.transaction(r,"readonly").objectStore(r).get(e);u.onsuccess=()=>{s(u.result)},u.onerror=()=>{n(new Error(`Failed to get from ${r}`))}})}async function Z(r,e){let t=await X();return new Promise((s,n)=>{let u=t.transaction(r,"readwrite").objectStore(r).put(e);u.onsuccess=()=>{s()},u.onerror=()=>{n(new Error(`Failed to put to ${r}`))}})}async function Se(r,e){let t=await X();return new Promise((s,n)=>{let u=t.transaction(r,"readwrite").objectStore(r).delete(e);u.onsuccess=()=>{s()},u.onerror=()=>{n(new Error(`Failed to delete from ${r}`))}})}async function jt(r){let e=await X();return new Promise((t,s)=>{let o=e.transaction(r,"readonly").objectStore(r).getAll();o.onsuccess=()=>{t(o.result)},o.onerror=()=>{s(new Error(`Failed to getAll from ${r}`))}})}async function V(r,e,t,s=r.algorithm,n=r.usages,a={alg:"unknown",purpose:"unknown"}){let o=crypto.getRandomValues(new Uint8Array(12)),u=Date.now(),i=ue({kmsVersion:2,kid:t,alg:a.alg,purpose:a.purpose,createdAt:u,keyType:Array.isArray(n)?n.join(","):String(n)}),d=r.type==="private"?"pkcs8":"raw",l=await crypto.subtle.exportKey(d,r),c=await crypto.subtle.encrypt({name:"AES-GCM",iv:o,additionalData:i},e,l),p={kid:t,kmsVersion:2,wrappedKey:c,iv:o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength),aad:i,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:u};await Z("keys",p)}async function Ne(r,e,t,s=[]){let n=await ce("keys",r);if(!n)throw new Error(`No wrapped key with id: ${r}`);let a=new Uint8Array(n.iv),o=n.aad,u=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:o},e,n.wrappedKey),i=typeof t=="string"?t:t.name,l=i==="ECDSA"||i==="ECDH"||i==="Ed25519"||i.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(l,u,t,!1,s)}async function O(r){return await ce("keys",r)??null}async function U(){return jt("keys")}async function $e(r){await Se("keys",r)}async function x(r){let e=await ce("meta",r);return e?e.value:null}async function T(r,e){await Z("meta",{key:r,value:e})}async function Ge(r){await Se("meta",r)}async function je(r){await Z("audit",r)}async function ee(){let r=await X();return new Promise((e,t)=>{let o=r.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();o.onsuccess=()=>{e(o.result)},o.onerror=()=>{t(new Error("Failed to get audit entries"))}})}async function Je(){let r=await ee();return r.length>0?r[r.length-1]:null}async function Pe(r){await Z("leases",r)}async function se(r){return await ce("leases",r)??null}async function Ae(r){let e=await X();return new Promise((t,s)=>{let u=e.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(r);u.onsuccess=()=>{t(u.result)},u.onerror=()=>{s(new Error("Failed to get user leases"))}})}async function ne(r){await Se("leases",r)}async function _e(r){let t=(await U()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let s=t[0];if(!s)throw new Error("No VAPID key found after filtering");let n={...s,subscription:r};await Z("keys",n)}async function ze(){let e=(await U()).filter(a=>a.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");let{subscription:s,...n}=t;await Z("keys",n)}async function Ee(){let e=(await U()).filter(s=>s.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return t.subscription??null}var $t,Gt,$,pe=W(()=>{"use strict";Y();$t="kms-v2",Gt=1,$=null});function Ce(){let r=new Uint8Array(32);return crypto.getRandomValues(r),r}async function me(r,e,t){let s=t??Ce(),{iterations:n}=await Fe(),a=crypto.getRandomValues(new Uint8Array(16)),o=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:n},o,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),i=await Ie(u),d=crypto.getRandomValues(new Uint8Array(12)),l=de({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),c=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:l},u,s),p={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:n,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:i,encryptedMS:c,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:l,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await T(ye(r),p),{success:!0,ms:s}}async function we(r,e,t,s,n="",a,o){let u=s??Ce(),i=a??crypto.getRandomValues(new Uint8Array(32)),d=o??await re("ATS/KMS/KEK-wrap/salt/v2"),l=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),c=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),p=d instanceof Uint8Array?d.buffer:d,y=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:p,info:l},c,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),f=crypto.getRandomValues(new Uint8Array(12)),k=de({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:e,purpose:"master-secret"}),g=await crypto.subtle.encrypt({name:"AES-GCM",iv:f,additionalData:k},y,u),m=Date.now(),v=i.buffer.slice(i.byteOffset,i.byteOffset+i.byteLength),P;d instanceof Uint8Array?P=d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength):P=d;let I={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:e,rpId:n,kdf:{algorithm:"HKDF-SHA256",appSalt:v,hkdfSalt:P,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:g,msIV:f.buffer.slice(f.byteOffset,f.byteOffset+f.byteLength),msAAD:k,msVersion:1,createdAt:m,updatedAt:m};return await T(fe(r),I),{success:!0,ms:u}}async function he(r,e,t,s=""){let n=t??Ce(),a=crypto.getRandomValues(new Uint8Array(32)),o=await re("ATS/KMS/KEK-gate/salt/v2"),u=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),i=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),d=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:o,info:u},i,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),l=crypto.getRandomValues(new Uint8Array(12)),c=de({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:e,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:l,additionalData:c},d,n),y=Date.now(),f={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:e,rpId:s,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:p,msIV:l.buffer.slice(l.byteOffset,l.byteOffset+l.byteLength),msAAD:c,msVersion:1,createdAt:y,updatedAt:y};return await T(ge(r),f),{success:!0,ms:n}}async function Jt(r,e){let t=await x(ye(r));if(!t)return{success:!1,error:"Passphrase not set up"};let s=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),n=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:t.kdf.salt,iterations:t.kdf.iterations},s,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await Ie(n);if(!Oe(a,t.kcv))return{success:!1,error:"Invalid passphrase"};try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},n,t.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function _t(r,e){let t=await x(fe(r));if(!t)return{success:!1,error:"Passkey not set up"};let s=t.kdf.hkdfSalt,n=new TextEncoder().encode(t.kdf.info),a=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:s,info:n},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let u=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},o,t.encryptedMS);return{success:!0,ms:new Uint8Array(u)}}catch{return{success:!1,error:"Decryption failed"}}}async function zt(r){let e=await x(ge(r));if(!e)return{success:!1,error:"Passkey gate not set up"};let t=new Uint8Array(e.pepperWrapped),s=await re("ATS/KMS/KEK-gate/salt/v2"),n=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:s,info:n},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let u=await crypto.subtle.decrypt({name:"AES-GCM",iv:e.msIV,additionalData:e.msAAD},o,e.encryptedMS);return{success:!0,ms:new Uint8Array(u)}}catch{return{success:!1,error:"Decryption failed"}}}async function Qe(r){let e=await x(ye(r)),t=await x(fe(r)),s=await x(ge(r));return!!(e||t||s)}async function xe(r){return!!await x(ye(r))}async function Re(r){let e=await x(fe(r)),t=await x(ge(r));return!!(e||t)}async function ae(r){let e=await re("ATS/KMS/MKEK/salt/v2"),t=new TextEncoder().encode("ATS/KMS/MKEK/v2"),s=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:t},s,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function q(r,e){let t=Date.now(),s=null;try{let n;switch(r.method){case"passphrase":n=await Jt(r.userId,r.passphrase);break;case"passkey-prf":n=await _t(r.userId,r.prfOutput);break;case"passkey-gate":n=await zt(r.userId);break;default:throw new Error("Unknown credential method")}if(!n.success)throw new Error(n.error??"Unlock failed");s=n.ms;let a=await ae(s),o=await e(a,s),u=Date.now();return{result:o,unlockTime:t,lockTime:u,duration:u-t}}finally{s&&s.fill(0)}}var ye,fe,ge,Ye=W(()=>{"use strict";Y();pe();ye=r=>`enrollment:passphrase:v2:${r}`,fe=r=>`enrollment:passkey-prf:v2:${r}`,ge=r=>`enrollment:passkey-gate:v2:${r}`});async function Xe(){}async function ke(){let r=await x("LRK");return r||(r=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await T("LRK",r)),r}async function ie(r){let e=await crypto.subtle.digest("SHA-256",r);return w(e)}async function B(r){let e=await O("audit-user");if(e&&e.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,r,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),o=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),u=await ie(e.publicKeyRaw);M={type:"UAK",keyPair:{privateKey:a,publicKey:o},keyId:u};return}let t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",t.publicKey);await V(t.privateKey,r,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:s});let n=await ie(s);M={type:"UAK",keyPair:t,keyId:n}}async function Ze(r,e){if(!M||M.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let t=Date.now(),s=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),n=await crypto.subtle.exportKey("raw",s.publicKey),a=w(n),o={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:r,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:t,notAfter:e,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},u=JSON.stringify(o,Object.keys(o).sort()),i=await crypto.subtle.sign("Ed25519",M.keyPair.privateKey,new TextEncoder().encode(u)),d={...o,sig:w(i)},l=await ke(),c=ue({kmsVersion:2,kid:`lak-${r}`,alg:"EdDSA",purpose:"lak",createdAt:t,keyType:"lease-audit-key"}),p=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",s.privateKey,l,{name:"AES-GCM",iv:p,additionalData:c});return await T(`lease-audit-key:${r}`,{leaseId:r,wrappedKey:y,iv:p,aad:c,publicKeyRaw:n,delegationCert:d,expiresAt:e,createdAt:t}),{lakKeyPair:s,delegationCert:d}}async function et(r,e){let t=await x(`lease-audit-key:${r}`);if(!t)throw new Error(`LAK not found for lease: ${r}`);let s=await ke(),n=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,s,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),o=await ie(t.publicKeyRaw);M={type:"LAK",keyPair:{privateKey:n,publicKey:a},keyId:o,cert:e}}async function tt(){let r=await O("audit-instance");if(r&&r.publicKeyRaw){let i=await ke(),d=await crypto.subtle.unwrapKey("pkcs8",r.wrappedKey,i,{name:"AES-GCM",iv:r.iv,additionalData:r.aad},{name:"Ed25519"},!1,["sign"]),l=await crypto.subtle.importKey("raw",r.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),c=await ie(r.publicKeyRaw);M={type:"KIAK",keyPair:{privateKey:d,publicKey:l},keyId:c};return}let e=await ke(),t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),s=await crypto.subtle.exportKey("raw",t.publicKey);await V(t.privateKey,e,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:s});let n=await O("audit-instance");if(!n)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",n.wrappedKey,e,{name:"AES-GCM",iv:n.iv,additionalData:n.aad},{name:"Ed25519"},!1,["sign"]),o=await crypto.subtle.importKey("raw",s,{name:"Ed25519"},!1,["verify"]),u=await ie(s);M={type:"KIAK",keyPair:{privateKey:a,publicKey:o},keyId:u}}async function D(r){let e,t,s=new Promise((n,a)=>{e=n,t=a});return Me=Me.then(async()=>{try{if(!M)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let n=Date.now(),a=await Je(),o=a?a.chainHash:"",i={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:n,op:r.op,kid:r.kid,requestId:r.requestId,userId:r.userId,origin:r.origin,leaseId:r.leaseId,unlockTime:r.unlockTime,lockTime:r.lockTime,duration:r.duration,details:r.details,previousHash:o,signer:M.type,signerId:M.keyId},d=JSON.stringify(i),l=new TextEncoder().encode(o+d),c=await crypto.subtle.digest("SHA-256",l),p=w(c),y=new TextEncoder().encode(p),f=await crypto.subtle.sign("Ed25519",M.keyPair.privateKey,y),k=w(f),g={kmsVersion:i.kmsVersion,seqNum:i.seqNum,timestamp:i.timestamp,op:i.op,kid:i.kid,requestId:i.requestId,userId:i.userId,...i.origin!==void 0&&{origin:i.origin},...i.leaseId!==void 0&&{leaseId:i.leaseId},...i.unlockTime!==void 0&&{unlockTime:i.unlockTime},...i.lockTime!==void 0&&{lockTime:i.lockTime},...i.duration!==void 0&&{duration:i.duration},...i.details!==void 0&&{details:i.details},previousHash:i.previousHash,chainHash:p,signer:i.signer,signerId:i.signerId,...M.cert!==void 0&&{cert:M.cert},sig:k};await je(g),e(g)}catch(n){t(n)}}).catch(()=>{}),s}async function rt(){let r=await ee(),e=[],t=0;for(let s of r){let n={kmsVersion:s.kmsVersion,seqNum:s.seqNum,timestamp:s.timestamp,op:s.op,kid:s.kid,requestId:s.requestId,userId:s.userId,origin:s.origin,leaseId:s.leaseId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:s.details,previousHash:s.previousHash,signer:s.signer,signerId:s.signerId},a=JSON.stringify(n),o=new TextEncoder().encode(s.previousHash+a),u=await crypto.subtle.digest("SHA-256",o);w(u)!==s.chainHash&&e.push(`Chain hash mismatch at seq ${s.seqNum}`),t+=1}return{valid:e.length===0,verified:t,errors:e}}async function st(){let r=await O("audit-user");if(!r||!r.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:w(r.publicKeyRaw)}}function nt(){M=null,Me=Promise.resolve()}var Me,M,at=W(()=>{"use strict";pe();Y();Me=Promise.resolve(),M=null});function E(r,e){if(typeof e!="object"||e===null)throw new C(r,"params","object",e);return e}function b(r,e,t){if(typeof t!="string")throw new C(r,e,"string",t);return t}function G(r,e,t){if(t!==void 0)return b(r,e,t)}function Ke(r,e,t){if(typeof t!="number")throw new C(r,e,"number",t);return t}function Qt(r,e,t){if(typeof t!="boolean")throw new C(r,e,"boolean",t);return t}function it(r,e,t){if(t!==void 0)return Qt(r,e,t)}function De(r,e,t){if(t instanceof ArrayBuffer)return t;if(t instanceof Uint8Array){let s=new ArrayBuffer(t.byteLength);return new Uint8Array(s).set(t),s}throw new C(r,e,"ArrayBuffer or Uint8Array",t)}function Le(r,e,t){if(t!==void 0){if(t instanceof Uint8Array)return t;if(t instanceof ArrayBuffer)return new Uint8Array(t);throw new C(r,e,"ArrayBuffer or Uint8Array",t)}}function j(r,e){if(typeof e!="object"||e===null)throw new C(r,"credentials","AuthCredentials object",e);let t=e;if(typeof t.method!="string")throw new C(r,"credentials.method","string",t.method);if(typeof t.userId!="string")throw new C(r,"credentials.userId","string",t.userId);switch(t.method){case"passphrase":if(typeof t.passphrase!="string")throw new C(r,"credentials.passphrase","string",t.passphrase);return{method:"passphrase",passphrase:t.passphrase,userId:t.userId};case"passkey-prf":if(!(t.prfOutput instanceof ArrayBuffer))throw new C(r,"credentials.prfOutput","ArrayBuffer",t.prfOutput);return{method:"passkey-prf",prfOutput:t.prfOutput,userId:t.userId};case"passkey-gate":return{method:"passkey-gate",userId:t.userId};default:throw new C(r,"credentials.method","passphrase | passkey-prf | passkey-gate",t.method)}}function Yt(r,e){if(typeof e!="object"||e===null)throw new C(r,"payload","VAPIDPayload object",e);let t=e;return{aud:b(r,"payload.aud",t.aud),sub:b(r,"payload.sub",t.sub),exp:Ke(r,"payload.exp",t.exp),jti:b(r,"payload.jti",t.jti)}}function ot(r){let e=E("setupPassphrase",r),t=Le("setupPassphrase","existingMS",e.existingMS);return{userId:b("setupPassphrase","userId",e.userId),passphrase:b("setupPassphrase","passphrase",e.passphrase),...t!==void 0&&{existingMS:t}}}function dt(r){let e=E("setupPasskeyPRF",r);if(!e.credentialId)throw new Error("credentialId required");let t=G("setupPasskeyPRF","rpId",e.rpId),s=Le("setupPasskeyPRF","existingMS",e.existingMS);return{userId:b("setupPasskeyPRF","userId",e.userId),credentialId:De("setupPasskeyPRF","credentialId",e.credentialId),prfOutput:De("setupPasskeyPRF","prfOutput",e.prfOutput),...t!==void 0&&{rpId:t},...s!==void 0&&{existingMS:s}}}function ut(r){let e=E("setupWithPopup",r);return{userId:b("setupWithPopup","userId",e.userId)}}function lt(r){let e=E("setupPasskeyGate",r),t=G("setupPasskeyGate","rpId",e.rpId),s=Le("setupPasskeyGate","existingMS",e.existingMS);return{userId:b("setupPasskeyGate","userId",e.userId),credentialId:De("setupPasskeyGate","credentialId",e.credentialId),...t!==void 0&&{rpId:t},...s!==void 0&&{existingMS:s}}}function ct(r){let e=E("addEnrollment",r);return{userId:b("addEnrollment","userId",e.userId),credentials:j("addEnrollment",e.credentials)}}function pt(r){let e=E("addEnrollmentWithPopup",r);return{userId:b("addEnrollmentWithPopup","userId",e.userId)}}function yt(r){let e=E("generateVAPID",r);return{credentials:j("generateVAPID",e.credentials)}}function ft(r){let e=E("regenerateVAPID",r);return{credentials:j("regenerateVAPID",e.credentials)}}function gt(r){let e=E("signJWT",r);return{kid:b("signJWT","kid",e.kid),payload:Yt("signJWT",e.payload),credentials:j("signJWT",e.credentials)}}function mt(r){let e=E("createLease",r),t={userId:b("createLease","userId",e.userId),ttlHours:Ke("createLease","ttlHours",e.ttlHours),credentials:j("createLease",e.credentials)},s=it("createLease","autoExtend",e.autoExtend);return s!==void 0&&(t.autoExtend=s),t}function wt(r){let e=E("extendLeases",r);if(!Array.isArray(e.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof e.leaseIds}`);if(e.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let s={leaseIds:e.leaseIds.map((a,o)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${o} - expected non-empty string`);return a}),userId:b("extendLeases","userId",e.userId)},n=it("extendLeases","requestAuth",e.requestAuth);return n!==void 0&&(s.requestAuth=n),e.credentials!==void 0&&(s.credentials=j("extendLeases",e.credentials)),s}function ht(r){let e=E("issueVAPIDJWT",r),t=G("issueVAPIDJWT","kid",e.kid),s=G("issueVAPIDJWT","jti",e.jti),n=e.exp!==void 0?Ke("issueVAPIDJWT","exp",e.exp):void 0;return{leaseId:b("issueVAPIDJWT","leaseId",e.leaseId),...t!==void 0&&{kid:t},...s!==void 0&&{jti:s},...n!==void 0&&{exp:n}}}function kt(r){let e=E("issueVAPIDJWTs",r),t=G("issueVAPIDJWTs","kid",e.kid);return{leaseId:b("issueVAPIDJWTs","leaseId",e.leaseId),count:Ke("issueVAPIDJWTs","count",e.count),...t!==void 0&&{kid:t}}}function Kt(r){if(r==null)return{};let e=E("isSetup",r),t=G("isSetup","userId",e.userId);return t!==void 0?{userId:t}:{}}function vt(r){if(r==null)return{};let e=E("getEnrollments",r),t=G("getEnrollments","userId",e.userId);return t!==void 0?{userId:t}:{}}function bt(r){let e=E("getPublicKey",r);return{kid:b("getPublicKey","kid",e.kid)}}function It(r){let e=E("getUserLeases",r);return{userId:b("getUserLeases","userId",e.userId)}}function St(r){let e=E("verifyLease",r),t={leaseId:b("verifyLease","leaseId",e.leaseId)};if("deleteIfInvalid"in e){if(typeof e.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");t.deleteIfInvalid=e.deleteIfInvalid}return t}function Pt(r){let e=E("removeEnrollment",r);return{enrollmentId:b("removeEnrollment","enrollmentId",e.enrollmentId),credentials:j("removeEnrollment",e.credentials)}}function Zt(r,e){if(typeof e!="object"||e===null)throw new C(r,"subscription","object",e);let t=e,s=b(r,"subscription.endpoint",t.endpoint);if(!s.startsWith("https://"))throw new Error(`${r}: subscription.endpoint must use HTTPS`);let n;try{n=new URL(s)}catch{throw new Error(`${r}: subscription.endpoint is not a valid URL`)}if(!Xt.some(p=>n.hostname===p||n.hostname.endsWith(`.${p}`)))throw new Error(`${r}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${n.hostname}`);let o=t.expirationTime;if(o!==null&&typeof o!="number")throw new C(r,"subscription.expirationTime","number or null",o);if(typeof t.keys!="object"||t.keys===null)throw new C(r,"subscription.keys","object",t.keys);let u=t.keys,i=b(r,"subscription.keys.p256dh",u.p256dh),d=b(r,"subscription.keys.auth",u.auth);if(i.length===0)throw new Error(`${r}: subscription.keys.p256dh must be non-empty`);if(d.length===0)throw new Error(`${r}: subscription.keys.auth must be non-empty`);let l=b(r,"subscription.eid",t.eid);if(l.length===0)throw new Error(`${r}: subscription.eid must be non-empty`);let c=t.createdAt;if(typeof c!="number")throw new C(r,"subscription.createdAt","number",c);return{endpoint:s,expirationTime:o,keys:{p256dh:i,auth:d},eid:l,createdAt:c}}function At(r){let e=E("setPushSubscription",r);return{subscription:Zt("setPushSubscription",e.subscription)}}var C,Xt,Et=W(()=>{"use strict";C=class extends Error{constructor(t,s,n,a){super(`RPC ${t}: Invalid ${s} - expected ${n}, got ${typeof a}`);this.method=t;this.param=s;this.expected=n;this.received=a;this.name="RPCValidationError"}};Xt=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"]});function tr(r){if(typeof r!="object"||r===null)return!1;let e=r;return typeof e.tokensIssued=="number"&&typeof e.lastResetAt=="number"}function Ct(r){return tr(r)?r:{tokensIssued:0,lastResetAt:Date.now()}}var xt=W(()=>{"use strict"});var Tt={};Ft(Tt,{handleMessage:()=>Rt});async function rr(r,e){let t=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},t,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function Te(){let r=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),e=await crypto.subtle.exportKey("raw",r.publicKey),t=crypto.randomUUID(),s=crypto.getRandomValues(new Uint8Array(32)),n=crypto.getRandomValues(new Uint8Array(32));return F.set(t,{privateKey:r.privateKey,appSalt:s,hkdfSalt:n,createdAt:Date.now()}),setTimeout(()=>{F.delete(t)},10*60*1e3),{publicKey:w(e),keyId:t,appSalt:w(s.buffer),hkdfSalt:w(n.buffer)}}async function sr(r){let e=F.get(r.transportKeyId);if(!e)throw new Error("Transport key not found or expired");let t=S(r.ephemeralPublicKey),s=await crypto.subtle.importKey("raw",t,{name:"ECDH",namedCurve:"P-256"},!1,[]),n=await crypto.subtle.deriveBits({name:"ECDH",public:s},e.privateKey,256),a=await crypto.subtle.importKey("raw",n,"HKDF",!1,["deriveBits"]),o=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},a,256),u=await crypto.subtle.importKey("raw",o,{name:"AES-GCM",length:256},!1,["decrypt"]),i=S(r.iv),d=S(r.encryptedCredentials),l=await crypto.subtle.decrypt({name:"AES-GCM",iv:i,tagLength:128},u,d),c=JSON.parse(new TextDecoder().decode(l)),p;if(r.method==="passphrase"){let y=c;p=await Mt({userId:r.userId,passphrase:y.passphrase},r.requestId)}else if(r.method==="passkey-prf"){let y=c;p=await Dt({userId:r.userId,credentialId:S(y.credentialId),prfOutput:S(y.prfOutput),...y.rpId!==void 0&&{rpId:y.rpId},appSalt:e.appSalt,hkdfSalt:e.hkdfSalt},r.requestId)}else if(r.method==="passkey-gate"){let y=c;p=await Lt({userId:r.userId,credentialId:S(y.credentialId),...y.rpId!==void 0&&{rpId:y.rpId}},r.requestId)}else{let y=r.method;throw new Error(`Unknown method: ${String(y)}`)}return F.delete(r.transportKeyId),p}async function nr(r,e){let t=await Te(),s=new URL("https://kms.ats.run/");s.searchParams.set("mode","setup");let a=await new Promise((u,i)=>{let d=setTimeout(()=>{i(new Error("Setup with popup timeout"))},3e5);J.set(e,{resolve:u,reject:i,timeout:d}),self.postMessage({type:"worker:setup-with-popup",requestId:e,userId:r.userId,popupURL:s.toString(),transportKey:t.publicKey,transportKeyId:t.keyId,appSalt:t.appSalt,hkdfSalt:t.hkdfSalt})});return await sr({method:a.method,transportKeyId:a.transportKeyId,ephemeralPublicKey:a.ephemeralPublicKey,iv:a.iv,encryptedCredentials:a.encryptedCredentials,userId:a.userId,requestId:e})}async function Rt(r){let{id:e,method:t,params:s}=r;try{let n;switch(t){case"setupWithPopup":n=await nr(ut(s),e);break;case"setupPassphrase":n=await Mt(ot(s),e);break;case"setupPasskeyPRF":n=await Dt(dt(s),e);break;case"setupPasskeyGate":n=await Lt(lt(s),e);break;case"addEnrollment":n=await ar(ct(s),e);break;case"addEnrollmentWithPopup":n=await ir(pt(s),e);break;case"generateVAPID":n=await or(yt(s),e);break;case"regenerateVAPID":n=await dr(ft(s),e);break;case"signJWT":n=await ur(gt(s),e);break;case"createLease":n=await lr(mt(s),e);break;case"extendLeases":n=await cr(wt(s),e);break;case"issueVAPIDJWT":n=await Ut(ht(s),e);break;case"issueVAPIDJWTs":n=await pr(kt(s),e);break;case"isSetup":n=await yr(Kt(s));break;case"getEnrollments":n=await fr(vt(s));break;case"verifyAuditChain":n=await gr();break;case"getAuditLog":n=await mr();break;case"getPublicKey":n=await wr(bt(s));break;case"getAuditPublicKey":n=await hr();break;case"getUserLeases":n=await kr(It(s));break;case"verifyLease":n=await Kr(St(s));break;case"getVAPIDKid":n=await vr();break;case"resetKMS":n=await Pr();break;case"removeEnrollment":n=await Ar(Pt(s),e);break;case"setPushSubscription":n=await br(At(s));break;case"removePushSubscription":n=await Ir();break;case"getPushSubscription":n=await Sr();break;default:throw new Error(`Unknown RPC method: ${t}`)}return{id:e,result:n}}catch(n){return{id:e,error:L(n)}}}async function Mt(r,e){let{userId:t,passphrase:s,existingMS:n}=r;if(!s||s.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await me(t,s,n);if(!a.success)throw new Error(a.error);let o=await ae(a.ms);await B(o);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let i=u,d=await crypto.subtle.exportKey("raw",i.publicKey),l=z(new Uint8Array(d)),c=await Q(l);return await V(i.privateKey,o,c,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),a.ms.fill(0),await D({op:"setup-passphrase",kid:"",requestId:e,userId:t,details:{method:"passphrase",vapidKid:c}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:w(d),vapidKid:c}}async function Dt(r,e){let{userId:t,credentialId:s,prfOutput:n,rpId:a="",existingMS:o,appSalt:u,hkdfSalt:i}=r;if(!s||s.byteLength===0)throw new Error("credentialId required");if(!n||n.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let d=await we(t,s,n,o,a,u,i);if(!d.success)throw new Error(d.error);let l=await ae(d.ms);await B(l);let c=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in c)||!("publicKey"in c))throw new Error("Failed to generate ECDSA keypair");let p=c,y=await crypto.subtle.exportKey("raw",p.publicKey),f=z(new Uint8Array(y)),k=await Q(f);return await V(p.privateKey,l,k,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:y}),d.ms.fill(0),await D({op:"setup-passkey-prf",kid:"",requestId:e,userId:t,details:{method:"passkey-prf",credentialId:w(s),vapidKid:k}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:w(y),vapidKid:k}}async function Lt(r,e){let{userId:t,credentialId:s,rpId:n="",existingMS:a}=r;if(!s||s.byteLength===0)throw new Error("credentialId required");let o=await he(t,s,a,n);if(!o.success)throw new Error(o.error);let u=await ae(o.ms);await B(u);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let d=i,l=await crypto.subtle.exportKey("raw",d.publicKey),c=z(new Uint8Array(l)),p=await Q(c);return await V(d.privateKey,u,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:l}),o.ms.fill(0),await D({op:"setup-passkey-gate",kid:"",requestId:e,userId:t,details:{method:"passkey-gate",credentialId:w(s),vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:w(l),vapidKid:p}}async function ar(r,e){let{userId:t,credentials:s}=r;console.log("[Worker] handleAddEnrollment START:",{userId:t,method:s.method,requestId:e}),console.log("[Worker] Step 1: Unlocking with credentials to get MS...");let a=(await q(s,async(h,R)=>(await B(h),R))).result;console.log("[Worker] Step 1: MS obtained and audit key ensured ✓"),console.log("[Worker] Step 2: Generating transport key...");let o=await Te();console.log("[Worker] Step 2: Transport key generated ✓");let u=new URL("https://kms.ats.run/");u.searchParams.set("mode","setup"),console.log("[Worker] Step 3: Sending worker:setup-with-popup message to parent...");let i=new Promise((h,R)=>{let _=setTimeout(()=>{console.error("[Worker] Popup timeout after 5 minutes"),R(new Error("Add enrollment popup timeout"))},3e5);J.set(e,{resolve:h,reject:R,timeout:_}),console.log("[Worker] Posting message with requestId:",e),self.postMessage({type:"worker:setup-with-popup",requestId:e,userId:r.userId,popupURL:u.toString(),transportKey:o.publicKey,transportKeyId:o.keyId,appSalt:o.appSalt,hkdfSalt:o.hkdfSalt}),console.log("[Worker] Message posted, waiting for popup response...")});console.log("[Worker] Step 4: Waiting for popup credentials...");let d=await i;console.log("[Worker] Step 4: Credentials received ✓");let l=F.get(d.transportKeyId);if(!l)throw new Error("Transport key not found or expired");let c=S(d.ephemeralPublicKey),p=await crypto.subtle.importKey("raw",c,{name:"ECDH",namedCurve:"P-256"},!1,[]),y=await crypto.subtle.deriveBits({name:"ECDH",public:p},l.privateKey,256),f=await crypto.subtle.importKey("raw",y,"HKDF",!1,["deriveBits"]),k=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},f,256),g=await crypto.subtle.importKey("raw",k,{name:"AES-GCM",length:256},!1,["decrypt"]),m=S(d.iv),v=S(d.encryptedCredentials),P=await crypto.subtle.decrypt({name:"AES-GCM",iv:m,tagLength:128},g,v),I=JSON.parse(new TextDecoder().decode(P));F.delete(d.transportKeyId);let A=d.method,K;if(A==="passphrase")K=await me(t,I.passphrase,a);else if(A==="passkey-prf"){let h=I,R=h.rpId||"";K=await we(t,S(h.credentialId),S(h.prfOutput),a,R)}else if(A==="passkey-gate"){let h=I,R=h.rpId||"";K=await he(t,S(h.credentialId),a,R)}else{let h=A;throw new Error(`Unknown enrollment method: ${String(h)}`)}if(a.fill(0),!K.success)throw new Error(K.error);return await D({op:"add-enrollment",kid:"",requestId:e,userId:s.userId,details:{method:A,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${A}:v2`}}async function ir(r,e){let{userId:t}=r;console.log("[Worker] handleAddEnrollmentWithPopup START:",{userId:t,requestId:e}),console.log("[Worker] Step 1: Generating transport key...");let s=await Te();console.log("[Worker] Step 1: Transport key generated ✓");let n=new URL("https://kms.ats.run/");n.searchParams.set("mode","setup"),console.log("[Worker] Step 2: Sending worker:setup-with-popup message to parent...");let a=await new Promise((K,h)=>{let R=setTimeout(()=>{console.error("[Worker] Popup timeout after 5 minutes"),h(new Error("Add enrollment popup timeout"))},3e5);J.set(e,{resolve:K,reject:h,timeout:R}),console.log("[Worker] Posting message with requestId:",e),self.postMessage({type:"worker:setup-with-popup",requestId:e,userId:t,popupURL:n.toString(),transportKey:s.publicKey,transportKeyId:s.keyId,appSalt:s.appSalt,hkdfSalt:s.hkdfSalt}),console.log("[Worker] Message posted, waiting for popup response...")});console.log("[Worker] Step 2: New credentials received from popup ✓"),console.log("[Worker] Step 3: Decrypting new credentials...");let o=F.get(a.transportKeyId);if(!o)throw new Error("Transport key not found or expired");let u=S(a.ephemeralPublicKey),i=await crypto.subtle.importKey("raw",u,{name:"ECDH",namedCurve:"P-256"},!1,[]),d=await crypto.subtle.deriveBits({name:"ECDH",public:i},o.privateKey,256),l=await crypto.subtle.importKey("raw",d,"HKDF",!1,["deriveBits"]),c=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},l,256),p=await crypto.subtle.importKey("raw",c,{name:"AES-GCM",length:256},!1,["decrypt"]),y=S(a.iv),f=S(a.encryptedCredentials),k=await crypto.subtle.decrypt({name:"AES-GCM",iv:y,tagLength:128},p,f),g=JSON.parse(new TextDecoder().decode(k));F.delete(a.transportKeyId),console.log("[Worker] Step 3: New credentials decrypted ✓"),console.log("[Worker] Step 4: Requesting unlock with existing credentials...");let m=await new Promise((K,h)=>{let R=setTimeout(()=>{console.error("[Worker] Unlock timeout after 5 minutes"),h(new Error("Unlock modal timeout"))},3e5);oe.set(e,{resolve:K,reject:h,timeout:R}),self.postMessage({type:"worker:request-unlock",requestId:e,userId:t}),console.log("[Worker] Unlock modal request sent, waiting for credentials...")});console.log("[Worker] Step 4: Unlock credentials received ✓"),console.log("[Worker] Step 5: Unlocking with existing credentials to get MS...");let P=(await q(m,async(K,h)=>(await B(K),h))).result;console.log("[Worker] Step 5: MS obtained and audit key ensured ✓"),console.log("[Worker] Step 6: Rewrapping MS with new credentials...");let I=a.method,A;if(I==="passphrase")A=await me(t,g.passphrase,P);else if(I==="passkey-prf"){let K=g,h=K.rpId||"";A=await we(t,S(K.credentialId),S(K.prfOutput),P,h)}else if(I==="passkey-gate"){let K=g,h=K.rpId||"";A=await he(t,S(K.credentialId),P,h)}else{let K=I;throw new Error(`Unknown enrollment method: ${String(K)}`)}if(console.log("[Worker] Step 6: MS rewrapped with new credentials ✓"),P.fill(0),!A.success)throw new Error(A.error);return await D({op:"add-enrollment-with-popup",kid:"",requestId:e,userId:t,details:{method:I,action:"add-enrollment-with-popup"}}),console.log("[Worker] handleAddEnrollmentWithPopup COMPLETE ✓"),{success:!0,enrollmentId:`enrollment:${I}:v2`}}async function or(r,e){let{credentials:t}=r,s=await q(t,async(n,a)=>{await B(n);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let u=o,i=await crypto.subtle.exportKey("raw",u.publicKey),d=z(new Uint8Array(i)),l=await Q(d);return await V(u.privateKey,n,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:i}),{kid:l,publicKey:w(i)}});return await D({op:"generate",kid:s.result.kid,requestId:e,userId:t.userId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),s.result}async function dr(r,e){let{credentials:t}=r,s=await q(t,async(n,a)=>{await B(n);let u=(await U()).filter(y=>y.purpose==="vapid");for(let y of u)await $e(y.kid);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let d=i,l=await crypto.subtle.exportKey("raw",d.publicKey),c=z(new Uint8Array(l)),p=await Q(c);return await V(d.privateKey,n,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:l}),{kid:p,publicKey:w(l),oldKids:u.map(y=>y.kid)}});return await D({op:"regenerate-vapid",kid:s.result.kid,requestId:e,userId:t.userId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:s.result.oldKids,deletedCount:s.result.oldKids.length}}),{kid:s.result.kid,publicKey:s.result.publicKey}}async function ur(r,e){let{kid:t,payload:s,credentials:n}=r;if(!s.aud||!s.sub||!s.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(s.exp<=a)throw new Error("JWT exp must be in the future");if(s.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let o=await q(n,async(u,i)=>{await B(u);let d=await Ne(t,u,{name:"ECDSA",namedCurve:"P-256"},["sign"]),l={typ:"JWT",alg:"ES256",kid:t},c=w(new TextEncoder().encode(JSON.stringify(l)).buffer),p=w(new TextEncoder().encode(JSON.stringify(s)).buffer),y=new TextEncoder().encode(`${c}.${p}`),f=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},d,y),k=w(f);return{jwt:`${c}.${p}.${k}`}});return await D({op:"sign",kid:t,requestId:e,userId:n.userId,unlockTime:o.unlockTime,lockTime:o.lockTime,duration:o.duration,details:{algorithm:"ES256",aud:s.aud,exp:s.exp,jti:s.jti}}),o.result}async function lr(r,e){let{userId:t,ttlHours:s,credentials:n,autoExtend:a}=r;if(s<=0||s>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let u=(await U()).filter(m=>m.purpose==="vapid");if(u.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");u.sort((m,v)=>v.createdAt-m.createdAt);let i=u[0];if(!i)throw new Error("VAPID key record not found after filtering");let d=i.kid,l=`lease-${crypto.randomUUID()}`,c=crypto.getRandomValues(new Uint8Array(32)),p=Date.now(),y=p+s*3600*1e3,f=await q(n,async(m,v)=>{await B(m);let{delegationCert:P}=await Ze(l,y),I=await rr(v,c),A=await O(d);if(!A)throw new Error(`No wrapped key with id: ${d}`);let K=new Uint8Array(A.iv),h=A.aad,R=await crypto.subtle.unwrapKey("pkcs8",A.wrappedKey,m,{name:"AES-GCM",iv:K,additionalData:h},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),_=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",R,I,{name:"AES-GCM",iv:_}),iv:_,sessionKEK:I,lakDelegationCert:P}});await T(`sessionkek:${l}`,f.result.sessionKEK),Ue.set(l,f.result.sessionKEK);let k={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},g={leaseId:l,userId:t,ttlHours:s,createdAt:p,exp:y,autoExtend:a??!0,quotas:k,wrappedLeaseKey:f.result.wrappedLeaseKey,wrappedLeaseKeyIV:f.result.iv.buffer.slice(f.result.iv.byteOffset,f.result.iv.byteOffset+f.result.iv.byteLength),leaseSalt:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),kid:d,lakDelegationCert:f.result.lakDelegationCert};return await Pe(g),await T(`quota:${l}`,{leaseId:l,tokensIssued:0,lastResetAt:p,perEndpoint:{}}),await D({op:"create-lease",kid:d,requestId:e,userId:t,details:{action:"create-lease",leaseId:l,userId:t,ttlHours:s,autoExtend:g.autoExtend}}),{leaseId:l,exp:y,quotas:k,autoExtend:g.autoExtend??!0}}async function cr(r,e){let{leaseIds:t,credentials:s,requestAuth:n}=r,a=[],o=0,u=0,i=0,d=!1;if(s)try{await q(s,async(l,c)=>(d=!0,Promise.resolve()))}catch(l){for(let c of t){let p=await se(c);p&&p.autoExtend===!1&&(a.push({leaseId:c,status:"skipped",reason:`Authentication failed: ${L(l)}`}),u++)}if(u===t.length)return{results:a,extended:o,skipped:u,failed:i}}for(let l of t)try{let c=await se(l);if(!c){a.push({leaseId:l,status:"skipped",reason:`Lease not found: ${l}`}),u++;continue}if(c.autoExtend===!1&&!n){a.push({leaseId:l,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),u++;continue}if(c.autoExtend===!1&&n&&!d){a.push({leaseId:l,status:"skipped",reason:"Authentication required but credentials not valid"}),u++;continue}let y=(await U()).filter(P=>P.purpose==="vapid");if(y.length===0){a.push({leaseId:l,status:"skipped",reason:"No VAPID key found"}),u++;continue}y.sort((P,I)=>I.createdAt-P.createdAt);let k=y[0].kid;if(c.kid!==k){a.push({leaseId:l,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${c.kid}, current kid: ${k})`}),u++;continue}let g=Date.now(),m=g+30*24*60*60*1e3,v={...c,exp:m,createdAt:g};await Pe(v),await D({op:"extend-lease",kid:v.kid,requestId:e,userId:v.userId,details:{action:"extend-lease",leaseId:v.leaseId,userId:v.userId,newExp:m,autoExtend:v.autoExtend}}),a.push({leaseId:l,status:"extended",result:{leaseId:v.leaseId,exp:v.exp,iat:v.createdAt,kid:v.kid,autoExtend:v.autoExtend??!1}}),o++}catch(c){a.push({leaseId:l,status:"skipped",reason:`Error extending lease: ${L(c)}`}),i++}return{results:a,extended:o,skipped:u,failed:i}}async function Ut(r,e){let{leaseId:t}=r,{kid:s}=r;if(!s){let te=(await U()).filter(Wt=>Wt.purpose==="vapid");if(te.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(te.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let qe=te[0];if(!qe)throw new Error("No VAPID key found after filtering");s=qe.kid}let n=await se(t);if(!n)throw new Error(`Lease not found: ${t}`);if(Date.now()>=n.exp)throw new Error("Lease expired");let o=(await U()).filter(H=>H.purpose==="vapid");if(o.length===0)throw new Error("No VAPID key available");o.sort((H,te)=>te.createdAt-H.createdAt);let u=o[0]?.kid;if(!u)throw new Error("Failed to determine current VAPID key");if(n.kid!==u)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await et(t,n.lakDelegationCert);let i=await Ee();if(!i)throw new Error("No push subscription found. Call setPushSubscription() first.");let d=await x(`quota:${t}`),l=Ct(d),c=Date.now()-3600*1e3;if(l.lastResetAt<c&&(l.tokensIssued=0,l.lastResetAt=Date.now()),l.tokensIssued>=n.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");l.tokensIssued++,await T(`quota:${t}`,l);let p=r.jti??crypto.randomUUID(),y=r.exp??Math.floor(Date.now()/1e3)+900,f=new URL(i.endpoint),k=`${f.protocol}//${f.host}`,g={aud:k,sub:"mailto:kms@example.com",exp:y,jti:p,uid:n.userId,eid:i.eid},m=Ue.get(t);if(!m){let H=await x(`sessionkek:${t}`);if(!H)throw new Error(`SessionKEK not found for lease: ${t}`);m=H,Ue.set(t,m)}let v=n.wrappedLeaseKey,P=new Uint8Array(n.wrappedLeaseKeyIV),I=await crypto.subtle.unwrapKey("pkcs8",v,m,{name:"AES-GCM",iv:P},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),A={typ:"JWT",alg:"ES256",kid:n.kid},K=w(new TextEncoder().encode(JSON.stringify(A)).buffer),h=w(new TextEncoder().encode(JSON.stringify(g)).buffer),R=new TextEncoder().encode(`${K}.${h}`),_=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},I,R),Ve=w(_),Vt=`${K}.${h}.${Ve}`,qt=await D({op:"sign",kid:n.kid,requestId:e,userId:n.userId,leaseId:t,details:{action:"issue-lease-jwt",jti:p,aud:k,eid:i.eid}});return{jwt:Vt,jti:p,exp:y,auditEntry:qt}}async function pr(r,e){let{leaseId:t,count:s,kid:n}=r;if(!Number.isInteger(s)||s<1||s>10)throw new Error("count must be an integer between 1 and 10");let a=900,o=Math.floor(a*.6),u=Math.floor(Date.now()/1e3),i=[];for(let d=0;d<s;d++){let l=crypto.randomUUID(),c=u+a+d*o,p=await Ut({leaseId:t,...n!==void 0&&{kid:n},jti:l,exp:c},`${e}-${d}`);i.push(p)}return i}async function yr(r){let e=r?.userId??"default",t=await Qe(e),s=[];await xe(e)&&s.push("passphrase"),await Re(e)&&s.push("passkey");let n;return t&&r?.userId&&(n=await Ae(r.userId)),{isSetup:t,methods:s,...n!==void 0&&{leases:n}}}async function fr(r){let e=r?.userId??"default",t=[];if(await xe(e)&&t.push("enrollment:passphrase:v2"),await Re(e)){let s=await x(`enrollment:passkey-prf:v2:${e}`),n=await x(`enrollment:passkey-gate:v2:${e}`);s&&t.push("enrollment:passkey-prf:v2"),n&&t.push("enrollment:passkey-gate:v2")}return{enrollments:t}}async function gr(){return await rt()}async function mr(){return{entries:await ee()}}async function wr(r){let{kid:e}=r,t=await O(e);if(!t||!t.publicKeyRaw)throw new Error(`Public key not found for kid: ${e}`);return{publicKey:w(t.publicKeyRaw)}}async function hr(){return await st()}async function kr(r){let{userId:e}=r;return{leases:await Ae(e)}}async function Kr(r){let{leaseId:e,deleteIfInvalid:t=!1}=r,s=await se(e);if(!s)return{leaseId:e,valid:!1,reason:"not-found",kid:""};if(Date.now()>=s.exp)return t&&await ne(e),{leaseId:e,valid:!1,reason:"expired",kid:s.kid};let a=(await U()).filter(i=>i.purpose==="vapid");if(a.length===0)return t&&await ne(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:s.kid};a.sort((i,d)=>d.createdAt-i.createdAt);let o=a[0];if(!o)return t&&await ne(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:s.kid};let u=o.kid;return s.kid!==u?(t&&await ne(e),{leaseId:e,valid:!1,reason:"wrong-key",kid:s.kid}):{leaseId:e,valid:!0,kid:s.kid}}async function vr(){let e=(await U()).filter(s=>s.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return{kid:t.kid}}async function br(r){return await _e(r.subscription),{success:!0}}async function Ir(){return await ze(),{success:!0}}async function Sr(){return{subscription:await Ee()}}async function Pr(){He();let r=indexedDB.deleteDatabase("kms-v2");return await new Promise((e,t)=>{r.onsuccess=()=>e(),r.onerror=()=>t(new Error(r.error?.message??"Failed to delete database"))}),await le(),nt(),{success:!0}}async function Ar(r,e){let{enrollmentId:t,credentials:s}=r;return await q(s,async(n,a)=>(await B(n),!0)),await Ge(t),await D({op:"reset",kid:"",requestId:e,userId:s.userId,details:{action:"remove-enrollment",enrollmentId:t}}),{success:!0}}var Ue,F,J,oe,Bt=W(()=>{"use strict";Ye();at();pe();Y();be();Et();xt();Ue=new Map,F=new Map,J=new Map,oe=new Map;self.addEventListener("message",r=>{let e=r.data;if("type"in e&&e.type==="worker:popup-credentials"){let t=e.requestId;if(t&&e.credentials){let s=J.get(t);s&&(clearTimeout(s.timeout),J.delete(t),s.resolve(e.credentials))}return}if("type"in e&&e.type==="worker:popup-error"){let t=e.requestId;if(t){let s=J.get(t);s&&(clearTimeout(s.timeout),J.delete(t),s.reject(new Error(e.reason||"Popup setup failed")))}return}if("type"in e&&e.type==="worker:unlock-credentials"){let t=e.requestId,s=e.credentials;if(t&&s){let n=oe.get(t);n&&(clearTimeout(n.timeout),oe.delete(t),n.resolve(s))}return}if("type"in e&&e.type==="worker:unlock-error"){let t=e.requestId;if(t){let s=oe.get(t);s&&(clearTimeout(s.timeout),oe.delete(t),s.reject(new Error(e.reason||"Unlock failed")))}return}(async()=>{let t=r.data,s=await Rt(t);self.postMessage(s)})().catch(t=>{console.error("[KMS Worker] Message handling failed:",t);let s=r.data;self.postMessage({id:s?.id||"unknown",error:t instanceof Error?t.message:"Unknown error"})})});(async()=>{try{await le(),await Xe(),await tt(),(await ee()).length===0&&await D({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(r){console.error("[KMS Worker] Initialization failed:",r)}})()});be();function Ht(r){if(typeof r!="object"||r===null)return!1;let e=r;if("enabled"in e&&typeof e.enabled!="boolean")return!1;if("results"in e){if(typeof e.results!="object"||e.results===null)return!1;let t=e.results;if("first"in t&&!(t.first instanceof ArrayBuffer)&&!(t.first instanceof Uint8Array)||"second"in t&&!(t.second instanceof ArrayBuffer)&&!(t.second instanceof Uint8Array))return!1}return!0}function N(r){let t=r.getClientExtensionResults().prf;if(t){if(!Ht(t)){console.warn("[WebAuthn] Invalid PRF extension result structure:",t);return}return t}}Y();var Be=class{worker=null;parentOrigin;workerUrl;isInitialized=!1;pendingUnlockRequest=null;pendingUnlockRequestId=null;isStatelessPopup=!1;transportPublicKey=null;transportKeyId=null;appSalt=null;popupState=null;messagePort=null;constructor(e){this.parentOrigin=e.parentOrigin,this.workerUrl=e.workerUrl??"./kms-worker.7e0cfe0a.js"}async init(){if(this.isInitialized)throw new Error("KMSClient already initialized");try{let e=new URLSearchParams(window.location.search);this.transportPublicKey=e.get("transportKey"),this.transportKeyId=e.get("keyId"),this.appSalt=e.get("appSalt"),this.popupState=e.get("state");let t=e.get("parentOrigin");this.isStatelessPopup=!!(this.transportPublicKey&&this.transportKeyId),console.log("[KMS Client] Popup detection:",{url:window.location.href,transportKey:this.transportPublicKey?.slice(0,20)+"...",keyId:this.transportKeyId,state:this.popupState,parentOrigin:t,isStatelessPopup:this.isStatelessPopup}),this.isStatelessPopup&&console.log("[KMS Client] Running in stateless popup mode"),window.addEventListener("message",this.handleParentMessage.bind(this)),this.worker=new Worker(this.workerUrl,{type:"module",name:"kms-worker-v2"}),this.worker.addEventListener("message",this.handleWorkerMessage.bind(this)),this.worker.addEventListener("error",this.handleWorkerError.bind(this)),this.isInitialized=!0,this.isStatelessPopup?console.log("[KMS Client] Stateless popup: Ready for two-phase handshake (hello → ready → connect)"):this.sendToParent({type:"kms:ready"})}catch(e){throw console.error("[KMS Client] Initialization failed:",e),new Error(ve("Failed to initialize KMS client",e))}}handleParentMessage(e){if(e.origin!==this.parentOrigin){console.warn("[KMS Client] Rejected message from invalid origin:",{expected:this.parentOrigin,received:e.origin});return}if(e.data?.type==="kms:hello"&&this.isStatelessPopup){if(console.log("[KMS Client] Received kms:hello message"),e.data.state!==this.popupState){console.error("[KMS Client] State mismatch in kms:hello:",{expected:this.popupState,received:e.data.state});return}console.log("[KMS Client] Replying kms:ready to parent"),e.source&&e.source.postMessage({type:"kms:ready",state:this.popupState},e.origin);return}if(e.data?.type==="kms:connect"&&this.isStatelessPopup){if(console.log("[KMS Client] Received kms:connect message with port"),e.data.state!==this.popupState){console.error("[KMS Client] State mismatch in kms:connect:",{expected:this.popupState,received:e.data.state});return}if(!e.ports||e.ports.length===0){console.error("[KMS Client] No MessagePort transferred in kms:connect");return}this.messagePort=e.ports[0]||null,console.log("[KMS Client] MessagePort established successfully"),this.messagePort&&(this.messagePort.postMessage({type:"kms:connected"}),console.log("[KMS Client] Sent kms:connected confirmation to parent"));return}let t=e.data;if(t?.type==="kms:popup-opened"){let a=t.requestId;this.worker?.postMessage({type:"worker:popup-opened",requestId:a});return}if(t?.type==="kms:popup-blocked"){let a=t.requestId,o=t.reason||"Popup was blocked";this.worker?.postMessage({type:"worker:popup-blocked",requestId:a,reason:o});return}if(t?.type==="kms:popup-ready")return;if(!this.isInitialized||!this.worker){console.error("[KMS Client] Received message before initialization");return}let s=e.data,n=["createLease","generateVAPID","signJWT","regenerateVAPID","addEnrollment"];if(s?.method&&n.includes(s.method)){this.showUnlockModal(s);return}if(s?.method==="extendLeases"&&s.params&&typeof s.params=="object"&&"requestAuth"in s.params&&s.params.requestAuth===!0){this.showUnlockModal(s);return}try{this.worker.postMessage(e.data)}catch(a){console.error("[KMS Client] Failed to forward message to Worker:",a),s?.id&&this.sendToParent({id:s.id,error:ve("Failed to forward message",a)})}}handleWorkerMessage(e){try{let t=e.data;if("type"in t&&t.type==="worker:setup-with-popup"){this.handleSetupWithPopup({requestId:t.requestId,userId:t.userId,popupURL:t.popupURL,transportKey:t.transportKey,transportKeyId:t.transportKeyId,appSalt:t.appSalt,hkdfSalt:t.hkdfSalt});return}if("type"in t&&t.type==="worker:request-unlock"){this.handleUnlockRequest({requestId:t.requestId,userId:t.userId});return}if("type"in t&&t.type==="worker:request-popup-from-parent"){this.handleWorkerPopupRequest(t.url,t.requestId);return}this.sendToParent(t)}catch(t){console.error("[KMS Client] Failed to forward message to parent:",t)}}handleWorkerPopupRequest(e,t){if(!this.parentOrigin){this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:"Parent origin not configured"});return}let s=window.parent&&window.parent!==window?window.parent:null;if(!s){this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:"No parent window available"});return}try{s.postMessage({type:"kms:request-popup",url:e,requestId:t},this.parentOrigin)}catch(n){console.error("[KMS Client] Failed to send popup request to parent:",n),this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:n instanceof Error?n.message:"Unknown error"})}}async handleSetupWithPopup(e){try{if(!this.parentOrigin)throw new Error("Parent origin not configured");let t=window.parent&&window.parent!==window?window.parent:null;if(!t)throw new Error("No parent window available");let s=new URL(e.popupURL);s.searchParams.set("parentOrigin",this.parentOrigin),t.postMessage({type:"kms:request-popup",url:s.toString(),requestId:e.requestId},this.parentOrigin);let a=await new Promise((i,d)=>{let l=setTimeout(()=>{d(new Error("Popup ready timeout"))},3e4),c=p=>{let y=p.data;y?.type==="kms:popup-ready"&&y.requestId===e.requestId&&(p.ports&&p.ports.length>0&&p.ports[0]?(clearTimeout(l),window.removeEventListener("message",c),i(p.ports[0])):(clearTimeout(l),window.removeEventListener("message",c),d(new Error("No MessagePort received with popup-ready"))))};window.addEventListener("message",c)}),o=new Promise((i,d)=>{let l=setTimeout(()=>{d(new Error("Credentials timeout"))},3e5);a.onmessage=c=>{let p=c.data;p?.type==="popup:credentials"?(clearTimeout(l),a.close(),i({method:p.method,transportKeyId:p.transportKeyId,userId:p.userId,ephemeralPublicKey:p.ephemeralPublicKey,iv:p.iv,encryptedCredentials:p.encryptedCredentials})):p?.type==="popup:error"?(clearTimeout(l),a.close(),d(new Error(p.reason||"Popup error"))):p?.type==="popup:connected"&&console.log("[KMS Client] Popup connected, waiting for credentials...")}});a.postMessage({type:"kms:connect",transportKey:e.transportKey,transportKeyId:e.transportKeyId,appSalt:e.appSalt,hkdfSalt:e.hkdfSalt,userId:e.userId});let u=await o;this.worker?.postMessage({type:"worker:popup-credentials",requestId:e.requestId,credentials:u})}catch(t){console.error("[KMS Client] Setup with popup failed:",t),this.worker?.postMessage({type:"worker:popup-error",requestId:e.requestId,reason:t instanceof Error?t.message:"Unknown error"})}}async handleUnlockRequest(e){try{console.log("[KMS Client] Unlock request received from worker:",e),this.pendingUnlockRequestId=e.requestId,this.sendToParent({type:"kms:show-iframe"}),this.pendingUnlockRequest={id:e.requestId,method:"getEnrollments",params:{userId:e.userId}},this.showUnlockModal(this.pendingUnlockRequest)}catch(t){console.error("[KMS Client] Unlock request failed:",t),this.worker?.postMessage({type:"worker:unlock-error",requestId:e.requestId,reason:t instanceof Error?t.message:"Unknown error"})}}handleWorkerError(e){console.error("[KMS Client] Worker error:",{message:e.message,filename:e.filename,lineno:e.lineno,colno:e.colno})}sendToParent(e){let t=window.opener&&window.opener!==null&&window.opener!==window,s=window.parent&&window.parent!==window,n=t?window.opener:s?window.parent:null;if(!n){console.error("[KMS Client] No parent/opener window available",{hasValidOpener:t,hasValidParent:s});return}try{n.postMessage(e,this.parentOrigin)}catch(a){console.error("[KMS Client] Failed to send message to parent/opener:",a)}}async getEnrollments(e){return new Promise((t,s)=>{let n=`get-enrollments-${Date.now()}`,a={id:n,method:"getEnrollments",params:{userId:e}},o=u=>{let i=u.data;if(i.id===n)if(this.worker?.removeEventListener("message",o),i.error){let d=typeof i.error=="string"?i.error:i.error.message;s(new Error(d))}else t(i.result?.enrollments||[])};this.worker?.addEventListener("message",o),this.worker?.postMessage(a),setTimeout(()=>{this.worker?.removeEventListener("message",o),s(new Error("getEnrollments timeout"))},5e3)})}showUnlockModal(e){this.pendingUnlockRequest=e;let t=document.getElementById("unlock-modal"),s=document.getElementById("kms-webauthn-btn"),n=document.getElementById("kms-passphrase-input"),a=document.getElementById("kms-passphrase-btn");if(!t||!s||!n||!a){console.error("[KMS Client] Modal elements not found"),e?this.sendToParent({id:e.id,error:"Modal UI not found"}):this.sendToParent({type:"kms:unlock-error",error:"Modal UI not found"});return}t.classList.remove("hidden"),s.onclick=()=>this.handleWebAuthnUnlock(),a.onclick=()=>this.handlePassphraseUnlock(n.value),n.onkeydown=o=>{o.key==="Enter"&&this.handlePassphraseUnlock(n.value).catch(u=>{console.error("[KMS Client] Passphrase unlock failed:",u),this.showError(u instanceof Error?u.message:"Unknown error")})},this.hideError()}async handleWebAuthnUnlock(){this.showLoading(),this.hideError();try{let e=localStorage.getItem("kms:appSalt"),t;e?t=new Uint8Array(e.split(",").map(c=>parseInt(c,10))):t=crypto.getRandomValues(new Uint8Array(32));let s=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:t}}}}});if(!s)throw new Error("No credential returned");let a=N(s)?.results?.first;if(!this.pendingUnlockRequest)throw new Error("No pending operation");let o=this.pendingUnlockRequest.params?.userId;if(!o)throw new Error("userId not found in request params");let u=await this.getEnrollments(o),i=u.includes("enrollment:passkey-prf:v2"),d=u.includes("enrollment:passkey-gate:v2"),l;if(i&&a)l={method:"passkey-prf",prfOutput:a,userId:o};else if(d)l={method:"passkey-gate",userId:o};else throw new Error("No passkey enrollment found for this user");if(this.pendingUnlockRequestId)this.worker?.postMessage({type:"worker:unlock-credentials",requestId:this.pendingUnlockRequestId,credentials:l}),this.pendingUnlockRequestId=null,this.pendingUnlockRequest=null,this.hideModal(),this.hideLoading();else{let c={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:l}};this.setupUnlockResponseListener(c),this.worker?.postMessage(c)}}catch(e){this.hideLoading(),this.showError(`WebAuthn failed: ${L(e)}`),console.error("[KMS Client] WebAuthn unlock failed:",e)}}async handlePassphraseUnlock(e){if(!e||e.trim().length===0){this.showError("Please enter a passphrase");return}this.showLoading(),this.hideError();try{if(!this.pendingUnlockRequest)throw new Error("No pending operation");let t=this.pendingUnlockRequest.params?.userId;if(!t)throw new Error("userId not found in request params");if(this.pendingUnlockRequestId)this.worker?.postMessage({type:"worker:unlock-credentials",requestId:this.pendingUnlockRequestId,credentials:{method:"passphrase",passphrase:e,userId:t}}),this.pendingUnlockRequestId=null,this.pendingUnlockRequest=null,this.hideModal(),this.hideLoading();else{let s={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:{method:"passphrase",passphrase:e,userId:t}}};this.setupUnlockResponseListener(s),this.worker?.postMessage(s)}}catch(t){console.error("[KMS Client] Passphrase unlock failed:",t),this.hideLoading(),this.showError(`Unlock failed: ${L(t)}`)}}setupUnlockResponseListener(e){let t=s=>{let n=s.data;n.id===e.id&&(this.worker?.removeEventListener("message",t),this.hideModal(),this.sendToParent(n),this.pendingUnlockRequest=null)};this.worker?.addEventListener("message",t)}showError(e){let t=document.getElementById("kms-modal-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideError(){let e=document.getElementById("kms-modal-error");e&&e.classList.add("hidden")}showLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.remove("hidden")}hideLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.add("hidden")}hideModal(){let e=document.getElementById("unlock-modal");e&&e.classList.add("hidden");let t=document.getElementById("kms-passphrase-input");t&&(t.value=""),this.hideLoading(),this.hideError()}async promptUnlockForEnrollment(e,t){this.hideSetupSuccess();let s=document.querySelector("#setup-modal .kms-modal-body");if(s){s.querySelectorAll(".kms-auth-option, .kms-divider").forEach(i=>i.classList.add("hidden"));let a=document.createElement("div");a.id="multi-enrollment-unlock",a.className="multi-enrollment-instructions",a.innerHTML=`
        <p class="multi-enrollment-title">
          🔒 Multi-Enrollment Authentication Required
        </p>
        <p class="multi-enrollment-description">
          You already have an authentication method set up. Please authenticate with your existing method to add a new one.
        </p>
      `,s.insertBefore(a,s.firstChild);let o=e.some(i=>i.includes("passphrase")),u=e.some(i=>i.includes("passkey"));if(o){let i=document.createElement("div");i.className="kms-auth-option",i.id="temp-passphrase-unlock",i.innerHTML=`
          <label for="temp-passphrase-input" class="kms-input-label">Passphrase</label>
          <input
            type="password"
            id="temp-passphrase-input"
            class="kms-input"
            placeholder="Enter your passphrase"
            autocomplete="off"
          />
          <button id="temp-passphrase-btn" class="kms-auth-btn kms-secondary">
            <span class="kms-auth-icon">🔐</span>
            <span class="kms-auth-label">Unlock with Passphrase</span>
          </button>
        `,s.appendChild(i)}if(u){let i=document.createElement("div");i.className="kms-auth-option",i.id="temp-passkey-unlock",i.innerHTML=`
          <button id="temp-passkey-btn" class="kms-auth-btn kms-primary">
            <span class="kms-auth-icon">🔑</span>
            <span class="kms-auth-label">Unlock with Passkey</span>
          </button>
        `,s.appendChild(i)}}return new Promise(n=>{let a=()=>{document.getElementById("multi-enrollment-unlock")?.remove(),document.getElementById("temp-passphrase-unlock")?.remove(),document.getElementById("temp-passkey-unlock")?.remove(),s?.querySelectorAll(".kms-auth-option, .kms-divider")?.forEach(l=>l.classList.remove("hidden"))},o=document.getElementById("temp-passphrase-btn"),u=document.getElementById("temp-passphrase-input");if(o&&u){let d=()=>{let l=u.value;if(!l){this.showSetupError("Please enter your passphrase");return}a(),n({method:"passphrase",passphrase:l,userId:t})};o.onclick=d,u.onkeydown=l=>{l.key==="Enter"&&d()}}let i=document.getElementById("temp-passkey-btn");i&&(i.onclick=async()=>{try{let d=localStorage.getItem("kms:appSalt"),l;d?l=new Uint8Array(d.split(",").map(m=>parseInt(m,10))):l=crypto.getRandomValues(new Uint8Array(32));let c=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:l}}}}});if(!c)throw new Error("No credential returned");let y=N(c)?.results?.first,f=e.some(m=>m.includes("prf")),k=e.some(m=>m.includes("gate")),g;if(f&&y)g={method:"passkey-prf",prfOutput:y,userId:t};else if(k)g={method:"passkey-gate",userId:t};else throw new Error("Unable to determine passkey method");a(),n(g)}catch(d){this.showSetupError(`Passkey unlock failed: ${L(d)}`)}})})}setupSetupModalHandlers(){let e=document.getElementById("kms-setup-webauthn-btn"),t=document.getElementById("kms-setup-passphrase-input"),s=document.getElementById("kms-setup-passphrase-confirm-input"),n=document.getElementById("kms-setup-passphrase-btn"),a=document.getElementById("kms-passphrase-char-count");if(!e||!t||!s||!n){console.error("[KMS Client] Setup modal elements not found");return}e.onclick=()=>this.handleWebAuthnSetup();let o=document.getElementById("kms-passphrase-match-feedback"),u=()=>{let d=t.value,l=s.value;if(o){if(l.length===0){o.classList.add("hidden");return}o.classList.remove("hidden"),d===l?(o.textContent="✓ Passphrases match",o.classList.remove("error"),o.classList.add("success")):(o.textContent="✗ Passphrases do not match",o.classList.remove("success"),o.classList.add("error"))}};t.oninput=()=>{let d=t.value.length,l=12;a&&(a.textContent=`${d} / ${l} characters`,d<l?(a.classList.remove("success"),a.classList.add("error")):(a.classList.remove("error"),a.classList.add("success"))),u()},s.oninput=u,n.onclick=()=>this.handlePassphraseSetup(t.value,s.value);let i=()=>{this.handlePassphraseSetup(t.value,s.value).catch(d=>{console.error("[KMS Client] Passphrase setup failed:",d),this.showSetupError(d instanceof Error?d.message:"Unknown error")})};t.onkeydown=d=>{d.key==="Enter"&&i()},s.onkeydown=d=>{d.key==="Enter"&&i()}}async encryptCredentials(e,t){let s=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),n=S(t),a=await crypto.subtle.importKey("raw",n,{name:"ECDH",namedCurve:"P-256"},!1,[]),o=await crypto.subtle.deriveBits({name:"ECDH",public:a},s.privateKey,256),u=await crypto.subtle.importKey("raw",o,"HKDF",!1,["deriveBits"]),i=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},u,256),d=await crypto.subtle.importKey("raw",i,{name:"AES-GCM",length:256},!1,["encrypt"]),l=crypto.getRandomValues(new Uint8Array(12)),c=new TextEncoder().encode(JSON.stringify(e)),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:l,tagLength:128},d,c),y=await crypto.subtle.exportKey("raw",s.publicKey);return{ephemeralPublicKey:w(y),iv:w(l.buffer),encryptedCredentials:w(p)}}async handleWebAuthnSetup(){this.showSetupLoading(),this.hideSetupError();try{let e="demouser@ats.run",t=window.location.hostname;if(this.isStatelessPopup){let p=S(this.appSalt),y=await navigator.credentials.create({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),rp:{id:t,name:"ATS KMS V2"},user:{id:new TextEncoder().encode(e),name:e,displayName:e},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},extensions:{prf:{eval:{first:p}}}}});if(!y)throw new Error("No credential returned");let f=N(y),k=f?.enabled===!0,g=f?.results?.first,m;if(k)if(g)m="passkey-prf",console.log("[KMS Client] PRF output available from create() (modern platform)");else{console.log("[KMS Client] PRF enabled but no output yet, calling get() (legacy platform)");let A=await navigator.credentials.get({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:p}}}}});g=N(A)?.results?.first,g?(m="passkey-prf",console.log("[KMS Client] PRF output obtained from get()")):(m="passkey-gate",console.warn("[KMS Client] PRF enabled but no output from get(), falling back to gate mode"))}else m="passkey-gate",console.log("[KMS Client] PRF not supported by authenticator, using gate mode");let v={credentialId:w(y.rawId),rpId:t};m==="passkey-prf"&&g&&(v.prfOutput=w(g));let P=await this.encryptCredentials(v,this.transportPublicKey),I=this.credentialPort;I?(console.log("[KMS Client] Sending credentials via MessagePort to iframe"),I.postMessage({type:"popup:credentials",method:m,transportKeyId:this.transportKeyId,userId:e,...P}),this.hideSetupLoading(),this.showSetupSuccess()):window.opener&&(console.log("[KMS Client] Sending credentials via window.opener to parent"),window.opener.postMessage({type:"kms:setup-credentials",method:m,transportKeyId:this.transportKeyId,userId:e,...P},this.parentOrigin),this.hideSetupLoading(),this.showSetupSuccess());return}let s=await this.getEnrollments(e),n=null;s.length>0&&(this.hideSetupLoading(),n=await this.promptUnlockForEnrollment(s,e),this.showSetupLoading());let a=crypto.getRandomValues(new Uint8Array(32)),o=await navigator.credentials.create({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),rp:{id:t,name:"ATS KMS V2"},user:{id:new TextEncoder().encode(e),name:e,displayName:e},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},extensions:{prf:{eval:{first:a}}}}});if(!o)throw new Error("No credential returned");let i=N(o)?.enabled===!0,d;if(i){let p=await navigator.credentials.get({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:a}}}}});d=N(p)?.results?.first}let l;n?l={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:e,method:i&&d?"passkey-prf":"passkey-gate",credentials:n,newCredentials:{credentialId:o.rawId,...d&&{prfOutput:d},rpId:t}}}:l={id:`setup-${Date.now()}`,method:i&&d?"setupPasskeyPRF":"setupPasskeyGate",params:{userId:e,credentialId:o.rawId,...d&&{prfOutput:d},rpId:t}},this.worker?.postMessage(l);let c=await new Promise((p,y)=>{let f=k=>{let g=k.data;if(g.id===l.id)if(this.worker?.removeEventListener("message",f),g.error){let m=typeof g.error=="string"?g.error:g.error.message;y(new Error(m))}else p(g.result)};this.worker?.addEventListener("message",f),setTimeout(()=>{this.worker?.removeEventListener("message",f),y(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),localStorage.setItem("kms:appSalt",Array.from(a).toString()),this.notifySetupComplete({method:d?"passkey-prf":"passkey-gate",result:c})}catch(e){this.hideSetupLoading(),this.showSetupError(`WebAuthn setup failed: ${L(e)}`),console.error("[KMS Client] WebAuthn setup failed:",e)}}async handlePassphraseSetup(e,t){if(!e||e.trim().length===0){this.showSetupError("Please enter a passphrase");return}if(e.length<12){this.showSetupError("Passphrase must be at least 12 characters");return}if(!t||t.trim().length===0){this.showSetupError("Please confirm your passphrase");return}if(e!==t){this.showSetupError("Passphrases do not match");return}this.showSetupLoading(),this.hideSetupError();try{let s="demouser@ats.run";if(console.log("[KMS Client] handlePassphraseSetup - isStatelessPopup:",this.isStatelessPopup,{transportKey:this.transportPublicKey?.slice(0,20)+"...",keyId:this.transportKeyId}),this.isStatelessPopup){console.log("[KMS Client] Entering stateless popup flow for passphrase setup"),console.log("[KMS Client] window.opener check:",{hasOpener:!!window.opener,openerIsWindow:window.opener===window,parentOrigin:this.parentOrigin});let i=await this.encryptCredentials({passphrase:e},this.transportPublicKey);console.log("[KMS Client] Credentials encrypted, preparing to send");let d=this.credentialPort;d?(console.log("[KMS Client] Sending credentials via MessagePort to iframe"),d.postMessage({type:"popup:credentials",method:"passphrase",transportKeyId:this.transportKeyId,userId:s,...i}),this.hideSetupLoading(),this.showSetupSuccess()):window.opener?(console.log("[KMS Client] Sending credentials via window.opener to parent"),window.opener.postMessage({type:"kms:setup-credentials",method:"passphrase",transportKeyId:this.transportKeyId,userId:s,...i},this.parentOrigin),this.hideSetupLoading(),this.showSetupSuccess()):(console.error("[KMS Client] No communication channel available"),this.hideSetupLoading(),this.showSetupError("Communication channel not ready. Please try again."));return}let n=await this.getEnrollments(s),a=null;n.length>0&&(this.hideSetupLoading(),a=await this.promptUnlockForEnrollment(n,s),this.showSetupLoading());let o;a?o={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:s,method:"passphrase",credentials:a,newCredentials:{passphrase:e}}}:o={id:`setup-${Date.now()}`,method:"setupPassphrase",params:{userId:s,passphrase:e}},this.worker?.postMessage(o);let u=await new Promise((i,d)=>{let l=c=>{let p=c.data;if(p.id===o.id)if(this.worker?.removeEventListener("message",l),p.error){let y=typeof p.error=="string"?p.error:p.error.message;d(new Error(y))}else i(p.result)};this.worker?.addEventListener("message",l),setTimeout(()=>{this.worker?.removeEventListener("message",l),d(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),this.notifySetupComplete({method:"passphrase",result:u})}catch(s){this.hideSetupLoading(),this.showSetupError(`Setup failed: ${L(s)}`),console.error("[KMS Client] Passphrase setup failed:",s)}}showSetupError(e){let t=document.getElementById("kms-setup-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideSetupError(){let e=document.getElementById("kms-setup-error");e&&e.classList.add("hidden")}showSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.remove("hidden")}hideSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.add("hidden")}showSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.remove("hidden")}hideSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.add("hidden")}notifySetupComplete(e){let t={type:"kms:setup-complete",method:e.method,result:e.result};window.opener&&window.opener.postMessage(t,this.parentOrigin);try{localStorage.setItem("kms:setup-complete",JSON.stringify({timestamp:Date.now(),...t}))}catch(s){console.warn("[KMS Client] Failed to set localStorage flag:",s)}try{let s=new BroadcastChannel("kms-setup");s.postMessage(t),s.close()}catch(s){console.warn("[KMS Client] BroadcastChannel not available:",s)}}async terminate(){this.worker&&(this.worker.terminate(),this.worker=null),this.isInitialized=!1}async send(e){let{handleMessage:t}=await Promise.resolve().then(()=>(Bt(),Tt));return await t(e)}};if(typeof window<"u"&&typeof document<"u"){let r=new URLSearchParams(window.location.search),e=r.get("parentOrigin")??"https://allthe.services",t=window.self!==window.top,s=r.get("mode")==="setup"||r.has("setup"),n=!t&&(window.opener!==null||s),a=new Be({parentOrigin:e}),o=()=>{if(a.init().catch(u=>{console.error("[KMS Client] Auto-initialization failed:",u)}),n)if(r.has("transportKey")&&r.has("keyId"))setTimeout(()=>{a.setupSetupModalHandlers();let i=document.getElementById("setup-modal");i&&i.classList.remove("hidden")},100);else{console.log("[KMS Client] Popup in KMS-only mode, signaling ready to parent...");let i=r.get("parentOrigin")??"http://localhost:5173";window.opener&&window.opener.postMessage({type:"kms:popup-ready"},i),window.addEventListener("message",d=>{if(d.data?.type==="kms:connect-port"&&d.origin===i){if(console.log("[KMS Client] Popup received kms:connect-port from parent"),!d.ports||!d.ports[0]){console.error("[KMS Client] No MessagePort received with kms:connect-port");return}let c=d.ports[0];c.onmessage=p=>{let y=p.data;y?.type==="kms:connect"&&(console.log("[KMS Client] Popup received kms:connect via MessagePort"),a.transportPublicKey=y.transportKey,a.transportKeyId=y.transportKeyId,a.appSalt=y.appSalt,a.hkdfSalt=y.hkdfSalt,a.isStatelessPopup=!0,a.credentialPort=c,c.postMessage({type:"popup:connected"}),setTimeout(()=>{a.setupSetupModalHandlers();let f=document.getElementById("setup-modal");f&&f.classList.remove("hidden")},100))}}})}};if(document.readyState==="loading"?document.addEventListener("DOMContentLoaded",o):o(),document.readyState==="loading")document.addEventListener("DOMContentLoaded",()=>{let u=document.getElementById("kms-unlock-form"),i=document.getElementById("kms-setup-form");u&&u.addEventListener("submit",d=>(d.preventDefault(),!1)),i&&i.addEventListener("submit",d=>(d.preventDefault(),!1))});else{let u=document.getElementById("kms-unlock-form"),i=document.getElementById("kms-setup-form");u&&u.addEventListener("submit",d=>(d.preventDefault(),!1)),i&&i.addEventListener("submit",d=>(d.preventDefault(),!1))}if(t){try{new BroadcastChannel("kms-setup-credentials").addEventListener("message",d=>{console.log("[KMS Client] Iframe received credentials from popup via BroadcastChannel"),d.data?.type==="kms:setup-credentials"&&window.parent&&(window.parent.postMessage(d.data,e),console.log("[KMS Client] Iframe forwarded credentials to parent"))}),new BroadcastChannel("kms-setup").addEventListener("message",d=>{let l=d.data;l?.type==="kms:setup-complete"&&window.parent&&window.parent.postMessage(l,e)})}catch(u){console.warn("[KMS Client] BroadcastChannel not available for iframe:",u)}window.addEventListener("storage",u=>{if(u.key==="kms:setup-credentials"&&u.newValue)try{console.log("[KMS Client] Iframe received credentials from popup via localStorage");let i=JSON.parse(u.newValue);i?.type==="kms:setup-credentials"&&(window.parent&&(window.parent.postMessage(i,e),console.log("[KMS Client] Iframe forwarded credentials to parent")),localStorage.removeItem("kms:setup-credentials"))}catch(i){console.warn("[KMS Client] Failed to parse setup-credentials from localStorage:",i)}if(u.key==="kms:setup-complete"&&u.newValue)try{let i=JSON.parse(u.newValue);window.parent&&window.parent.postMessage({type:i.type,method:i.method,result:i.result},e),localStorage.removeItem("kms:setup-complete")}catch(i){console.warn("[KMS Client] Failed to parse setup-complete from localStorage:",i)}});try{let u=localStorage.getItem("kms:setup-complete");if(u){let i=JSON.parse(u);i.timestamp&&Date.now()-i.timestamp<5e3&&window.parent&&window.parent.postMessage({type:i.type,method:i.method,result:i.result},e),localStorage.removeItem("kms:setup-complete")}}catch(u){console.warn("[KMS Client] Failed to check localStorage for setup-complete:",u)}}window.__kmsClient=a,window.__kmsContext={isIframe:t,isStandaloneSetup:n}}export{Be as KMSClient};
