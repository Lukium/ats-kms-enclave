var Mt=Object.defineProperty;var D=(n,e)=>()=>(n&&(e=n(n=0)),e);var Vt=(n,e)=>{for(var t in e)Mt(n,t,{get:e[t],enumerable:!0})};function P(n){if(n instanceof Error)return n.message;if(typeof n=="string")return n;if(typeof n=="object"&&n!==null&&"message"in n&&typeof n.message=="string")return n.message;try{return String(n)}catch{return"Unknown error"}}function fe(n,e){return`${n}: ${P(e)}`}var we=D(()=>{"use strict"});function w(n){let e=new Uint8Array(n),t=Array.from(e,s=>String.fromCharCode(s)).join("");return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function W(n){if(n.length!==65||n[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let e=w(n.slice(1,33).buffer),t=w(n.slice(33).buffer);return{kty:"EC",crv:"P-256",x:e,y:t}}async function $(n){let e={crv:n.crv,kty:n.kty,x:n.x,y:n.y},t=JSON.stringify(e),r=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(t));return w(r)}function Te(n){return"{"+Object.keys(n).sort().map(r=>[r,n[r]]).map(([r,s])=>`"${String(r)}":${JSON.stringify(s)}`).join(",")+"}"}function re(n){let e={kmsVersion:n.kmsVersion,method:n.method,algVersion:n.algVersion,purpose:n.purpose};n.credentialId&&(e.credentialId=w(n.credentialId));let t=Te(e);return new TextEncoder().encode(t).buffer}function se(n){let e={kmsVersion:n.kmsVersion,kid:n.kid,alg:n.alg,purpose:n.purpose,createdAt:n.createdAt,keyType:n.keyType},t=Te(e);return new TextEncoder().encode(t).buffer}async function me(n){let e=await crypto.subtle.exportKey("raw",n),t=await crypto.subtle.importKey("raw",e,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),r=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",t,r)}function qe(n,e){return Bt(n,e)}function Bt(n,e){let t=new Uint8Array(n),r=new Uint8Array(e);if(t.length!==r.length)return!1;let s=0;for(let a=0;a<t.length;a++)s|=t[a]^r[a];return s===0}async function J(n){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(n))}async function Oe(n={min:150,max:300,mid:220}){let e=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),t=crypto.getRandomValues(new Uint8Array(16)),r=1e5,s=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:t,iterations:r},e,256);let u=performance.now()-s,o=Math.round(r*n.mid/u);return o=Math.min(Math.max(o,5e4),2e6),{iterations:o,measuredMs:u}}var z=D(()=>{"use strict"});async function ae(){return new Promise((n,e)=>{let t=indexedDB.open(Tt,qt);t.onerror=()=>{e(new Error("Failed to open IndexedDB"))},t.onsuccess=()=>{B=t.result,n()},t.onupgradeneeded=r=>{let s=r.target.result;if(s.objectStoreNames.contains("config")||s.createObjectStore("config",{keyPath:"method"}),!s.objectStoreNames.contains("keys")){let a=s.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!s.objectStoreNames.contains("leases")){let a=s.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!s.objectStoreNames.contains("audit")){let a=s.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}s.objectStoreNames.contains("meta")||s.createObjectStore("meta",{keyPath:"key"})}})}async function H(){if(B||await ae(),!B)throw new Error("Database not initialized");return B}function Fe(){B&&(B.close(),B=null)}async function ie(n,e){let t=await H();return new Promise((r,s)=>{let o=t.transaction(n,"readonly").objectStore(n).get(e);o.onsuccess=()=>{r(o.result)},o.onerror=()=>{s(new Error(`Failed to get from ${n}`))}})}async function j(n,e){let t=await H();return new Promise((r,s)=>{let o=t.transaction(n,"readwrite").objectStore(n).put(e);o.onsuccess=()=>{r()},o.onerror=()=>{s(new Error(`Failed to put to ${n}`))}})}async function he(n,e){let t=await H();return new Promise((r,s)=>{let o=t.transaction(n,"readwrite").objectStore(n).delete(e);o.onsuccess=()=>{r()},o.onerror=()=>{s(new Error(`Failed to delete from ${n}`))}})}async function Ot(n){let e=await H();return new Promise((t,r)=>{let u=e.transaction(n,"readonly").objectStore(n).getAll();u.onsuccess=()=>{t(u.result)},u.onerror=()=>{r(new Error(`Failed to getAll from ${n}`))}})}async function R(n,e,t,r=n.algorithm,s=n.usages,a={alg:"unknown",purpose:"unknown"}){let u=crypto.getRandomValues(new Uint8Array(12)),o=Date.now(),i=se({kmsVersion:2,kid:t,alg:a.alg,purpose:a.purpose,createdAt:o,keyType:Array.isArray(s)?s.join(","):String(s)}),c=n.type==="private"?"pkcs8":"raw",d=await crypto.subtle.exportKey(c,n),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:u,additionalData:i},e,d),p={kid:t,kmsVersion:2,wrappedKey:l,iv:u.buffer.slice(u.byteOffset,u.byteOffset+u.byteLength),aad:i,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:o};await j("keys",p)}async function We(n,e,t,r=[]){let s=await ie("keys",n);if(!s)throw new Error(`No wrapped key with id: ${n}`);let a=new Uint8Array(s.iv),u=s.aad,o=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:u},e,s.wrappedKey),i=typeof t=="string"?t:t.name,d=i==="ECDSA"||i==="ECDH"||i==="Ed25519"||i.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(d,o,t,!1,r)}async function L(n){return await ie("keys",n)??null}async function S(){return Ot("keys")}async function $e(n){await he("keys",n)}async function b(n){let e=await ie("meta",n);return e?e.value:null}async function x(n,e){await j("meta",{key:n,value:e})}async function He(n){await he("meta",n)}async function je(n){await j("audit",n)}async function G(){let n=await H();return new Promise((e,t)=>{let u=n.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();u.onsuccess=()=>{e(u.result)},u.onerror=()=>{t(new Error("Failed to get audit entries"))}})}async function Ge(){let n=await G();return n.length>0?n[n.length-1]:null}async function ge(n){await j("leases",n)}async function Q(n){return await ie("leases",n)??null}async function ke(n){let e=await H();return new Promise((t,r)=>{let o=e.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(n);o.onsuccess=()=>{t(o.result)},o.onerror=()=>{r(new Error("Failed to get user leases"))}})}async function Y(n){await he("leases",n)}async function Ne(n){let t=(await S()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");let s={...r,subscription:n};await j("keys",s)}async function _e(){let e=(await S()).filter(a=>a.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");let{subscription:r,...s}=t;await j("keys",s)}async function ve(){let e=(await S()).filter(r=>r.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return t.subscription??null}var Tt,qt,B,oe=D(()=>{"use strict";z();Tt="kms-v2",qt=1,B=null});function be(){let n=new Uint8Array(32);return crypto.getRandomValues(n),n}async function Ae(n,e,t){let r=t??be(),{iterations:s}=await Oe(),a=crypto.getRandomValues(new Uint8Array(16)),u=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:s},u,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),i=await me(o),c=crypto.getRandomValues(new Uint8Array(12)),d=re({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,additionalData:d},o,r),p={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:s,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:i,encryptedMS:l,msIV:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),msAAD:d,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await x(ue(n),p),{success:!0,ms:r}}async function Ee(n,e,t,r,s=""){let a=r??be(),u=await J("ATS/KMS/KEK-wrap/salt/v2"),o=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),i=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),c=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:u,info:o},i,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),d=crypto.getRandomValues(new Uint8Array(12)),l=re({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:e,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:l},c,a),y=Date.now(),f=crypto.getRandomValues(new Uint8Array(32)),v={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:e,rpId:s,kdf:{algorithm:"HKDF-SHA256",appSalt:f.buffer.slice(f.byteOffset,f.byteOffset+f.byteLength),hkdfSalt:u,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:p,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await x(de(n),v),{success:!0,ms:a}}async function Ke(n,e,t,r=""){let s=t??be(),a=crypto.getRandomValues(new Uint8Array(32)),u=await J("ATS/KMS/KEK-gate/salt/v2"),o=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),i=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),c=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:u,info:o},i,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),d=crypto.getRandomValues(new Uint8Array(12)),l=re({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:e,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:l},c,s),y=Date.now(),f={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:e,rpId:r,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:p,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await x(ce(n),f),{success:!0,ms:s}}async function Ie(n,e){let t=await b(ue(n));if(!t)return{success:!1,error:"Passphrase not set up"};let r=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),s=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:t.kdf.salt,iterations:t.kdf.iterations},r,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await me(s);if(!qe(a,t.kcv))return{success:!1,error:"Invalid passphrase"};try{let u=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},s,t.encryptedMS);return{success:!0,ms:new Uint8Array(u)}}catch{return{success:!1,error:"Decryption failed"}}}async function Pe(n,e){let t=await b(de(n));if(!t)return{success:!1,error:"Passkey not set up"};let r=t.kdf.hkdfSalt,s=new TextEncoder().encode(t.kdf.info),a=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:r,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},u,t.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Se(n){let e=await b(ce(n));if(!e)return{success:!1,error:"Passkey gate not set up"};let t=new Uint8Array(e.pepperWrapped),r=await J("ATS/KMS/KEK-gate/salt/v2"),s=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:r,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:e.msIV,additionalData:e.msAAD},u,e.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Je(n){let e=await b(ue(n)),t=await b(de(n)),r=await b(ce(n));return!!(e||t||r)}async function xe(n){return!!await b(ue(n))}async function Ce(n){let e=await b(de(n)),t=await b(ce(n));return!!(e||t)}async function X(n){let e=await J("ATS/KMS/MKEK/salt/v2"),t=new TextEncoder().encode("ATS/KMS/MKEK/v2"),r=await crypto.subtle.importKey("raw",n,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:t},r,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function M(n,e){let t=Date.now(),r=null;try{let s;switch(n.method){case"passphrase":s=await Ie(n.userId,n.passphrase);break;case"passkey-prf":s=await Pe(n.userId,n.prfOutput);break;case"passkey-gate":s=await Se(n.userId);break;default:throw new Error("Unknown credential method")}if(!s.success)throw new Error(s.error??"Unlock failed");r=s.ms;let a=await X(r),u=await e(a,r),o=Date.now();return{result:u,unlockTime:t,lockTime:o,duration:o-t}}finally{r&&r.fill(0)}}var ue,de,ce,ze=D(()=>{"use strict";z();oe();ue=n=>`enrollment:passphrase:v2:${n}`,de=n=>`enrollment:passkey-prf:v2:${n}`,ce=n=>`enrollment:passkey-gate:v2:${n}`});async function Qe(){}async function le(){let n=await b("LRK");return n||(n=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await x("LRK",n)),n}async function Z(n){let e=await crypto.subtle.digest("SHA-256",n);return w(e)}async function C(n){let e=await L("audit-user");if(e&&e.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,n,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),u=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),o=await Z(e.publicKeyRaw);K={type:"UAK",keyPair:{privateKey:a,publicKey:u},keyId:o};return}let t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),r=await crypto.subtle.exportKey("raw",t.publicKey);await R(t.privateKey,n,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:r});let s=await Z(r);K={type:"UAK",keyPair:t,keyId:s}}async function Ye(n,e){if(!K||K.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let t=Date.now(),r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",r.publicKey),a=w(s),u={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:n,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:t,notAfter:e,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},o=JSON.stringify(u,Object.keys(u).sort()),i=await crypto.subtle.sign("Ed25519",K.keyPair.privateKey,new TextEncoder().encode(o)),c={...u,sig:w(i)},d=await le(),l=se({kmsVersion:2,kid:`lak-${n}`,alg:"EdDSA",purpose:"lak",createdAt:t,keyType:"lease-audit-key"}),p=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",r.privateKey,d,{name:"AES-GCM",iv:p,additionalData:l});return await x(`lease-audit-key:${n}`,{leaseId:n,wrappedKey:y,iv:p,aad:l,publicKeyRaw:s,delegationCert:c,expiresAt:e,createdAt:t}),{lakKeyPair:r,delegationCert:c}}async function Xe(n,e){let t=await b(`lease-audit-key:${n}`);if(!t)throw new Error(`LAK not found for lease: ${n}`);let r=await le(),s=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,r,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),u=await Z(t.publicKeyRaw);K={type:"LAK",keyPair:{privateKey:s,publicKey:a},keyId:u,cert:e}}async function Ze(){let n=await L("audit-instance");if(n&&n.publicKeyRaw){let i=await le(),c=await crypto.subtle.unwrapKey("pkcs8",n.wrappedKey,i,{name:"AES-GCM",iv:n.iv,additionalData:n.aad},{name:"Ed25519"},!1,["sign"]),d=await crypto.subtle.importKey("raw",n.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),l=await Z(n.publicKeyRaw);K={type:"KIAK",keyPair:{privateKey:c,publicKey:d},keyId:l};return}let e=await le(),t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),r=await crypto.subtle.exportKey("raw",t.publicKey);await R(t.privateKey,e,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:r});let s=await L("audit-instance");if(!s)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",s.wrappedKey,e,{name:"AES-GCM",iv:s.iv,additionalData:s.aad},{name:"Ed25519"},!1,["sign"]),u=await crypto.subtle.importKey("raw",r,{name:"Ed25519"},!1,["verify"]),o=await Z(r);K={type:"KIAK",keyPair:{privateKey:a,publicKey:u},keyId:o}}async function I(n){let e,t,r=new Promise((s,a)=>{e=s,t=a});return Re=Re.then(async()=>{try{if(!K)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let s=Date.now(),a=await Ge(),u=a?a.chainHash:"",i={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:s,op:n.op,kid:n.kid,requestId:n.requestId,userId:n.userId,origin:n.origin,leaseId:n.leaseId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:n.details,previousHash:u,signer:K.type,signerId:K.keyId},c=JSON.stringify(i),d=new TextEncoder().encode(u+c),l=await crypto.subtle.digest("SHA-256",d),p=w(l),y=new TextEncoder().encode(p),f=await crypto.subtle.sign("Ed25519",K.keyPair.privateKey,y),v=w(f),m={kmsVersion:i.kmsVersion,seqNum:i.seqNum,timestamp:i.timestamp,op:i.op,kid:i.kid,requestId:i.requestId,userId:i.userId,...i.origin!==void 0&&{origin:i.origin},...i.leaseId!==void 0&&{leaseId:i.leaseId},...i.unlockTime!==void 0&&{unlockTime:i.unlockTime},...i.lockTime!==void 0&&{lockTime:i.lockTime},...i.duration!==void 0&&{duration:i.duration},...i.details!==void 0&&{details:i.details},previousHash:i.previousHash,chainHash:p,signer:i.signer,signerId:i.signerId,...K.cert!==void 0&&{cert:K.cert},sig:v};await je(m),e(m)}catch(s){t(s)}}).catch(()=>{}),r}async function et(){let n=await G(),e=[],t=0;for(let r of n){let s={kmsVersion:r.kmsVersion,seqNum:r.seqNum,timestamp:r.timestamp,op:r.op,kid:r.kid,requestId:r.requestId,userId:r.userId,origin:r.origin,leaseId:r.leaseId,unlockTime:r.unlockTime,lockTime:r.lockTime,duration:r.duration,details:r.details,previousHash:r.previousHash,signer:r.signer,signerId:r.signerId},a=JSON.stringify(s),u=new TextEncoder().encode(r.previousHash+a),o=await crypto.subtle.digest("SHA-256",u);w(o)!==r.chainHash&&e.push(`Chain hash mismatch at seq ${r.seqNum}`),t+=1}return{valid:e.length===0,verified:t,errors:e}}async function tt(){let n=await L("audit-user");if(!n||!n.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:w(n.publicKeyRaw)}}function nt(){K=null,Re=Promise.resolve()}var Re,K,rt=D(()=>{"use strict";oe();z();Re=Promise.resolve(),K=null});function A(n,e){if(typeof e!="object"||e===null)throw new k(n,"params","object",e);return e}function h(n,e,t){if(typeof t!="string")throw new k(n,e,"string",t);return t}function T(n,e,t){if(t!==void 0)return h(n,e,t)}function pe(n,e,t){if(typeof t!="number")throw new k(n,e,"number",t);return t}function Ft(n,e,t){if(typeof t!="boolean")throw new k(n,e,"boolean",t);return t}function st(n,e,t){if(t!==void 0)return Ft(n,e,t)}function De(n,e,t){if(t instanceof ArrayBuffer)return t;if(t instanceof Uint8Array){let r=new ArrayBuffer(t.byteLength);return new Uint8Array(r).set(t),r}throw new k(n,e,"ArrayBuffer or Uint8Array",t)}function Le(n,e,t){if(t!==void 0){if(t instanceof Uint8Array)return t;if(t instanceof ArrayBuffer)return new Uint8Array(t);throw new k(n,e,"ArrayBuffer or Uint8Array",t)}}function q(n,e){if(typeof e!="object"||e===null)throw new k(n,"credentials","AuthCredentials object",e);let t=e;if(typeof t.method!="string")throw new k(n,"credentials.method","string",t.method);if(typeof t.userId!="string")throw new k(n,"credentials.userId","string",t.userId);switch(t.method){case"passphrase":if(typeof t.passphrase!="string")throw new k(n,"credentials.passphrase","string",t.passphrase);return{method:"passphrase",passphrase:t.passphrase,userId:t.userId};case"passkey-prf":if(!(t.prfOutput instanceof ArrayBuffer))throw new k(n,"credentials.prfOutput","ArrayBuffer",t.prfOutput);return{method:"passkey-prf",prfOutput:t.prfOutput,userId:t.userId};case"passkey-gate":return{method:"passkey-gate",userId:t.userId};default:throw new k(n,"credentials.method","passphrase | passkey-prf | passkey-gate",t.method)}}function Wt(n,e){if(typeof e!="object"||e===null)throw new k(n,"payload","VAPIDPayload object",e);let t=e;return{aud:h(n,"payload.aud",t.aud),sub:h(n,"payload.sub",t.sub),exp:pe(n,"payload.exp",t.exp),jti:h(n,"payload.jti",t.jti)}}function at(n){let e=A("setupPassphrase",n),t=Le("setupPassphrase","existingMS",e.existingMS);return{userId:h("setupPassphrase","userId",e.userId),passphrase:h("setupPassphrase","passphrase",e.passphrase),...t!==void 0&&{existingMS:t}}}function it(n){let e=A("setupPasskeyPRF",n);if(!e.credentialId)throw new Error("credentialId required");let t=T("setupPasskeyPRF","rpId",e.rpId),r=Le("setupPasskeyPRF","existingMS",e.existingMS);return{userId:h("setupPasskeyPRF","userId",e.userId),credentialId:De("setupPasskeyPRF","credentialId",e.credentialId),prfOutput:De("setupPasskeyPRF","prfOutput",e.prfOutput),...t!==void 0&&{rpId:t},...r!==void 0&&{existingMS:r}}}function ot(n){let e=A("setupPasskeyGate",n),t=T("setupPasskeyGate","rpId",e.rpId),r=Le("setupPasskeyGate","existingMS",e.existingMS);return{userId:h("setupPasskeyGate","userId",e.userId),credentialId:De("setupPasskeyGate","credentialId",e.credentialId),...t!==void 0&&{rpId:t},...r!==void 0&&{existingMS:r}}}function ut(n){let e=A("addEnrollment",n),t=h("addEnrollment","method",e.method);if(t!=="passphrase"&&t!=="passkey-prf"&&t!=="passkey-gate")throw new k("addEnrollment","method","passphrase | passkey-prf | passkey-gate",t);return{userId:h("addEnrollment","userId",e.userId),method:t,credentials:q("addEnrollment",e.credentials),newCredentials:e.newCredentials}}function dt(n){let e=A("generateVAPID",n);return{credentials:q("generateVAPID",e.credentials)}}function ct(n){let e=A("regenerateVAPID",n);return{credentials:q("regenerateVAPID",e.credentials)}}function lt(n){let e=A("signJWT",n);return{kid:h("signJWT","kid",e.kid),payload:Wt("signJWT",e.payload),credentials:q("signJWT",e.credentials)}}function pt(n){let e=A("createLease",n),t={userId:h("createLease","userId",e.userId),ttlHours:pe("createLease","ttlHours",e.ttlHours),credentials:q("createLease",e.credentials)},r=st("createLease","autoExtend",e.autoExtend);return r!==void 0&&(t.autoExtend=r),t}function yt(n){let e=A("extendLeases",n);if(!Array.isArray(e.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof e.leaseIds}`);if(e.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let r={leaseIds:e.leaseIds.map((a,u)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${u} - expected non-empty string`);return a}),userId:h("extendLeases","userId",e.userId)},s=st("extendLeases","requestAuth",e.requestAuth);return s!==void 0&&(r.requestAuth=s),e.credentials!==void 0&&(r.credentials=q("extendLeases",e.credentials)),r}function ft(n){let e=A("issueVAPIDJWT",n),t=T("issueVAPIDJWT","kid",e.kid),r=T("issueVAPIDJWT","jti",e.jti),s=e.exp!==void 0?pe("issueVAPIDJWT","exp",e.exp):void 0;return{leaseId:h("issueVAPIDJWT","leaseId",e.leaseId),...t!==void 0&&{kid:t},...r!==void 0&&{jti:r},...s!==void 0&&{exp:s}}}function wt(n){let e=A("issueVAPIDJWTs",n),t=T("issueVAPIDJWTs","kid",e.kid);return{leaseId:h("issueVAPIDJWTs","leaseId",e.leaseId),count:pe("issueVAPIDJWTs","count",e.count),...t!==void 0&&{kid:t}}}function mt(n){if(n==null)return{};let e=A("isSetup",n),t=T("isSetup","userId",e.userId);return t!==void 0?{userId:t}:{}}function ht(n){if(n==null)return{};let e=A("getEnrollments",n),t=T("getEnrollments","userId",e.userId);return t!==void 0?{userId:t}:{}}function gt(n){let e=A("getPublicKey",n);return{kid:h("getPublicKey","kid",e.kid)}}function kt(n){let e=A("getUserLeases",n);return{userId:h("getUserLeases","userId",e.userId)}}function vt(n){let e=A("verifyLease",n),t={leaseId:h("verifyLease","leaseId",e.leaseId)};if("deleteIfInvalid"in e){if(typeof e.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");t.deleteIfInvalid=e.deleteIfInvalid}return t}function bt(n){let e=A("removeEnrollment",n);return{enrollmentId:h("removeEnrollment","enrollmentId",e.enrollmentId),credentials:q("removeEnrollment",e.credentials)}}function Ht(n,e){if(typeof e!="object"||e===null)throw new k(n,"subscription","object",e);let t=e,r=h(n,"subscription.endpoint",t.endpoint);if(!r.startsWith("https://"))throw new Error(`${n}: subscription.endpoint must use HTTPS`);let s;try{s=new URL(r)}catch{throw new Error(`${n}: subscription.endpoint is not a valid URL`)}if(!$t.some(p=>s.hostname===p||s.hostname.endsWith(`.${p}`)))throw new Error(`${n}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${s.hostname}`);let u=t.expirationTime;if(u!==null&&typeof u!="number")throw new k(n,"subscription.expirationTime","number or null",u);if(typeof t.keys!="object"||t.keys===null)throw new k(n,"subscription.keys","object",t.keys);let o=t.keys,i=h(n,"subscription.keys.p256dh",o.p256dh),c=h(n,"subscription.keys.auth",o.auth);if(i.length===0)throw new Error(`${n}: subscription.keys.p256dh must be non-empty`);if(c.length===0)throw new Error(`${n}: subscription.keys.auth must be non-empty`);let d=h(n,"subscription.eid",t.eid);if(d.length===0)throw new Error(`${n}: subscription.eid must be non-empty`);let l=t.createdAt;if(typeof l!="number")throw new k(n,"subscription.createdAt","number",l);return{endpoint:r,expirationTime:u,keys:{p256dh:i,auth:c},eid:d,createdAt:l}}function At(n){let e=A("setPushSubscription",n);return{subscription:Ht("setPushSubscription",e.subscription)}}var k,$t,Et=D(()=>{"use strict";k=class extends Error{constructor(t,r,s,a){super(`RPC ${t}: Invalid ${r} - expected ${s}, got ${typeof a}`);this.method=t;this.param=r;this.expected=s;this.received=a;this.name="RPCValidationError"}};$t=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"]});function Gt(n){if(typeof n!="object"||n===null)return!1;let e=n;return typeof e.tokensIssued=="number"&&typeof e.lastResetAt=="number"}function Kt(n){return Gt(n)?n:{tokensIssued:0,lastResetAt:Date.now()}}var It=D(()=>{"use strict"});var xt={};Vt(xt,{handleMessage:()=>Pt});async function Nt(n,e){let t=await crypto.subtle.importKey("raw",n,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},t,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function Pt(n){let{id:e,method:t,params:r}=n;try{let s;switch(t){case"setupPassphrase":s=await _t(at(r),e);break;case"setupPasskeyPRF":s=await Jt(it(r),e);break;case"setupPasskeyGate":s=await zt(ot(r),e);break;case"addEnrollment":s=await Qt(ut(r),e);break;case"generateVAPID":s=await Yt(dt(r),e);break;case"regenerateVAPID":s=await Xt(ct(r),e);break;case"signJWT":s=await Zt(lt(r),e);break;case"createLease":s=await en(pt(r),e);break;case"extendLeases":s=await tn(yt(r),e);break;case"issueVAPIDJWT":s=await St(ft(r),e);break;case"issueVAPIDJWTs":s=await nn(wt(r),e);break;case"isSetup":s=await rn(mt(r));break;case"getEnrollments":s=await sn(ht(r));break;case"verifyAuditChain":s=await an();break;case"getAuditLog":s=await on();break;case"getPublicKey":s=await un(gt(r));break;case"getAuditPublicKey":s=await dn();break;case"getUserLeases":s=await cn(kt(r));break;case"verifyLease":s=await ln(vt(r));break;case"getVAPIDKid":s=await pn();break;case"resetKMS":s=await mn();break;case"removeEnrollment":s=await hn(bt(r),e);break;case"setPushSubscription":s=await yn(At(r));break;case"removePushSubscription":s=await fn();break;case"getPushSubscription":s=await wn();break;default:throw new Error(`Unknown RPC method: ${t}`)}return{id:e,result:s}}catch(s){return{id:e,error:P(s)}}}async function _t(n,e){let{userId:t,passphrase:r,existingMS:s}=n;if(!r||r.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await Ae(t,r,s);if(!a.success)throw new Error(a.error);let u=await X(a.ms);await C(u);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let i=o,c=await crypto.subtle.exportKey("raw",i.publicKey),d=W(new Uint8Array(c)),l=await $(d);return await R(i.privateKey,u,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),a.ms.fill(0),await I({op:"setup-passphrase",kid:"",requestId:e,userId:t,details:{method:"passphrase",vapidKid:l}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:w(c),vapidKid:l}}async function Jt(n,e){let{userId:t,credentialId:r,prfOutput:s,rpId:a="",existingMS:u}=n;if(!r||r.byteLength===0)throw new Error("credentialId required");if(!s||s.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let o=await Ee(t,r,s,u,a);if(!o.success)throw new Error(o.error);let i=await X(o.ms);await C(i);let c=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in c)||!("publicKey"in c))throw new Error("Failed to generate ECDSA keypair");let d=c,l=await crypto.subtle.exportKey("raw",d.publicKey),p=W(new Uint8Array(l)),y=await $(p);return await R(d.privateKey,i,y,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:l}),o.ms.fill(0),await I({op:"setup-passkey-prf",kid:"",requestId:e,userId:t,details:{method:"passkey-prf",credentialId:w(r),vapidKid:y}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:w(l),vapidKid:y}}async function zt(n,e){let{userId:t,credentialId:r,rpId:s="",existingMS:a}=n;if(!r||r.byteLength===0)throw new Error("credentialId required");let u=await Ke(t,r,a,s);if(!u.success)throw new Error(u.error);let o=await X(u.ms);await C(o);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let c=i,d=await crypto.subtle.exportKey("raw",c.publicKey),l=W(new Uint8Array(d)),p=await $(l);return await R(c.privateKey,o,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),u.ms.fill(0),await I({op:"setup-passkey-gate",kid:"",requestId:e,userId:t,details:{method:"passkey-gate",credentialId:w(r),vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:w(d),vapidKid:p}}async function Qt(n,e){let{userId:t,method:r,credentials:s,newCredentials:a}=n;function u(d,l){if(typeof l!="object"||l===null)throw new Error(`newCredentials must be an object for ${d}`);return l}let o=u(r,a);await M(s,async(d,l)=>(await C(d),!0));let i;if(s.method==="passphrase"){let d=await Ie(t,s.passphrase);if(!d.success)throw new Error(d.error);i=d.ms}else if(s.method==="passkey-prf"){let d=await Pe(t,s.prfOutput);if(!d.success)throw new Error(d.error);i=d.ms}else if(s.method==="passkey-gate"){let d=await Se(t);if(!d.success)throw new Error(d.error);i=d.ms}else throw new Error("Invalid credentials method");let c;if(r==="passphrase"){if(typeof o.passphrase!="string")throw new Error("passphrase must be a string");c=await Ae(t,o.passphrase,i)}else if(r==="passkey-prf"){if(!(o.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");if(!(o.prfOutput instanceof ArrayBuffer))throw new Error("prfOutput must be an ArrayBuffer");let d=typeof o.rpId=="string"?o.rpId:"";c=await Ee(t,o.credentialId,o.prfOutput,i,d)}else if(r==="passkey-gate"){if(!(o.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");let d=typeof o.rpId=="string"?o.rpId:"";c=await Ke(t,o.credentialId,i,d)}else{let d=r;throw new Error(`Unknown enrollment method: ${String(d)}`)}if(i.fill(0),!c.success)throw new Error(c.error);return await I({op:"add-enrollment",kid:"",requestId:e,userId:s.userId,details:{method:r,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${r}:v2`}}async function Yt(n,e){let{credentials:t}=n,r=await M(t,async(s,a)=>{await C(s);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let o=u,i=await crypto.subtle.exportKey("raw",o.publicKey),c=W(new Uint8Array(i)),d=await $(c);return await R(o.privateKey,s,d,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:i}),{kid:d,publicKey:w(i)}});return await I({op:"generate",kid:r.result.kid,requestId:e,userId:t.userId,unlockTime:r.unlockTime,lockTime:r.lockTime,duration:r.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),r.result}async function Xt(n,e){let{credentials:t}=n,r=await M(t,async(s,a)=>{await C(s);let o=(await S()).filter(y=>y.purpose==="vapid");for(let y of o)await $e(y.kid);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let c=i,d=await crypto.subtle.exportKey("raw",c.publicKey),l=W(new Uint8Array(d)),p=await $(l);return await R(c.privateKey,s,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),{kid:p,publicKey:w(d),oldKids:o.map(y=>y.kid)}});return await I({op:"regenerate-vapid",kid:r.result.kid,requestId:e,userId:t.userId,unlockTime:r.unlockTime,lockTime:r.lockTime,duration:r.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:r.result.oldKids,deletedCount:r.result.oldKids.length}}),{kid:r.result.kid,publicKey:r.result.publicKey}}async function Zt(n,e){let{kid:t,payload:r,credentials:s}=n;if(!r.aud||!r.sub||!r.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(r.exp<=a)throw new Error("JWT exp must be in the future");if(r.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let u=await M(s,async(o,i)=>{await C(o);let c=await We(t,o,{name:"ECDSA",namedCurve:"P-256"},["sign"]),d={typ:"JWT",alg:"ES256",kid:t},l=w(new TextEncoder().encode(JSON.stringify(d)).buffer),p=w(new TextEncoder().encode(JSON.stringify(r)).buffer),y=new TextEncoder().encode(`${l}.${p}`),f=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},c,y),v=w(f);return{jwt:`${l}.${p}.${v}`}});return await I({op:"sign",kid:t,requestId:e,userId:s.userId,unlockTime:u.unlockTime,lockTime:u.lockTime,duration:u.duration,details:{algorithm:"ES256",aud:r.aud,exp:r.exp,jti:r.jti}}),u.result}async function en(n,e){let{userId:t,ttlHours:r,credentials:s,autoExtend:a}=n;if(r<=0||r>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let o=(await S()).filter(g=>g.purpose==="vapid");if(o.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");o.sort((g,E)=>E.createdAt-g.createdAt);let i=o[0];if(!i)throw new Error("VAPID key record not found after filtering");let c=i.kid,d=`lease-${crypto.randomUUID()}`,l=crypto.getRandomValues(new Uint8Array(32)),p=Date.now(),y=p+r*3600*1e3,f=await M(s,async(g,E)=>{await C(g);let{delegationCert:V}=await Ye(d,y),O=await Nt(E,l),F=await L(c);if(!F)throw new Error(`No wrapped key with id: ${c}`);let ee=new Uint8Array(F.iv),te=F.aad,ye=await crypto.subtle.unwrapKey("pkcs8",F.wrappedKey,g,{name:"AES-GCM",iv:ee,additionalData:te},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),ne=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",ye,O,{name:"AES-GCM",iv:ne}),iv:ne,sessionKEK:O,lakDelegationCert:V}});await x(`sessionkek:${d}`,f.result.sessionKEK),Me.set(d,f.result.sessionKEK);let v={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},m={leaseId:d,userId:t,ttlHours:r,createdAt:p,exp:y,autoExtend:a??!0,quotas:v,wrappedLeaseKey:f.result.wrappedLeaseKey,wrappedLeaseKeyIV:f.result.iv.buffer.slice(f.result.iv.byteOffset,f.result.iv.byteOffset+f.result.iv.byteLength),leaseSalt:l.buffer.slice(l.byteOffset,l.byteOffset+l.byteLength),kid:c,lakDelegationCert:f.result.lakDelegationCert};return await ge(m),await x(`quota:${d}`,{leaseId:d,tokensIssued:0,lastResetAt:p,perEndpoint:{}}),await I({op:"create-lease",kid:c,requestId:e,userId:t,details:{action:"create-lease",leaseId:d,userId:t,ttlHours:r,autoExtend:m.autoExtend}}),{leaseId:d,exp:y,quotas:v,autoExtend:m.autoExtend??!0}}async function tn(n,e){let{leaseIds:t,credentials:r,requestAuth:s}=n,a=[],u=0,o=0,i=0,c=!1;if(r)try{await M(r,async(d,l)=>(c=!0,Promise.resolve()))}catch(d){for(let l of t){let p=await Q(l);p&&p.autoExtend===!1&&(a.push({leaseId:l,status:"skipped",reason:`Authentication failed: ${P(d)}`}),o++)}if(o===t.length)return{results:a,extended:u,skipped:o,failed:i}}for(let d of t)try{let l=await Q(d);if(!l){a.push({leaseId:d,status:"skipped",reason:`Lease not found: ${d}`}),o++;continue}if(l.autoExtend===!1&&!s){a.push({leaseId:d,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),o++;continue}if(l.autoExtend===!1&&s&&!c){a.push({leaseId:d,status:"skipped",reason:"Authentication required but credentials not valid"}),o++;continue}let y=(await S()).filter(V=>V.purpose==="vapid");if(y.length===0){a.push({leaseId:d,status:"skipped",reason:"No VAPID key found"}),o++;continue}y.sort((V,O)=>O.createdAt-V.createdAt);let v=y[0].kid;if(l.kid!==v){a.push({leaseId:d,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${l.kid}, current kid: ${v})`}),o++;continue}let m=Date.now(),g=m+30*24*60*60*1e3,E={...l,exp:g,createdAt:m};await ge(E),await I({op:"extend-lease",kid:E.kid,requestId:e,userId:E.userId,details:{action:"extend-lease",leaseId:E.leaseId,userId:E.userId,newExp:g,autoExtend:E.autoExtend}}),a.push({leaseId:d,status:"extended",result:{leaseId:E.leaseId,exp:E.exp,iat:E.createdAt,kid:E.kid,autoExtend:E.autoExtend??!1}}),u++}catch(l){a.push({leaseId:d,status:"skipped",reason:`Error extending lease: ${P(l)}`}),i++}return{results:a,extended:u,skipped:o,failed:i}}async function St(n,e){let{leaseId:t}=n,{kid:r}=n;if(!r){let N=(await S()).filter(Lt=>Lt.purpose==="vapid");if(N.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(N.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let Be=N[0];if(!Be)throw new Error("No VAPID key found after filtering");r=Be.kid}let s=await Q(t);if(!s)throw new Error(`Lease not found: ${t}`);if(Date.now()>=s.exp)throw new Error("Lease expired");let u=(await S()).filter(U=>U.purpose==="vapid");if(u.length===0)throw new Error("No VAPID key available");u.sort((U,N)=>N.createdAt-U.createdAt);let o=u[0]?.kid;if(!o)throw new Error("Failed to determine current VAPID key");if(s.kid!==o)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await Xe(t,s.lakDelegationCert);let i=await ve();if(!i)throw new Error("No push subscription found. Call setPushSubscription() first.");let c=await b(`quota:${t}`),d=Kt(c),l=Date.now()-3600*1e3;if(d.lastResetAt<l&&(d.tokensIssued=0,d.lastResetAt=Date.now()),d.tokensIssued>=s.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");d.tokensIssued++,await x(`quota:${t}`,d);let p=n.jti??crypto.randomUUID(),y=n.exp??Math.floor(Date.now()/1e3)+900,f=new URL(i.endpoint),v=`${f.protocol}//${f.host}`,m={aud:v,sub:"mailto:kms@example.com",exp:y,jti:p,uid:s.userId,eid:i.eid},g=Me.get(t);if(!g){let U=await b(`sessionkek:${t}`);if(!U)throw new Error(`SessionKEK not found for lease: ${t}`);g=U,Me.set(t,g)}let E=s.wrappedLeaseKey,V=new Uint8Array(s.wrappedLeaseKeyIV),O=await crypto.subtle.unwrapKey("pkcs8",E,g,{name:"AES-GCM",iv:V},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),F={typ:"JWT",alg:"ES256",kid:s.kid},ee=w(new TextEncoder().encode(JSON.stringify(F)).buffer),te=w(new TextEncoder().encode(JSON.stringify(m)).buffer),ye=new TextEncoder().encode(`${ee}.${te}`),ne=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},O,ye),Ue=w(ne),Rt=`${ee}.${te}.${Ue}`,Dt=await I({op:"sign",kid:s.kid,requestId:e,userId:s.userId,leaseId:t,details:{action:"issue-lease-jwt",jti:p,aud:v,eid:i.eid}});return{jwt:Rt,jti:p,exp:y,auditEntry:Dt}}async function nn(n,e){let{leaseId:t,count:r,kid:s}=n;if(!Number.isInteger(r)||r<1||r>10)throw new Error("count must be an integer between 1 and 10");let a=900,u=Math.floor(a*.6),o=Math.floor(Date.now()/1e3),i=[];for(let c=0;c<r;c++){let d=crypto.randomUUID(),l=o+a+c*u,p=await St({leaseId:t,...s!==void 0&&{kid:s},jti:d,exp:l},`${e}-${c}`);i.push(p)}return i}async function rn(n){let e=n?.userId??"default",t=await Je(e),r=[];await xe(e)&&r.push("passphrase"),await Ce(e)&&r.push("passkey");let s;return t&&n?.userId&&(s=await ke(n.userId)),{isSetup:t,methods:r,...s!==void 0&&{leases:s}}}async function sn(n){let e=n?.userId??"default",t=[];if(await xe(e)&&t.push("enrollment:passphrase:v2"),await Ce(e)){let r=await b(`enrollment:passkey-prf:v2:${e}`),s=await b(`enrollment:passkey-gate:v2:${e}`);r&&t.push("enrollment:passkey-prf:v2"),s&&t.push("enrollment:passkey-gate:v2")}return{enrollments:t}}async function an(){return await et()}async function on(){return{entries:await G()}}async function un(n){let{kid:e}=n,t=await L(e);if(!t||!t.publicKeyRaw)throw new Error(`Public key not found for kid: ${e}`);return{publicKey:w(t.publicKeyRaw)}}async function dn(){return await tt()}async function cn(n){let{userId:e}=n;return{leases:await ke(e)}}async function ln(n){let{leaseId:e,deleteIfInvalid:t=!1}=n,r=await Q(e);if(!r)return{leaseId:e,valid:!1,reason:"not-found",kid:""};if(Date.now()>=r.exp)return t&&await Y(e),{leaseId:e,valid:!1,reason:"expired",kid:r.kid};let a=(await S()).filter(i=>i.purpose==="vapid");if(a.length===0)return t&&await Y(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:r.kid};a.sort((i,c)=>c.createdAt-i.createdAt);let u=a[0];if(!u)return t&&await Y(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:r.kid};let o=u.kid;return r.kid!==o?(t&&await Y(e),{leaseId:e,valid:!1,reason:"wrong-key",kid:r.kid}):{leaseId:e,valid:!0,kid:r.kid}}async function pn(){let e=(await S()).filter(r=>r.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return{kid:t.kid}}async function yn(n){return await Ne(n.subscription),{success:!0}}async function fn(){return await _e(),{success:!0}}async function wn(){return{subscription:await ve()}}async function mn(){Fe();let n=indexedDB.deleteDatabase("kms-v2");return await new Promise((e,t)=>{n.onsuccess=()=>e(),n.onerror=()=>t(new Error(n.error?.message??"Failed to delete database"))}),await ae(),nt(),{success:!0}}async function hn(n,e){let{enrollmentId:t,credentials:r}=n;return await M(r,async(s,a)=>(await C(s),!0)),await He(t),await I({op:"reset",kid:"",requestId:e,userId:r.userId,details:{action:"remove-enrollment",enrollmentId:t}}),{success:!0}}var Me,Ct=D(()=>{"use strict";ze();rt();oe();z();we();Et();It();Me=new Map;self.addEventListener("message",n=>{(async()=>{let e=n.data,t=await Pt(e);self.postMessage(t)})().catch(e=>{console.error("[KMS Worker] Message handling failed:",e);let t=n.data;self.postMessage({id:t?.id||"unknown",error:e instanceof Error?e.message:"Unknown error"})})});(async()=>{try{await ae(),await Qe(),await Ze(),(await G()).length===0&&await I({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(n){console.error("[KMS Worker] Initialization failed:",n)}})()});we();function Ut(n){if(typeof n!="object"||n===null)return!1;let e=n;if("enabled"in e&&typeof e.enabled!="boolean")return!1;if("results"in e){if(typeof e.results!="object"||e.results===null)return!1;let t=e.results;if("first"in t&&!(t.first instanceof ArrayBuffer)&&!(t.first instanceof Uint8Array)||"second"in t&&!(t.second instanceof ArrayBuffer)&&!(t.second instanceof Uint8Array))return!1}return!0}function _(n){let t=n.getClientExtensionResults().prf;if(t){if(!Ut(t)){console.warn("[WebAuthn] Invalid PRF extension result structure:",t);return}return t}}var Ve=class{worker=null;parentOrigin;workerUrl;isInitialized=!1;pendingUnlockRequest=null;constructor(e){this.parentOrigin=e.parentOrigin,this.workerUrl=e.workerUrl??"./kms-worker.885ea08b.js"}async init(){if(this.isInitialized)throw new Error("KMSClient already initialized");try{this.worker=new Worker(this.workerUrl,{type:"module",name:"kms-worker-v2"}),this.worker.addEventListener("message",this.handleWorkerMessage.bind(this)),this.worker.addEventListener("error",this.handleWorkerError.bind(this)),window.addEventListener("message",this.handleParentMessage.bind(this)),this.isInitialized=!0,this.sendToParent({type:"kms:ready"})}catch(e){throw console.error("[KMS Client] Initialization failed:",e),new Error(fe("Failed to initialize KMS client",e))}}handleParentMessage(e){if(e.origin!==this.parentOrigin){console.warn("[KMS Client] Rejected message from invalid origin:",{expected:this.parentOrigin,received:e.origin});return}if(!this.isInitialized||!this.worker){console.error("[KMS Client] Received message before initialization");return}let t=e.data,r=["createLease","generateVAPID","signJWT","regenerateVAPID","addEnrollment"];if(t?.method&&r.includes(t.method)){this.showUnlockModal(t);return}if(t?.method==="extendLeases"&&t.params&&typeof t.params=="object"&&"requestAuth"in t.params&&t.params.requestAuth===!0){this.showUnlockModal(t);return}try{this.worker.postMessage(e.data)}catch(s){console.error("[KMS Client] Failed to forward message to Worker:",s),t?.id&&this.sendToParent({id:t.id,error:fe("Failed to forward message",s)})}}handleWorkerMessage(e){try{let t=e.data;this.sendToParent(t)}catch(t){console.error("[KMS Client] Failed to forward message to parent:",t)}}handleWorkerError(e){console.error("[KMS Client] Worker error:",{message:e.message,filename:e.filename,lineno:e.lineno,colno:e.colno})}sendToParent(e){if(!window.parent){console.error("[KMS Client] No parent window available");return}try{window.parent.postMessage(e,this.parentOrigin)}catch(t){console.error("[KMS Client] Failed to send message to parent:",t)}}async getEnrollments(e){return new Promise((t,r)=>{let s=`get-enrollments-${Date.now()}`,a={id:s,method:"getEnrollments",params:{userId:e}},u=o=>{let i=o.data;if(i.id===s)if(this.worker?.removeEventListener("message",u),i.error){let c=typeof i.error=="string"?i.error:i.error.message;r(new Error(c))}else t(i.result?.enrollments||[])};this.worker?.addEventListener("message",u),this.worker?.postMessage(a),setTimeout(()=>{this.worker?.removeEventListener("message",u),r(new Error("getEnrollments timeout"))},5e3)})}showUnlockModal(e){this.pendingUnlockRequest=e;let t=document.getElementById("unlock-modal"),r=document.getElementById("kms-webauthn-btn"),s=document.getElementById("kms-passphrase-input"),a=document.getElementById("kms-passphrase-btn");if(!t||!r||!s||!a){console.error("[KMS Client] Modal elements not found"),e?this.sendToParent({id:e.id,error:"Modal UI not found"}):this.sendToParent({type:"kms:unlock-error",error:"Modal UI not found"});return}t.classList.remove("hidden"),r.onclick=()=>this.handleWebAuthnUnlock(),a.onclick=()=>this.handlePassphraseUnlock(s.value),s.onkeydown=u=>{u.key==="Enter"&&this.handlePassphraseUnlock(s.value).catch(o=>{console.error("[KMS Client] Passphrase unlock failed:",o),this.showError(o instanceof Error?o.message:"Unknown error")})},this.hideError()}async handleWebAuthnUnlock(){this.showLoading(),this.hideError();try{let e=localStorage.getItem("kms:appSalt"),t;e?t=new Uint8Array(e.split(",").map(p=>parseInt(p,10))):t=crypto.getRandomValues(new Uint8Array(32));let r=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:t}}}}});if(!r)throw new Error("No credential returned");let a=_(r)?.results?.first;if(!this.pendingUnlockRequest)throw new Error("No pending operation");let u=this.pendingUnlockRequest.params?.userId;if(!u)throw new Error("userId not found in request params");let o=await this.getEnrollments(u),i=o.includes("enrollment:passkey-prf:v2"),c=o.includes("enrollment:passkey-gate:v2"),d;if(i&&a)d={method:"passkey-prf",prfOutput:a,userId:u};else if(c)d={method:"passkey-gate",userId:u};else throw new Error("No passkey enrollment found for this user");let l={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:d}};this.setupUnlockResponseListener(l),this.worker?.postMessage(l)}catch(e){this.hideLoading(),this.showError(`WebAuthn failed: ${P(e)}`),console.error("[KMS Client] WebAuthn unlock failed:",e)}}async handlePassphraseUnlock(e){if(!e||e.trim().length===0){this.showError("Please enter a passphrase");return}this.showLoading(),this.hideError();try{if(!this.pendingUnlockRequest)throw new Error("No pending operation");let t=this.pendingUnlockRequest.params?.userId;if(!t)throw new Error("userId not found in request params");let r={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:{method:"passphrase",passphrase:e,userId:t}}};this.setupUnlockResponseListener(r),this.worker?.postMessage(r)}catch(t){console.error("[KMS Client] Passphrase unlock failed:",t),this.hideLoading(),this.showError(`Unlock failed: ${P(t)}`)}}setupUnlockResponseListener(e){let t=r=>{let s=r.data;s.id===e.id&&(this.worker?.removeEventListener("message",t),this.hideModal(),this.sendToParent(s),this.pendingUnlockRequest=null)};this.worker?.addEventListener("message",t)}showError(e){let t=document.getElementById("kms-modal-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideError(){let e=document.getElementById("kms-modal-error");e&&e.classList.add("hidden")}showLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.remove("hidden")}hideLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.add("hidden")}hideModal(){let e=document.getElementById("unlock-modal");e&&e.classList.add("hidden");let t=document.getElementById("kms-passphrase-input");t&&(t.value=""),this.hideLoading(),this.hideError()}async promptUnlockForEnrollment(e,t){this.hideSetupSuccess();let r=document.querySelector("#setup-modal .kms-modal-body");if(r){r.querySelectorAll(".kms-auth-option, .kms-divider").forEach(i=>i.classList.add("hidden"));let a=document.createElement("div");a.id="multi-enrollment-unlock",a.className="multi-enrollment-instructions",a.innerHTML=`
        <p class="multi-enrollment-title">
          🔒 Multi-Enrollment Authentication Required
        </p>
        <p class="multi-enrollment-description">
          You already have an authentication method set up. Please authenticate with your existing method to add a new one.
        </p>
      `,r.insertBefore(a,r.firstChild);let u=e.some(i=>i.includes("passphrase")),o=e.some(i=>i.includes("passkey"));if(u){let i=document.createElement("div");i.className="kms-auth-option",i.id="temp-passphrase-unlock",i.innerHTML=`
          <label for="temp-passphrase-input" class="kms-input-label">Passphrase</label>
          <input
            type="password"
            id="temp-passphrase-input"
            class="kms-input"
            placeholder="Enter your passphrase"
            autocomplete="off"
          />
          <button id="temp-passphrase-btn" class="kms-auth-btn kms-secondary">
            <span class="kms-auth-icon">🔐</span>
            <span class="kms-auth-label">Unlock with Passphrase</span>
          </button>
        `,r.appendChild(i)}if(o){let i=document.createElement("div");i.className="kms-auth-option",i.id="temp-passkey-unlock",i.innerHTML=`
          <button id="temp-passkey-btn" class="kms-auth-btn kms-primary">
            <span class="kms-auth-icon">🔑</span>
            <span class="kms-auth-label">Unlock with Passkey</span>
          </button>
        `,r.appendChild(i)}}return new Promise(s=>{let a=()=>{document.getElementById("multi-enrollment-unlock")?.remove(),document.getElementById("temp-passphrase-unlock")?.remove(),document.getElementById("temp-passkey-unlock")?.remove(),r?.querySelectorAll(".kms-auth-option, .kms-divider")?.forEach(d=>d.classList.remove("hidden"))},u=document.getElementById("temp-passphrase-btn"),o=document.getElementById("temp-passphrase-input");if(u&&o){let c=()=>{let d=o.value;if(!d){this.showSetupError("Please enter your passphrase");return}a(),s({method:"passphrase",passphrase:d,userId:t})};u.onclick=c,o.onkeydown=d=>{d.key==="Enter"&&c()}}let i=document.getElementById("temp-passkey-btn");i&&(i.onclick=async()=>{try{let c=localStorage.getItem("kms:appSalt"),d;c?d=new Uint8Array(c.split(",").map(g=>parseInt(g,10))):d=crypto.getRandomValues(new Uint8Array(32));let l=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:d}}}}});if(!l)throw new Error("No credential returned");let y=_(l)?.results?.first,f=e.some(g=>g.includes("prf")),v=e.some(g=>g.includes("gate")),m;if(f&&y)m={method:"passkey-prf",prfOutput:y,userId:t};else if(v)m={method:"passkey-gate",userId:t};else throw new Error("Unable to determine passkey method");a(),s(m)}catch(c){this.showSetupError(`Passkey unlock failed: ${P(c)}`)}})})}setupSetupModalHandlers(){let e=document.getElementById("kms-setup-webauthn-btn"),t=document.getElementById("kms-setup-passphrase-input"),r=document.getElementById("kms-setup-passphrase-confirm-input"),s=document.getElementById("kms-setup-passphrase-btn"),a=document.getElementById("kms-passphrase-char-count");if(!e||!t||!r||!s){console.error("[KMS Client] Setup modal elements not found");return}e.onclick=()=>this.handleWebAuthnSetup();let u=document.getElementById("kms-passphrase-match-feedback"),o=()=>{let c=t.value,d=r.value;if(u){if(d.length===0){u.classList.add("hidden");return}u.classList.remove("hidden"),c===d?(u.textContent="✓ Passphrases match",u.classList.remove("error"),u.classList.add("success")):(u.textContent="✗ Passphrases do not match",u.classList.remove("success"),u.classList.add("error"))}};t.oninput=()=>{let c=t.value.length,d=12;a&&(a.textContent=`${c} / ${d} characters`,c<d?(a.classList.remove("success"),a.classList.add("error")):(a.classList.remove("error"),a.classList.add("success"))),o()},r.oninput=o,s.onclick=()=>this.handlePassphraseSetup(t.value,r.value);let i=()=>{this.handlePassphraseSetup(t.value,r.value).catch(c=>{console.error("[KMS Client] Passphrase setup failed:",c),this.showSetupError(c instanceof Error?c.message:"Unknown error")})};t.onkeydown=c=>{c.key==="Enter"&&i()},r.onkeydown=c=>{c.key==="Enter"&&i()}}async handleWebAuthnSetup(){this.showSetupLoading(),this.hideSetupError();try{let e="demouser@ats.run",t=window.location.hostname,r=await this.getEnrollments(e),s=null;r.length>0&&(this.hideSetupLoading(),s=await this.promptUnlockForEnrollment(r,e),this.showSetupLoading());let a=crypto.getRandomValues(new Uint8Array(32)),u=await navigator.credentials.create({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),rp:{id:t,name:"ATS KMS V2"},user:{id:new TextEncoder().encode(e),name:e,displayName:e},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},extensions:{prf:{eval:{first:a}}}}});if(!u)throw new Error("No credential returned");let i=_(u)?.enabled===!0,c;if(i){let p=await navigator.credentials.get({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:a}}}}});c=_(p)?.results?.first}let d;s?d={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:e,method:i&&c?"passkey-prf":"passkey-gate",credentials:s,newCredentials:{credentialId:u.rawId,...c&&{prfOutput:c},rpId:t}}}:d={id:`setup-${Date.now()}`,method:i&&c?"setupPasskeyPRF":"setupPasskeyGate",params:{userId:e,credentialId:u.rawId,...c&&{prfOutput:c},rpId:t}},this.worker?.postMessage(d);let l=await new Promise((p,y)=>{let f=v=>{let m=v.data;if(m.id===d.id)if(this.worker?.removeEventListener("message",f),m.error){let g=typeof m.error=="string"?m.error:m.error.message;y(new Error(g))}else p(m.result)};this.worker?.addEventListener("message",f),setTimeout(()=>{this.worker?.removeEventListener("message",f),y(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),localStorage.setItem("kms:appSalt",Array.from(a).toString()),this.notifySetupComplete({method:c?"passkey-prf":"passkey-gate",result:l})}catch(e){this.hideSetupLoading(),this.showSetupError(`WebAuthn setup failed: ${P(e)}`),console.error("[KMS Client] WebAuthn setup failed:",e)}}async handlePassphraseSetup(e,t){if(!e||e.trim().length===0){this.showSetupError("Please enter a passphrase");return}if(e.length<12){this.showSetupError("Passphrase must be at least 12 characters");return}if(!t||t.trim().length===0){this.showSetupError("Please confirm your passphrase");return}if(e!==t){this.showSetupError("Passphrases do not match");return}this.showSetupLoading(),this.hideSetupError();try{let r="demouser@ats.run",s=await this.getEnrollments(r),a=null;s.length>0&&(this.hideSetupLoading(),a=await this.promptUnlockForEnrollment(s,r),this.showSetupLoading());let u;a?u={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:r,method:"passphrase",credentials:a,newCredentials:{passphrase:e}}}:u={id:`setup-${Date.now()}`,method:"setupPassphrase",params:{userId:r,passphrase:e}},this.worker?.postMessage(u);let o=await new Promise((i,c)=>{let d=l=>{let p=l.data;if(p.id===u.id)if(this.worker?.removeEventListener("message",d),p.error){let y=typeof p.error=="string"?p.error:p.error.message;c(new Error(y))}else i(p.result)};this.worker?.addEventListener("message",d),setTimeout(()=>{this.worker?.removeEventListener("message",d),c(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),this.notifySetupComplete({method:"passphrase",result:o})}catch(r){this.hideSetupLoading(),this.showSetupError(`Setup failed: ${P(r)}`),console.error("[KMS Client] Passphrase setup failed:",r)}}showSetupError(e){let t=document.getElementById("kms-setup-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideSetupError(){let e=document.getElementById("kms-setup-error");e&&e.classList.add("hidden")}showSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.remove("hidden")}hideSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.add("hidden")}showSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.remove("hidden")}hideSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.add("hidden")}notifySetupComplete(e){let t={type:"kms:setup-complete",method:e.method,result:e.result};window.opener&&(window.opener.postMessage(t,this.parentOrigin),console.log("[KMS Client] Sent setup-complete via window.opener"));try{localStorage.setItem("kms:setup-complete",JSON.stringify({timestamp:Date.now(),...t})),console.log("[KMS Client] Set setup-complete flag in localStorage")}catch(r){console.warn("[KMS Client] Failed to set localStorage flag:",r)}try{let r=new BroadcastChannel("kms-setup");r.postMessage(t),r.close(),console.log("[KMS Client] Sent setup-complete via BroadcastChannel")}catch(r){console.warn("[KMS Client] BroadcastChannel not available:",r)}}async terminate(){this.worker&&(this.worker.terminate(),this.worker=null),this.isInitialized=!1}async send(e){let{handleMessage:t}=await Promise.resolve().then(()=>(Ct(),xt));return await t(e)}};if(typeof window<"u"&&typeof document<"u"){let n=new URLSearchParams(window.location.search),e=n.get("parentOrigin")??"https://allthe.services",t=window.self!==window.top,r=n.get("mode")==="setup"||n.has("setup"),s=!t&&(window.opener!==null||r),a=new Ve({parentOrigin:e}),u=()=>{a.init().catch(o=>{console.error("[KMS Client] Auto-initialization failed:",o)}),s&&setTimeout(()=>{a.setupSetupModalHandlers();let o=document.getElementById("setup-modal");o&&o.classList.remove("hidden")},100)};if(document.readyState==="loading"?document.addEventListener("DOMContentLoaded",u):u(),t){try{new BroadcastChannel("kms-setup").addEventListener("message",i=>{i.data?.type==="kms:setup-complete"&&(console.log("[KMS Client] Received setup-complete via BroadcastChannel, forwarding to parent"),window.parent&&window.parent.postMessage(i.data,e))})}catch(o){console.warn("[KMS Client] BroadcastChannel not available for iframe:",o)}window.addEventListener("storage",o=>{if(o.key==="kms:setup-complete"&&o.newValue)try{let i=JSON.parse(o.newValue);console.log("[KMS Client] Received setup-complete via localStorage, forwarding to parent"),window.parent&&window.parent.postMessage({type:i.type,method:i.method,result:i.result},e),localStorage.removeItem("kms:setup-complete")}catch(i){console.warn("[KMS Client] Failed to parse setup-complete from localStorage:",i)}});try{let o=localStorage.getItem("kms:setup-complete");if(o){let i=JSON.parse(o);Date.now()-i.timestamp<5e3&&(console.log("[KMS Client] Found recent setup-complete in localStorage, forwarding to parent"),window.parent&&window.parent.postMessage({type:i.type,method:i.method,result:i.result},e)),localStorage.removeItem("kms:setup-complete")}}catch(o){console.warn("[KMS Client] Failed to check localStorage for setup-complete:",o)}}window.__kmsClient=a,window.__kmsContext={isIframe:t,isStandaloneSetup:s}}export{Ve as KMSClient};
