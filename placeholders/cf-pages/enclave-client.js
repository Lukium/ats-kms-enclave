var Mt=Object.defineProperty;var D=(r,e)=>()=>(r&&(e=r(r=0)),e);var Vt=(r,e)=>{for(var t in e)Mt(r,t,{get:e[t],enumerable:!0})};function K(r){if(r instanceof Error)return r.message;if(typeof r=="string")return r;if(typeof r=="object"&&r!==null&&"message"in r&&typeof r.message=="string")return r.message;try{return String(r)}catch{return"Unknown error"}}function fe(r,e){return`${r}: ${K(e)}`}var we=D(()=>{"use strict"});function w(r){let e=new Uint8Array(r),t=Array.from(e,s=>String.fromCharCode(s)).join("");return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function F(r){if(r.length!==65||r[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let e=w(r.slice(1,33).buffer),t=w(r.slice(33).buffer);return{kty:"EC",crv:"P-256",x:e,y:t}}async function $(r){let e={crv:r.crv,kty:r.kty,x:r.x,y:r.y},t=JSON.stringify(e),n=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(t));return w(n)}function Be(r){return"{"+Object.keys(r).sort().map(n=>[n,r[n]]).map(([n,s])=>`"${String(n)}":${JSON.stringify(s)}`).join(",")+"}"}function ne(r){let e={kmsVersion:r.kmsVersion,method:r.method,algVersion:r.algVersion,purpose:r.purpose};r.credentialId&&(e.credentialId=w(r.credentialId));let t=Be(e);return new TextEncoder().encode(t).buffer}function se(r){let e={kmsVersion:r.kmsVersion,kid:r.kid,alg:r.alg,purpose:r.purpose,createdAt:r.createdAt,keyType:r.keyType},t=Be(e);return new TextEncoder().encode(t).buffer}async function me(r){let e=await crypto.subtle.exportKey("raw",r),t=await crypto.subtle.importKey("raw",e,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),n=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",t,n)}function qe(r,e){return Tt(r,e)}function Tt(r,e){let t=new Uint8Array(r),n=new Uint8Array(e);if(t.length!==n.length)return!1;let s=0;for(let a=0;a<t.length;a++)s|=t[a]^n[a];return s===0}async function J(r){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(r))}async function We(r={min:150,max:300,mid:220}){let e=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),t=crypto.getRandomValues(new Uint8Array(16)),n=1e5,s=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:t,iterations:n},e,256);let i=performance.now()-s,o=Math.round(n*r.mid/i);return o=Math.min(Math.max(o,5e4),2e6),{iterations:o,measuredMs:i}}var z=D(()=>{"use strict"});async function ae(){return new Promise((r,e)=>{let t=indexedDB.open(Bt,qt);t.onerror=()=>{e(new Error("Failed to open IndexedDB"))},t.onsuccess=()=>{T=t.result,r()},t.onupgradeneeded=n=>{let s=n.target.result;if(s.objectStoreNames.contains("config")||s.createObjectStore("config",{keyPath:"method"}),!s.objectStoreNames.contains("keys")){let a=s.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!s.objectStoreNames.contains("leases")){let a=s.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!s.objectStoreNames.contains("audit")){let a=s.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}s.objectStoreNames.contains("meta")||s.createObjectStore("meta",{keyPath:"key"})}})}async function H(){if(T||await ae(),!T)throw new Error("Database not initialized");return T}function Oe(){T&&(T.close(),T=null)}async function ie(r,e){let t=await H();return new Promise((n,s)=>{let o=t.transaction(r,"readonly").objectStore(r).get(e);o.onsuccess=()=>{n(o.result)},o.onerror=()=>{s(new Error(`Failed to get from ${r}`))}})}async function j(r,e){let t=await H();return new Promise((n,s)=>{let o=t.transaction(r,"readwrite").objectStore(r).put(e);o.onsuccess=()=>{n()},o.onerror=()=>{s(new Error(`Failed to put to ${r}`))}})}async function he(r,e){let t=await H();return new Promise((n,s)=>{let o=t.transaction(r,"readwrite").objectStore(r).delete(e);o.onsuccess=()=>{n()},o.onerror=()=>{s(new Error(`Failed to delete from ${r}`))}})}async function Wt(r){let e=await H();return new Promise((t,n)=>{let i=e.transaction(r,"readonly").objectStore(r).getAll();i.onsuccess=()=>{t(i.result)},i.onerror=()=>{n(new Error(`Failed to getAll from ${r}`))}})}async function C(r,e,t,n=r.algorithm,s=r.usages,a={alg:"unknown",purpose:"unknown"}){let i=crypto.getRandomValues(new Uint8Array(12)),o=Date.now(),u=se({kmsVersion:2,kid:t,alg:a.alg,purpose:a.purpose,createdAt:o,keyType:Array.isArray(s)?s.join(","):String(s)}),c=r.type==="private"?"pkcs8":"raw",d=await crypto.subtle.exportKey(c,r),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:i,additionalData:u},e,d),p={kid:t,kmsVersion:2,wrappedKey:l,iv:i.buffer.slice(i.byteOffset,i.byteOffset+i.byteLength),aad:u,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:o};await j("keys",p)}async function Fe(r,e,t,n=[]){let s=await ie("keys",r);if(!s)throw new Error(`No wrapped key with id: ${r}`);let a=new Uint8Array(s.iv),i=s.aad,o=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:i},e,s.wrappedKey),u=typeof t=="string"?t:t.name,d=u==="ECDSA"||u==="ECDH"||u==="Ed25519"||u.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(d,o,t,!1,n)}async function L(r){return await ie("keys",r)??null}async function S(){return Wt("keys")}async function $e(r){await he("keys",r)}async function A(r){let e=await ie("meta",r);return e?e.value:null}async function x(r,e){await j("meta",{key:r,value:e})}async function He(r){await he("meta",r)}async function je(r){await j("audit",r)}async function G(){let r=await H();return new Promise((e,t)=>{let i=r.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();i.onsuccess=()=>{e(i.result)},i.onerror=()=>{t(new Error("Failed to get audit entries"))}})}async function Ge(){let r=await G();return r.length>0?r[r.length-1]:null}async function ge(r){await j("leases",r)}async function Q(r){return await ie("leases",r)??null}async function ke(r){let e=await H();return new Promise((t,n)=>{let o=e.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(r);o.onsuccess=()=>{t(o.result)},o.onerror=()=>{n(new Error("Failed to get user leases"))}})}async function Y(r){await he("leases",r)}async function Ne(r){let t=(await S()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let n=t[0];if(!n)throw new Error("No VAPID key found after filtering");let s={...n,subscription:r};await j("keys",s)}async function _e(){let e=(await S()).filter(a=>a.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");let{subscription:n,...s}=t;await j("keys",s)}async function be(){let e=(await S()).filter(n=>n.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return t.subscription??null}var Bt,qt,T,oe=D(()=>{"use strict";z();Bt="kms-v2",qt=1,T=null});function Ae(){let r=new Uint8Array(32);return crypto.getRandomValues(r),r}async function ve(r,e,t){let n=t??Ae(),{iterations:s}=await We(),a=crypto.getRandomValues(new Uint8Array(16)),i=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:s},i,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),u=await me(o),c=crypto.getRandomValues(new Uint8Array(12)),d=ne({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,additionalData:d},o,n),p={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:s,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:u,encryptedMS:l,msIV:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),msAAD:d,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await x(ue(r),p),{success:!0,ms:n}}async function Ee(r,e,t,n,s=""){let a=n??Ae(),i=await J("ATS/KMS/KEK-wrap/salt/v2"),o=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),u=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),c=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:i,info:o},u,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),d=crypto.getRandomValues(new Uint8Array(12)),l=ne({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:e,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:l},c,a),y=Date.now(),f=crypto.getRandomValues(new Uint8Array(32)),b={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:e,rpId:s,kdf:{algorithm:"HKDF-SHA256",appSalt:f.buffer.slice(f.byteOffset,f.byteOffset+f.byteLength),hkdfSalt:i,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:p,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await x(de(r),b),{success:!0,ms:a}}async function Pe(r,e,t,n=""){let s=t??Ae(),a=crypto.getRandomValues(new Uint8Array(32)),i=await J("ATS/KMS/KEK-gate/salt/v2"),o=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),u=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),c=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:i,info:o},u,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),d=crypto.getRandomValues(new Uint8Array(12)),l=ne({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:e,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:l},c,s),y=Date.now(),f={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:e,rpId:n,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:p,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await x(ce(r),f),{success:!0,ms:s}}async function Ie(r,e){let t=await A(ue(r));if(!t)return{success:!1,error:"Passphrase not set up"};let n=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),s=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:t.kdf.salt,iterations:t.kdf.iterations},n,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await me(s);if(!qe(a,t.kcv))return{success:!1,error:"Invalid passphrase"};try{let i=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},s,t.encryptedMS);return{success:!0,ms:new Uint8Array(i)}}catch{return{success:!1,error:"Decryption failed"}}}async function Ke(r,e){let t=await A(de(r));if(!t)return{success:!1,error:"Passkey not set up"};let n=t.kdf.hkdfSalt,s=new TextEncoder().encode(t.kdf.info),a=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]),i=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},i,t.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Se(r){let e=await A(ce(r));if(!e)return{success:!1,error:"Passkey gate not set up"};let t=new Uint8Array(e.pepperWrapped),n=await J("ATS/KMS/KEK-gate/salt/v2"),s=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),i=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:e.msIV,additionalData:e.msAAD},i,e.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Je(r){let e=await A(ue(r)),t=await A(de(r)),n=await A(ce(r));return!!(e||t||n)}async function xe(r){return!!await A(ue(r))}async function Re(r){let e=await A(de(r)),t=await A(ce(r));return!!(e||t)}async function X(r){let e=await J("ATS/KMS/MKEK/salt/v2"),t=new TextEncoder().encode("ATS/KMS/MKEK/v2"),n=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:t},n,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function M(r,e){let t=Date.now(),n=null;try{let s;switch(r.method){case"passphrase":s=await Ie(r.userId,r.passphrase);break;case"passkey-prf":s=await Ke(r.userId,r.prfOutput);break;case"passkey-gate":s=await Se(r.userId);break;default:throw new Error("Unknown credential method")}if(!s.success)throw new Error(s.error??"Unlock failed");n=s.ms;let a=await X(n),i=await e(a,n),o=Date.now();return{result:i,unlockTime:t,lockTime:o,duration:o-t}}finally{n&&n.fill(0)}}var ue,de,ce,ze=D(()=>{"use strict";z();oe();ue=r=>`enrollment:passphrase:v2:${r}`,de=r=>`enrollment:passkey-prf:v2:${r}`,ce=r=>`enrollment:passkey-gate:v2:${r}`});async function Qe(){}async function le(){let r=await A("LRK");return r||(r=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await x("LRK",r)),r}async function Z(r){let e=await crypto.subtle.digest("SHA-256",r);return w(e)}async function R(r){let e=await L("audit-user");if(e&&e.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,r,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),i=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),o=await Z(e.publicKeyRaw);P={type:"UAK",keyPair:{privateKey:a,publicKey:i},keyId:o};return}let t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),n=await crypto.subtle.exportKey("raw",t.publicKey);await C(t.privateKey,r,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:n});let s=await Z(n);P={type:"UAK",keyPair:t,keyId:s}}async function Ye(r,e){if(!P||P.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let t=Date.now(),n=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",n.publicKey),a=w(s),i={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:r,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:t,notAfter:e,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},o=JSON.stringify(i,Object.keys(i).sort()),u=await crypto.subtle.sign("Ed25519",P.keyPair.privateKey,new TextEncoder().encode(o)),c={...i,sig:w(u)},d=await le(),l=se({kmsVersion:2,kid:`lak-${r}`,alg:"EdDSA",purpose:"lak",createdAt:t,keyType:"lease-audit-key"}),p=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",n.privateKey,d,{name:"AES-GCM",iv:p,additionalData:l});return await x(`lease-audit-key:${r}`,{leaseId:r,wrappedKey:y,iv:p,aad:l,publicKeyRaw:s,delegationCert:c,expiresAt:e,createdAt:t}),{lakKeyPair:n,delegationCert:c}}async function Xe(r,e){let t=await A(`lease-audit-key:${r}`);if(!t)throw new Error(`LAK not found for lease: ${r}`);let n=await le(),s=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,n,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),i=await Z(t.publicKeyRaw);P={type:"LAK",keyPair:{privateKey:s,publicKey:a},keyId:i,cert:e}}async function Ze(){let r=await L("audit-instance");if(r&&r.publicKeyRaw){let u=await le(),c=await crypto.subtle.unwrapKey("pkcs8",r.wrappedKey,u,{name:"AES-GCM",iv:r.iv,additionalData:r.aad},{name:"Ed25519"},!1,["sign"]),d=await crypto.subtle.importKey("raw",r.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),l=await Z(r.publicKeyRaw);P={type:"KIAK",keyPair:{privateKey:c,publicKey:d},keyId:l};return}let e=await le(),t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),n=await crypto.subtle.exportKey("raw",t.publicKey);await C(t.privateKey,e,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:n});let s=await L("audit-instance");if(!s)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",s.wrappedKey,e,{name:"AES-GCM",iv:s.iv,additionalData:s.aad},{name:"Ed25519"},!1,["sign"]),i=await crypto.subtle.importKey("raw",n,{name:"Ed25519"},!1,["verify"]),o=await Z(n);P={type:"KIAK",keyPair:{privateKey:a,publicKey:i},keyId:o}}async function I(r){let e,t,n=new Promise((s,a)=>{e=s,t=a});return Ce=Ce.then(async()=>{try{if(!P)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let s=Date.now(),a=await Ge(),i=a?a.chainHash:"",u={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:s,op:r.op,kid:r.kid,requestId:r.requestId,userId:r.userId,origin:r.origin,leaseId:r.leaseId,unlockTime:r.unlockTime,lockTime:r.lockTime,duration:r.duration,details:r.details,previousHash:i,signer:P.type,signerId:P.keyId},c=JSON.stringify(u),d=new TextEncoder().encode(i+c),l=await crypto.subtle.digest("SHA-256",d),p=w(l),y=new TextEncoder().encode(p),f=await crypto.subtle.sign("Ed25519",P.keyPair.privateKey,y),b=w(f),m={kmsVersion:u.kmsVersion,seqNum:u.seqNum,timestamp:u.timestamp,op:u.op,kid:u.kid,requestId:u.requestId,userId:u.userId,...u.origin!==void 0&&{origin:u.origin},...u.leaseId!==void 0&&{leaseId:u.leaseId},...u.unlockTime!==void 0&&{unlockTime:u.unlockTime},...u.lockTime!==void 0&&{lockTime:u.lockTime},...u.duration!==void 0&&{duration:u.duration},...u.details!==void 0&&{details:u.details},previousHash:u.previousHash,chainHash:p,signer:u.signer,signerId:u.signerId,...P.cert!==void 0&&{cert:P.cert},sig:b};await je(m),e(m)}catch(s){t(s)}}).catch(()=>{}),n}async function et(){let r=await G(),e=[],t=0;for(let n of r){let s={kmsVersion:n.kmsVersion,seqNum:n.seqNum,timestamp:n.timestamp,op:n.op,kid:n.kid,requestId:n.requestId,userId:n.userId,origin:n.origin,leaseId:n.leaseId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:n.details,previousHash:n.previousHash,signer:n.signer,signerId:n.signerId},a=JSON.stringify(s),i=new TextEncoder().encode(n.previousHash+a),o=await crypto.subtle.digest("SHA-256",i);w(o)!==n.chainHash&&e.push(`Chain hash mismatch at seq ${n.seqNum}`),t+=1}return{valid:e.length===0,verified:t,errors:e}}async function tt(){let r=await L("audit-user");if(!r||!r.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:w(r.publicKeyRaw)}}function rt(){P=null,Ce=Promise.resolve()}var Ce,P,nt=D(()=>{"use strict";oe();z();Ce=Promise.resolve(),P=null});function v(r,e){if(typeof e!="object"||e===null)throw new k(r,"params","object",e);return e}function h(r,e,t){if(typeof t!="string")throw new k(r,e,"string",t);return t}function B(r,e,t){if(t!==void 0)return h(r,e,t)}function pe(r,e,t){if(typeof t!="number")throw new k(r,e,"number",t);return t}function Ot(r,e,t){if(typeof t!="boolean")throw new k(r,e,"boolean",t);return t}function st(r,e,t){if(t!==void 0)return Ot(r,e,t)}function De(r,e,t){if(t instanceof ArrayBuffer)return t;if(t instanceof Uint8Array){let n=new ArrayBuffer(t.byteLength);return new Uint8Array(n).set(t),n}throw new k(r,e,"ArrayBuffer or Uint8Array",t)}function Le(r,e,t){if(t!==void 0){if(t instanceof Uint8Array)return t;if(t instanceof ArrayBuffer)return new Uint8Array(t);throw new k(r,e,"ArrayBuffer or Uint8Array",t)}}function q(r,e){if(typeof e!="object"||e===null)throw new k(r,"credentials","AuthCredentials object",e);let t=e;if(typeof t.method!="string")throw new k(r,"credentials.method","string",t.method);if(typeof t.userId!="string")throw new k(r,"credentials.userId","string",t.userId);switch(t.method){case"passphrase":if(typeof t.passphrase!="string")throw new k(r,"credentials.passphrase","string",t.passphrase);return{method:"passphrase",passphrase:t.passphrase,userId:t.userId};case"passkey-prf":if(!(t.prfOutput instanceof ArrayBuffer))throw new k(r,"credentials.prfOutput","ArrayBuffer",t.prfOutput);return{method:"passkey-prf",prfOutput:t.prfOutput,userId:t.userId};case"passkey-gate":return{method:"passkey-gate",userId:t.userId};default:throw new k(r,"credentials.method","passphrase | passkey-prf | passkey-gate",t.method)}}function Ft(r,e){if(typeof e!="object"||e===null)throw new k(r,"payload","VAPIDPayload object",e);let t=e;return{aud:h(r,"payload.aud",t.aud),sub:h(r,"payload.sub",t.sub),exp:pe(r,"payload.exp",t.exp),jti:h(r,"payload.jti",t.jti)}}function at(r){let e=v("setupPassphrase",r),t=Le("setupPassphrase","existingMS",e.existingMS);return{userId:h("setupPassphrase","userId",e.userId),passphrase:h("setupPassphrase","passphrase",e.passphrase),...t!==void 0&&{existingMS:t}}}function it(r){let e=v("setupPasskeyPRF",r);if(!e.credentialId)throw new Error("credentialId required");let t=B("setupPasskeyPRF","rpId",e.rpId),n=Le("setupPasskeyPRF","existingMS",e.existingMS);return{userId:h("setupPasskeyPRF","userId",e.userId),credentialId:De("setupPasskeyPRF","credentialId",e.credentialId),prfOutput:De("setupPasskeyPRF","prfOutput",e.prfOutput),...t!==void 0&&{rpId:t},...n!==void 0&&{existingMS:n}}}function ot(r){let e=v("setupPasskeyGate",r),t=B("setupPasskeyGate","rpId",e.rpId),n=Le("setupPasskeyGate","existingMS",e.existingMS);return{userId:h("setupPasskeyGate","userId",e.userId),credentialId:De("setupPasskeyGate","credentialId",e.credentialId),...t!==void 0&&{rpId:t},...n!==void 0&&{existingMS:n}}}function ut(r){let e=v("addEnrollment",r),t=h("addEnrollment","method",e.method);if(t!=="passphrase"&&t!=="passkey-prf"&&t!=="passkey-gate")throw new k("addEnrollment","method","passphrase | passkey-prf | passkey-gate",t);return{userId:h("addEnrollment","userId",e.userId),method:t,credentials:q("addEnrollment",e.credentials),newCredentials:e.newCredentials}}function dt(r){let e=v("generateVAPID",r);return{credentials:q("generateVAPID",e.credentials)}}function ct(r){let e=v("regenerateVAPID",r);return{credentials:q("regenerateVAPID",e.credentials)}}function lt(r){let e=v("signJWT",r);return{kid:h("signJWT","kid",e.kid),payload:Ft("signJWT",e.payload),credentials:q("signJWT",e.credentials)}}function pt(r){let e=v("createLease",r),t={userId:h("createLease","userId",e.userId),ttlHours:pe("createLease","ttlHours",e.ttlHours),credentials:q("createLease",e.credentials)},n=st("createLease","autoExtend",e.autoExtend);return n!==void 0&&(t.autoExtend=n),t}function yt(r){let e=v("extendLeases",r);if(!Array.isArray(e.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof e.leaseIds}`);if(e.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let n={leaseIds:e.leaseIds.map((a,i)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${i} - expected non-empty string`);return a}),userId:h("extendLeases","userId",e.userId)},s=st("extendLeases","requestAuth",e.requestAuth);return s!==void 0&&(n.requestAuth=s),e.credentials!==void 0&&(n.credentials=q("extendLeases",e.credentials)),n}function ft(r){let e=v("issueVAPIDJWT",r),t=B("issueVAPIDJWT","kid",e.kid),n=B("issueVAPIDJWT","jti",e.jti),s=e.exp!==void 0?pe("issueVAPIDJWT","exp",e.exp):void 0;return{leaseId:h("issueVAPIDJWT","leaseId",e.leaseId),...t!==void 0&&{kid:t},...n!==void 0&&{jti:n},...s!==void 0&&{exp:s}}}function wt(r){let e=v("issueVAPIDJWTs",r),t=B("issueVAPIDJWTs","kid",e.kid);return{leaseId:h("issueVAPIDJWTs","leaseId",e.leaseId),count:pe("issueVAPIDJWTs","count",e.count),...t!==void 0&&{kid:t}}}function mt(r){if(r==null)return{};let e=v("isSetup",r),t=B("isSetup","userId",e.userId);return t!==void 0?{userId:t}:{}}function ht(r){if(r==null)return{};let e=v("getEnrollments",r),t=B("getEnrollments","userId",e.userId);return t!==void 0?{userId:t}:{}}function gt(r){let e=v("getPublicKey",r);return{kid:h("getPublicKey","kid",e.kid)}}function kt(r){let e=v("getUserLeases",r);return{userId:h("getUserLeases","userId",e.userId)}}function bt(r){let e=v("verifyLease",r),t={leaseId:h("verifyLease","leaseId",e.leaseId)};if("deleteIfInvalid"in e){if(typeof e.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");t.deleteIfInvalid=e.deleteIfInvalid}return t}function At(r){let e=v("removeEnrollment",r);return{enrollmentId:h("removeEnrollment","enrollmentId",e.enrollmentId),credentials:q("removeEnrollment",e.credentials)}}function Ht(r,e){if(typeof e!="object"||e===null)throw new k(r,"subscription","object",e);let t=e,n=h(r,"subscription.endpoint",t.endpoint);if(!n.startsWith("https://"))throw new Error(`${r}: subscription.endpoint must use HTTPS`);let s;try{s=new URL(n)}catch{throw new Error(`${r}: subscription.endpoint is not a valid URL`)}if(!$t.some(p=>s.hostname===p||s.hostname.endsWith(`.${p}`)))throw new Error(`${r}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${s.hostname}`);let i=t.expirationTime;if(i!==null&&typeof i!="number")throw new k(r,"subscription.expirationTime","number or null",i);if(typeof t.keys!="object"||t.keys===null)throw new k(r,"subscription.keys","object",t.keys);let o=t.keys,u=h(r,"subscription.keys.p256dh",o.p256dh),c=h(r,"subscription.keys.auth",o.auth);if(u.length===0)throw new Error(`${r}: subscription.keys.p256dh must be non-empty`);if(c.length===0)throw new Error(`${r}: subscription.keys.auth must be non-empty`);let d=h(r,"subscription.eid",t.eid);if(d.length===0)throw new Error(`${r}: subscription.eid must be non-empty`);let l=t.createdAt;if(typeof l!="number")throw new k(r,"subscription.createdAt","number",l);return{endpoint:n,expirationTime:i,keys:{p256dh:u,auth:c},eid:d,createdAt:l}}function vt(r){let e=v("setPushSubscription",r);return{subscription:Ht("setPushSubscription",e.subscription)}}var k,$t,Et=D(()=>{"use strict";k=class extends Error{constructor(t,n,s,a){super(`RPC ${t}: Invalid ${n} - expected ${s}, got ${typeof a}`);this.method=t;this.param=n;this.expected=s;this.received=a;this.name="RPCValidationError"}};$t=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"]});function Gt(r){if(typeof r!="object"||r===null)return!1;let e=r;return typeof e.tokensIssued=="number"&&typeof e.lastResetAt=="number"}function Pt(r){return Gt(r)?r:{tokensIssued:0,lastResetAt:Date.now()}}var It=D(()=>{"use strict"});var xt={};Vt(xt,{handleMessage:()=>Kt});async function Nt(r,e){let t=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},t,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function Kt(r){let{id:e,method:t,params:n}=r;try{let s;switch(t){case"setupPassphrase":s=await _t(at(n),e);break;case"setupPasskeyPRF":s=await Jt(it(n),e);break;case"setupPasskeyGate":s=await zt(ot(n),e);break;case"addEnrollment":s=await Qt(ut(n),e);break;case"generateVAPID":s=await Yt(dt(n),e);break;case"regenerateVAPID":s=await Xt(ct(n),e);break;case"signJWT":s=await Zt(lt(n),e);break;case"createLease":s=await er(pt(n),e);break;case"extendLeases":s=await tr(yt(n),e);break;case"issueVAPIDJWT":s=await St(ft(n),e);break;case"issueVAPIDJWTs":s=await rr(wt(n),e);break;case"isSetup":s=await nr(mt(n));break;case"getEnrollments":s=await sr(ht(n));break;case"verifyAuditChain":s=await ar();break;case"getAuditLog":s=await ir();break;case"getPublicKey":s=await or(gt(n));break;case"getAuditPublicKey":s=await ur();break;case"getUserLeases":s=await dr(kt(n));break;case"verifyLease":s=await cr(bt(n));break;case"getVAPIDKid":s=await lr();break;case"resetKMS":s=await wr();break;case"removeEnrollment":s=await mr(At(n),e);break;case"setPushSubscription":s=await pr(vt(n));break;case"removePushSubscription":s=await yr();break;case"getPushSubscription":s=await fr();break;default:throw new Error(`Unknown RPC method: ${t}`)}return{id:e,result:s}}catch(s){return{id:e,error:K(s)}}}async function _t(r,e){let{userId:t,passphrase:n,existingMS:s}=r;if(!n||n.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await ve(t,n,s);if(!a.success)throw new Error(a.error);let i=await X(a.ms);await R(i);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let u=o,c=await crypto.subtle.exportKey("raw",u.publicKey),d=F(new Uint8Array(c)),l=await $(d);return await C(u.privateKey,i,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),a.ms.fill(0),await I({op:"setup-passphrase",kid:"",requestId:e,userId:t,details:{method:"passphrase",vapidKid:l}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:w(c),vapidKid:l}}async function Jt(r,e){let{userId:t,credentialId:n,prfOutput:s,rpId:a="",existingMS:i}=r;if(!n||n.byteLength===0)throw new Error("credentialId required");if(!s||s.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let o=await Ee(t,n,s,i,a);if(!o.success)throw new Error(o.error);let u=await X(o.ms);await R(u);let c=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in c)||!("publicKey"in c))throw new Error("Failed to generate ECDSA keypair");let d=c,l=await crypto.subtle.exportKey("raw",d.publicKey),p=F(new Uint8Array(l)),y=await $(p);return await C(d.privateKey,u,y,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:l}),o.ms.fill(0),await I({op:"setup-passkey-prf",kid:"",requestId:e,userId:t,details:{method:"passkey-prf",credentialId:w(n),vapidKid:y}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:w(l),vapidKid:y}}async function zt(r,e){let{userId:t,credentialId:n,rpId:s="",existingMS:a}=r;if(!n||n.byteLength===0)throw new Error("credentialId required");let i=await Pe(t,n,a,s);if(!i.success)throw new Error(i.error);let o=await X(i.ms);await R(o);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let c=u,d=await crypto.subtle.exportKey("raw",c.publicKey),l=F(new Uint8Array(d)),p=await $(l);return await C(c.privateKey,o,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),i.ms.fill(0),await I({op:"setup-passkey-gate",kid:"",requestId:e,userId:t,details:{method:"passkey-gate",credentialId:w(n),vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:w(d),vapidKid:p}}async function Qt(r,e){let{userId:t,method:n,credentials:s,newCredentials:a}=r;function i(d,l){if(typeof l!="object"||l===null)throw new Error(`newCredentials must be an object for ${d}`);return l}let o=i(n,a);await M(s,async(d,l)=>(await R(d),!0));let u;if(s.method==="passphrase"){let d=await Ie(t,s.passphrase);if(!d.success)throw new Error(d.error);u=d.ms}else if(s.method==="passkey-prf"){let d=await Ke(t,s.prfOutput);if(!d.success)throw new Error(d.error);u=d.ms}else if(s.method==="passkey-gate"){let d=await Se(t);if(!d.success)throw new Error(d.error);u=d.ms}else throw new Error("Invalid credentials method");let c;if(n==="passphrase"){if(typeof o.passphrase!="string")throw new Error("passphrase must be a string");c=await ve(t,o.passphrase,u)}else if(n==="passkey-prf"){if(!(o.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");if(!(o.prfOutput instanceof ArrayBuffer))throw new Error("prfOutput must be an ArrayBuffer");let d=typeof o.rpId=="string"?o.rpId:"";c=await Ee(t,o.credentialId,o.prfOutput,u,d)}else if(n==="passkey-gate"){if(!(o.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");let d=typeof o.rpId=="string"?o.rpId:"";c=await Pe(t,o.credentialId,u,d)}else{let d=n;throw new Error(`Unknown enrollment method: ${String(d)}`)}if(u.fill(0),!c.success)throw new Error(c.error);return await I({op:"add-enrollment",kid:"",requestId:e,userId:s.userId,details:{method:n,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${n}:v2`}}async function Yt(r,e){let{credentials:t}=r,n=await M(t,async(s,a)=>{await R(s);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let o=i,u=await crypto.subtle.exportKey("raw",o.publicKey),c=F(new Uint8Array(u)),d=await $(c);return await C(o.privateKey,s,d,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:u}),{kid:d,publicKey:w(u)}});return await I({op:"generate",kid:n.result.kid,requestId:e,userId:t.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),n.result}async function Xt(r,e){let{credentials:t}=r,n=await M(t,async(s,a)=>{await R(s);let o=(await S()).filter(y=>y.purpose==="vapid");for(let y of o)await $e(y.kid);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let c=u,d=await crypto.subtle.exportKey("raw",c.publicKey),l=F(new Uint8Array(d)),p=await $(l);return await C(c.privateKey,s,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),{kid:p,publicKey:w(d),oldKids:o.map(y=>y.kid)}});return await I({op:"regenerate-vapid",kid:n.result.kid,requestId:e,userId:t.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:n.result.oldKids,deletedCount:n.result.oldKids.length}}),{kid:n.result.kid,publicKey:n.result.publicKey}}async function Zt(r,e){let{kid:t,payload:n,credentials:s}=r;if(!n.aud||!n.sub||!n.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(n.exp<=a)throw new Error("JWT exp must be in the future");if(n.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let i=await M(s,async(o,u)=>{await R(o);let c=await Fe(t,o,{name:"ECDSA",namedCurve:"P-256"},["sign"]),d={typ:"JWT",alg:"ES256",kid:t},l=w(new TextEncoder().encode(JSON.stringify(d)).buffer),p=w(new TextEncoder().encode(JSON.stringify(n)).buffer),y=new TextEncoder().encode(`${l}.${p}`),f=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},c,y),b=w(f);return{jwt:`${l}.${p}.${b}`}});return await I({op:"sign",kid:t,requestId:e,userId:s.userId,unlockTime:i.unlockTime,lockTime:i.lockTime,duration:i.duration,details:{algorithm:"ES256",aud:n.aud,exp:n.exp,jti:n.jti}}),i.result}async function er(r,e){let{userId:t,ttlHours:n,credentials:s,autoExtend:a}=r;if(n<=0||n>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let o=(await S()).filter(g=>g.purpose==="vapid");if(o.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");o.sort((g,E)=>E.createdAt-g.createdAt);let u=o[0];if(!u)throw new Error("VAPID key record not found after filtering");let c=u.kid,d=`lease-${crypto.randomUUID()}`,l=crypto.getRandomValues(new Uint8Array(32)),p=Date.now(),y=p+n*3600*1e3,f=await M(s,async(g,E)=>{await R(g);let{delegationCert:V}=await Ye(d,y),W=await Nt(E,l),O=await L(c);if(!O)throw new Error(`No wrapped key with id: ${c}`);let ee=new Uint8Array(O.iv),te=O.aad,ye=await crypto.subtle.unwrapKey("pkcs8",O.wrappedKey,g,{name:"AES-GCM",iv:ee,additionalData:te},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),re=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",ye,W,{name:"AES-GCM",iv:re}),iv:re,sessionKEK:W,lakDelegationCert:V}});await x(`sessionkek:${d}`,f.result.sessionKEK),Me.set(d,f.result.sessionKEK);let b={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},m={leaseId:d,userId:t,ttlHours:n,createdAt:p,exp:y,autoExtend:a??!0,quotas:b,wrappedLeaseKey:f.result.wrappedLeaseKey,wrappedLeaseKeyIV:f.result.iv.buffer.slice(f.result.iv.byteOffset,f.result.iv.byteOffset+f.result.iv.byteLength),leaseSalt:l.buffer.slice(l.byteOffset,l.byteOffset+l.byteLength),kid:c,lakDelegationCert:f.result.lakDelegationCert};return await ge(m),await x(`quota:${d}`,{leaseId:d,tokensIssued:0,lastResetAt:p,perEndpoint:{}}),await I({op:"create-lease",kid:c,requestId:e,userId:t,details:{action:"create-lease",leaseId:d,userId:t,ttlHours:n,autoExtend:m.autoExtend}}),{leaseId:d,exp:y,quotas:b,autoExtend:m.autoExtend??!0}}async function tr(r,e){let{leaseIds:t,credentials:n,requestAuth:s}=r,a=[],i=0,o=0,u=0,c=!1;if(n)try{await M(n,async(d,l)=>(c=!0,Promise.resolve()))}catch(d){for(let l of t){let p=await Q(l);p&&p.autoExtend===!1&&(a.push({leaseId:l,status:"skipped",reason:`Authentication failed: ${K(d)}`}),o++)}if(o===t.length)return{results:a,extended:i,skipped:o,failed:u}}for(let d of t)try{let l=await Q(d);if(!l){a.push({leaseId:d,status:"skipped",reason:`Lease not found: ${d}`}),o++;continue}if(l.autoExtend===!1&&!s){a.push({leaseId:d,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),o++;continue}if(l.autoExtend===!1&&s&&!c){a.push({leaseId:d,status:"skipped",reason:"Authentication required but credentials not valid"}),o++;continue}let y=(await S()).filter(V=>V.purpose==="vapid");if(y.length===0){a.push({leaseId:d,status:"skipped",reason:"No VAPID key found"}),o++;continue}y.sort((V,W)=>W.createdAt-V.createdAt);let b=y[0].kid;if(l.kid!==b){a.push({leaseId:d,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${l.kid}, current kid: ${b})`}),o++;continue}let m=Date.now(),g=m+30*24*60*60*1e3,E={...l,exp:g,createdAt:m};await ge(E),await I({op:"extend-lease",kid:E.kid,requestId:e,userId:E.userId,details:{action:"extend-lease",leaseId:E.leaseId,userId:E.userId,newExp:g,autoExtend:E.autoExtend}}),a.push({leaseId:d,status:"extended",result:{leaseId:E.leaseId,exp:E.exp,iat:E.createdAt,kid:E.kid,autoExtend:E.autoExtend??!1}}),i++}catch(l){a.push({leaseId:d,status:"skipped",reason:`Error extending lease: ${K(l)}`}),u++}return{results:a,extended:i,skipped:o,failed:u}}async function St(r,e){let{leaseId:t}=r,{kid:n}=r;if(!n){let N=(await S()).filter(Lt=>Lt.purpose==="vapid");if(N.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(N.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let Te=N[0];if(!Te)throw new Error("No VAPID key found after filtering");n=Te.kid}let s=await Q(t);if(!s)throw new Error(`Lease not found: ${t}`);if(Date.now()>=s.exp)throw new Error("Lease expired");let i=(await S()).filter(U=>U.purpose==="vapid");if(i.length===0)throw new Error("No VAPID key available");i.sort((U,N)=>N.createdAt-U.createdAt);let o=i[0]?.kid;if(!o)throw new Error("Failed to determine current VAPID key");if(s.kid!==o)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await Xe(t,s.lakDelegationCert);let u=await be();if(!u)throw new Error("No push subscription found. Call setPushSubscription() first.");let c=await A(`quota:${t}`),d=Pt(c),l=Date.now()-3600*1e3;if(d.lastResetAt<l&&(d.tokensIssued=0,d.lastResetAt=Date.now()),d.tokensIssued>=s.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");d.tokensIssued++,await x(`quota:${t}`,d);let p=r.jti??crypto.randomUUID(),y=r.exp??Math.floor(Date.now()/1e3)+900,f=new URL(u.endpoint),b=`${f.protocol}//${f.host}`,m={aud:b,sub:"mailto:kms@example.com",exp:y,jti:p,uid:s.userId,eid:u.eid},g=Me.get(t);if(!g){let U=await A(`sessionkek:${t}`);if(!U)throw new Error(`SessionKEK not found for lease: ${t}`);g=U,Me.set(t,g)}let E=s.wrappedLeaseKey,V=new Uint8Array(s.wrappedLeaseKeyIV),W=await crypto.subtle.unwrapKey("pkcs8",E,g,{name:"AES-GCM",iv:V},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),O={typ:"JWT",alg:"ES256",kid:s.kid},ee=w(new TextEncoder().encode(JSON.stringify(O)).buffer),te=w(new TextEncoder().encode(JSON.stringify(m)).buffer),ye=new TextEncoder().encode(`${ee}.${te}`),re=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},W,ye),Ue=w(re),Ct=`${ee}.${te}.${Ue}`,Dt=await I({op:"sign",kid:s.kid,requestId:e,userId:s.userId,leaseId:t,details:{action:"issue-lease-jwt",jti:p,aud:b,eid:u.eid}});return{jwt:Ct,jti:p,exp:y,auditEntry:Dt}}async function rr(r,e){let{leaseId:t,count:n,kid:s}=r;if(!Number.isInteger(n)||n<1||n>10)throw new Error("count must be an integer between 1 and 10");let a=900,i=Math.floor(a*.6),o=Math.floor(Date.now()/1e3),u=[];for(let c=0;c<n;c++){let d=crypto.randomUUID(),l=o+a+c*i,p=await St({leaseId:t,...s!==void 0&&{kid:s},jti:d,exp:l},`${e}-${c}`);u.push(p)}return u}async function nr(r){let e=r?.userId??"default",t=await Je(e),n=[];await xe(e)&&n.push("passphrase"),await Re(e)&&n.push("passkey");let s;return t&&r?.userId&&(s=await ke(r.userId)),{isSetup:t,methods:n,...s!==void 0&&{leases:s}}}async function sr(r){let e=r?.userId??"default",t=[];if(await xe(e)&&t.push("enrollment:passphrase:v2"),await Re(e)){let n=await A(`enrollment:passkey-prf:v2:${e}`),s=await A(`enrollment:passkey-gate:v2:${e}`);n&&t.push("enrollment:passkey-prf:v2"),s&&t.push("enrollment:passkey-gate:v2")}return{enrollments:t}}async function ar(){return await et()}async function ir(){return{entries:await G()}}async function or(r){let{kid:e}=r,t=await L(e);if(!t||!t.publicKeyRaw)throw new Error(`Public key not found for kid: ${e}`);return{publicKey:w(t.publicKeyRaw)}}async function ur(){return await tt()}async function dr(r){let{userId:e}=r;return{leases:await ke(e)}}async function cr(r){let{leaseId:e,deleteIfInvalid:t=!1}=r,n=await Q(e);if(!n)return{leaseId:e,valid:!1,reason:"not-found",kid:""};if(Date.now()>=n.exp)return t&&await Y(e),{leaseId:e,valid:!1,reason:"expired",kid:n.kid};let a=(await S()).filter(u=>u.purpose==="vapid");if(a.length===0)return t&&await Y(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:n.kid};a.sort((u,c)=>c.createdAt-u.createdAt);let i=a[0];if(!i)return t&&await Y(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:n.kid};let o=i.kid;return n.kid!==o?(t&&await Y(e),{leaseId:e,valid:!1,reason:"wrong-key",kid:n.kid}):{leaseId:e,valid:!0,kid:n.kid}}async function lr(){let e=(await S()).filter(n=>n.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return{kid:t.kid}}async function pr(r){return await Ne(r.subscription),{success:!0}}async function yr(){return await _e(),{success:!0}}async function fr(){return{subscription:await be()}}async function wr(){Oe();let r=indexedDB.deleteDatabase("kms-v2");return await new Promise((e,t)=>{r.onsuccess=()=>e(),r.onerror=()=>t(new Error(r.error?.message??"Failed to delete database"))}),await ae(),rt(),{success:!0}}async function mr(r,e){let{enrollmentId:t,credentials:n}=r;return await M(n,async(s,a)=>(await R(s),!0)),await He(t),await I({op:"reset",kid:"",requestId:e,userId:n.userId,details:{action:"remove-enrollment",enrollmentId:t}}),{success:!0}}var Me,Rt=D(()=>{"use strict";ze();nt();oe();z();we();Et();It();Me=new Map;self.addEventListener("message",r=>{(async()=>{let e=r.data,t=await Kt(e);self.postMessage(t)})().catch(e=>{console.error("[KMS Worker] Message handling failed:",e);let t=r.data;self.postMessage({id:t?.id||"unknown",error:e instanceof Error?e.message:"Unknown error"})})});(async()=>{try{await ae(),await Qe(),await Ze(),(await G()).length===0&&await I({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(r){console.error("[KMS Worker] Initialization failed:",r)}})()});we();function Ut(r){if(typeof r!="object"||r===null)return!1;let e=r;if("enabled"in e&&typeof e.enabled!="boolean")return!1;if("results"in e){if(typeof e.results!="object"||e.results===null)return!1;let t=e.results;if("first"in t&&!(t.first instanceof ArrayBuffer)&&!(t.first instanceof Uint8Array)||"second"in t&&!(t.second instanceof ArrayBuffer)&&!(t.second instanceof Uint8Array))return!1}return!0}function _(r){let t=r.getClientExtensionResults().prf;if(t){if(!Ut(t)){console.warn("[WebAuthn] Invalid PRF extension result structure:",t);return}return t}}var Ve=class{worker=null;parentOrigin;workerUrl;isInitialized=!1;pendingUnlockRequest=null;constructor(e){this.parentOrigin=e.parentOrigin,this.workerUrl=e.workerUrl??"./kms-worker.885ea08b.js"}async init(){if(this.isInitialized)throw new Error("KMSClient already initialized");try{this.worker=new Worker(this.workerUrl,{type:"module",name:"kms-worker-v2"}),this.worker.addEventListener("message",this.handleWorkerMessage.bind(this)),this.worker.addEventListener("error",this.handleWorkerError.bind(this)),window.addEventListener("message",this.handleParentMessage.bind(this)),this.isInitialized=!0,this.sendToParent({type:"kms:ready"})}catch(e){throw console.error("[KMS Client] Initialization failed:",e),new Error(fe("Failed to initialize KMS client",e))}}handleParentMessage(e){if(e.origin!==this.parentOrigin){console.warn("[KMS Client] Rejected message from invalid origin:",{expected:this.parentOrigin,received:e.origin});return}if(!this.isInitialized||!this.worker){console.error("[KMS Client] Received message before initialization");return}let t=e.data,n=["createLease","generateVAPID","signJWT","regenerateVAPID","addEnrollment"];if(t?.method&&n.includes(t.method)){this.showUnlockModal(t);return}if(t?.method==="extendLeases"&&t.params&&typeof t.params=="object"&&"requestAuth"in t.params&&t.params.requestAuth===!0){this.showUnlockModal(t);return}try{this.worker.postMessage(e.data)}catch(s){console.error("[KMS Client] Failed to forward message to Worker:",s),t?.id&&this.sendToParent({id:t.id,error:fe("Failed to forward message",s)})}}handleWorkerMessage(e){try{let t=e.data;this.sendToParent(t)}catch(t){console.error("[KMS Client] Failed to forward message to parent:",t)}}handleWorkerError(e){console.error("[KMS Client] Worker error:",{message:e.message,filename:e.filename,lineno:e.lineno,colno:e.colno})}sendToParent(e){if(!window.parent){console.error("[KMS Client] No parent window available");return}try{window.parent.postMessage(e,this.parentOrigin)}catch(t){console.error("[KMS Client] Failed to send message to parent:",t)}}async getEnrollments(e){return new Promise((t,n)=>{let s=`get-enrollments-${Date.now()}`,a={id:s,method:"getEnrollments",params:{userId:e}},i=o=>{let u=o.data;if(u.id===s)if(this.worker?.removeEventListener("message",i),u.error){let c=typeof u.error=="string"?u.error:u.error.message;n(new Error(c))}else t(u.result?.enrollments||[])};this.worker?.addEventListener("message",i),this.worker?.postMessage(a),setTimeout(()=>{this.worker?.removeEventListener("message",i),n(new Error("getEnrollments timeout"))},5e3)})}showUnlockModal(e){this.pendingUnlockRequest=e;let t=document.getElementById("unlock-modal"),n=document.getElementById("kms-webauthn-btn"),s=document.getElementById("kms-passphrase-input"),a=document.getElementById("kms-passphrase-btn");if(!t||!n||!s||!a){console.error("[KMS Client] Modal elements not found"),e?this.sendToParent({id:e.id,error:"Modal UI not found"}):this.sendToParent({type:"kms:unlock-error",error:"Modal UI not found"});return}t.classList.remove("hidden"),n.onclick=()=>this.handleWebAuthnUnlock(),a.onclick=()=>this.handlePassphraseUnlock(s.value),s.onkeydown=i=>{i.key==="Enter"&&this.handlePassphraseUnlock(s.value).catch(o=>{console.error("[KMS Client] Passphrase unlock failed:",o),this.showError(o instanceof Error?o.message:"Unknown error")})},this.hideError()}async handleWebAuthnUnlock(){this.showLoading(),this.hideError();try{let e=localStorage.getItem("kms:appSalt"),t;e?t=new Uint8Array(e.split(",").map(p=>parseInt(p,10))):t=crypto.getRandomValues(new Uint8Array(32));let n=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:t}}}}});if(!n)throw new Error("No credential returned");let a=_(n)?.results?.first;if(!this.pendingUnlockRequest)throw new Error("No pending operation");let i=this.pendingUnlockRequest.params?.userId;if(!i)throw new Error("userId not found in request params");let o=await this.getEnrollments(i),u=o.includes("enrollment:passkey-prf:v2"),c=o.includes("enrollment:passkey-gate:v2"),d;if(u&&a)d={method:"passkey-prf",prfOutput:a,userId:i};else if(c)d={method:"passkey-gate",userId:i};else throw new Error("No passkey enrollment found for this user");let l={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:d}};this.setupUnlockResponseListener(l),this.worker?.postMessage(l)}catch(e){this.hideLoading(),this.showError(`WebAuthn failed: ${K(e)}`),console.error("[KMS Client] WebAuthn unlock failed:",e)}}async handlePassphraseUnlock(e){if(!e||e.trim().length===0){this.showError("Please enter a passphrase");return}this.showLoading(),this.hideError();try{if(!this.pendingUnlockRequest)throw new Error("No pending operation");let t=this.pendingUnlockRequest.params?.userId;if(!t)throw new Error("userId not found in request params");let n={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:{method:"passphrase",passphrase:e,userId:t}}};this.setupUnlockResponseListener(n),this.worker?.postMessage(n)}catch(t){console.error("[KMS Client] Passphrase unlock failed:",t),this.hideLoading(),this.showError(`Unlock failed: ${K(t)}`)}}setupUnlockResponseListener(e){let t=n=>{let s=n.data;s.id===e.id&&(this.worker?.removeEventListener("message",t),this.hideModal(),this.sendToParent(s),this.pendingUnlockRequest=null)};this.worker?.addEventListener("message",t)}showError(e){let t=document.getElementById("kms-modal-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideError(){let e=document.getElementById("kms-modal-error");e&&e.classList.add("hidden")}showLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.remove("hidden")}hideLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.add("hidden")}hideModal(){let e=document.getElementById("unlock-modal");e&&e.classList.add("hidden");let t=document.getElementById("kms-passphrase-input");t&&(t.value=""),this.hideLoading(),this.hideError()}async promptUnlockForEnrollment(e,t){this.hideSetupSuccess();let n=document.querySelector("#setup-modal .kms-modal-body");if(n){n.querySelectorAll(".kms-auth-option, .kms-divider").forEach(u=>u.classList.add("hidden"));let a=document.createElement("div");a.id="multi-enrollment-unlock",a.className="multi-enrollment-instructions",a.innerHTML=`
        <p class="multi-enrollment-title">
          🔒 Multi-Enrollment Authentication Required
        </p>
        <p class="multi-enrollment-description">
          You already have an authentication method set up. Please authenticate with your existing method to add a new one.
        </p>
      `,n.insertBefore(a,n.firstChild);let i=e.some(u=>u.includes("passphrase")),o=e.some(u=>u.includes("passkey"));if(i){let u=document.createElement("div");u.className="kms-auth-option",u.id="temp-passphrase-unlock",u.innerHTML=`
          <label for="temp-passphrase-input" class="kms-input-label">Passphrase</label>
          <input
            type="password"
            id="temp-passphrase-input"
            class="kms-input"
            placeholder="Enter your passphrase"
            autocomplete="off"
          />
          <button id="temp-passphrase-btn" class="kms-auth-btn kms-secondary">
            <span class="kms-auth-icon">🔐</span>
            <span class="kms-auth-label">Unlock with Passphrase</span>
          </button>
        `,n.appendChild(u)}if(o){let u=document.createElement("div");u.className="kms-auth-option",u.id="temp-passkey-unlock",u.innerHTML=`
          <button id="temp-passkey-btn" class="kms-auth-btn kms-primary">
            <span class="kms-auth-icon">🔑</span>
            <span class="kms-auth-label">Unlock with Passkey</span>
          </button>
        `,n.appendChild(u)}}return new Promise(s=>{let a=()=>{document.getElementById("multi-enrollment-unlock")?.remove(),document.getElementById("temp-passphrase-unlock")?.remove(),document.getElementById("temp-passkey-unlock")?.remove(),n?.querySelectorAll(".kms-auth-option, .kms-divider")?.forEach(d=>d.classList.remove("hidden"))},i=document.getElementById("temp-passphrase-btn"),o=document.getElementById("temp-passphrase-input");if(i&&o){let c=()=>{let d=o.value;if(!d){this.showSetupError("Please enter your passphrase");return}a(),s({method:"passphrase",passphrase:d,userId:t})};i.onclick=c,o.onkeydown=d=>{d.key==="Enter"&&c()}}let u=document.getElementById("temp-passkey-btn");u&&(u.onclick=async()=>{try{let c=localStorage.getItem("kms:appSalt"),d;c?d=new Uint8Array(c.split(",").map(g=>parseInt(g,10))):d=crypto.getRandomValues(new Uint8Array(32));let l=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:d}}}}});if(!l)throw new Error("No credential returned");let y=_(l)?.results?.first,f=e.some(g=>g.includes("prf")),b=e.some(g=>g.includes("gate")),m;if(f&&y)m={method:"passkey-prf",prfOutput:y,userId:t};else if(b)m={method:"passkey-gate",userId:t};else throw new Error("Unable to determine passkey method");a(),s(m)}catch(c){this.showSetupError(`Passkey unlock failed: ${K(c)}`)}})})}setupSetupModalHandlers(){let e=document.getElementById("kms-setup-webauthn-btn"),t=document.getElementById("kms-setup-passphrase-input"),n=document.getElementById("kms-setup-passphrase-confirm-input"),s=document.getElementById("kms-setup-passphrase-btn"),a=document.getElementById("kms-passphrase-char-count");if(!e||!t||!n||!s){console.error("[KMS Client] Setup modal elements not found");return}e.onclick=()=>this.handleWebAuthnSetup();let i=document.getElementById("kms-passphrase-match-feedback"),o=()=>{let c=t.value,d=n.value;if(i){if(d.length===0){i.classList.add("hidden");return}i.classList.remove("hidden"),c===d?(i.textContent="✓ Passphrases match",i.classList.remove("error"),i.classList.add("success")):(i.textContent="✗ Passphrases do not match",i.classList.remove("success"),i.classList.add("error"))}};t.oninput=()=>{let c=t.value.length,d=12;a&&(a.textContent=`${c} / ${d} characters`,c<d?(a.classList.remove("success"),a.classList.add("error")):(a.classList.remove("error"),a.classList.add("success"))),o()},n.oninput=o,s.onclick=()=>this.handlePassphraseSetup(t.value,n.value);let u=()=>{this.handlePassphraseSetup(t.value,n.value).catch(c=>{console.error("[KMS Client] Passphrase setup failed:",c),this.showSetupError(c instanceof Error?c.message:"Unknown error")})};t.onkeydown=c=>{c.key==="Enter"&&u()},n.onkeydown=c=>{c.key==="Enter"&&u()}}async handleWebAuthnSetup(){this.showSetupLoading(),this.hideSetupError();try{let e="demouser@ats.run",t=window.location.hostname,n=await this.getEnrollments(e),s=null;n.length>0&&(this.hideSetupLoading(),s=await this.promptUnlockForEnrollment(n,e),this.showSetupLoading());let a=crypto.getRandomValues(new Uint8Array(32)),i=await navigator.credentials.create({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),rp:{id:t,name:"ATS KMS V2"},user:{id:new TextEncoder().encode(e),name:e,displayName:e},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},extensions:{prf:{eval:{first:a}}}}});if(!i)throw new Error("No credential returned");let u=_(i)?.enabled===!0,c;if(u){let p=await navigator.credentials.get({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:a}}}}});c=_(p)?.results?.first}let d;s?d={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:e,method:u&&c?"passkey-prf":"passkey-gate",credentials:s,newCredentials:{credentialId:i.rawId,...c&&{prfOutput:c},rpId:t}}}:d={id:`setup-${Date.now()}`,method:u&&c?"setupPasskeyPRF":"setupPasskeyGate",params:{userId:e,credentialId:i.rawId,...c&&{prfOutput:c},rpId:t}},this.worker?.postMessage(d);let l=await new Promise((p,y)=>{let f=b=>{let m=b.data;if(m.id===d.id)if(this.worker?.removeEventListener("message",f),m.error){let g=typeof m.error=="string"?m.error:m.error.message;y(new Error(g))}else p(m.result)};this.worker?.addEventListener("message",f),setTimeout(()=>{this.worker?.removeEventListener("message",f),y(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),localStorage.setItem("kms:appSalt",Array.from(a).toString()),window.opener&&window.opener.postMessage({type:"kms:setup-complete",method:c?"passkey-prf":"passkey-gate",result:l},"*")}catch(e){this.hideSetupLoading(),this.showSetupError(`WebAuthn setup failed: ${K(e)}`),console.error("[KMS Client] WebAuthn setup failed:",e)}}async handlePassphraseSetup(e,t){if(!e||e.trim().length===0){this.showSetupError("Please enter a passphrase");return}if(e.length<12){this.showSetupError("Passphrase must be at least 12 characters");return}if(!t||t.trim().length===0){this.showSetupError("Please confirm your passphrase");return}if(e!==t){this.showSetupError("Passphrases do not match");return}this.showSetupLoading(),this.hideSetupError();try{let n="demouser@ats.run",s=await this.getEnrollments(n),a=null;s.length>0&&(this.hideSetupLoading(),a=await this.promptUnlockForEnrollment(s,n),this.showSetupLoading());let i;a?i={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:n,method:"passphrase",credentials:a,newCredentials:{passphrase:e}}}:i={id:`setup-${Date.now()}`,method:"setupPassphrase",params:{userId:n,passphrase:e}},this.worker?.postMessage(i);let o=await new Promise((u,c)=>{let d=l=>{let p=l.data;if(p.id===i.id)if(this.worker?.removeEventListener("message",d),p.error){let y=typeof p.error=="string"?p.error:p.error.message;c(new Error(y))}else u(p.result)};this.worker?.addEventListener("message",d),setTimeout(()=>{this.worker?.removeEventListener("message",d),c(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),window.opener&&window.opener.postMessage({type:"kms:setup-complete",method:"passphrase",result:o},"*")}catch(n){this.hideSetupLoading(),this.showSetupError(`Setup failed: ${K(n)}`),console.error("[KMS Client] Passphrase setup failed:",n)}}showSetupError(e){let t=document.getElementById("kms-setup-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideSetupError(){let e=document.getElementById("kms-setup-error");e&&e.classList.add("hidden")}showSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.remove("hidden")}hideSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.add("hidden")}showSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.remove("hidden")}hideSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.add("hidden")}async terminate(){this.worker&&(this.worker.terminate(),this.worker=null),this.isInitialized=!1}async send(e){let{handleMessage:t}=await Promise.resolve().then(()=>(Rt(),xt));return await t(e)}};if(typeof window<"u"&&typeof document<"u"){let r=new URLSearchParams(window.location.search),e=r.get("parentOrigin")??"https://allthe.services",t=window.self!==window.top,n=r.get("mode")==="setup"||r.has("setup"),s=!t&&(window.opener!==null||n),a=new Ve({parentOrigin:e}),i=()=>{a.init().catch(o=>{console.error("[KMS Client] Auto-initialization failed:",o)}),s&&setTimeout(()=>{a.setupSetupModalHandlers();let o=document.getElementById("setup-modal");o&&o.classList.remove("hidden")},100)};document.readyState==="loading"?document.addEventListener("DOMContentLoaded",i):i(),window.__kmsClient=a,window.__kmsContext={isIframe:t,isStandaloneSetup:s}}export{Ve as KMSClient};
