var Wt=Object.defineProperty;var B=(r,e)=>()=>(r&&(e=r(r=0)),e);var Ft=(r,e)=>{for(var t in e)Wt(r,t,{get:e[t],enumerable:!0})};function C(r){if(r instanceof Error)return r.message;if(typeof r=="string")return r;if(typeof r=="object"&&r!==null&&"message"in r&&typeof r.message=="string")return r.message;try{return String(r)}catch{return"Unknown error"}}function ge(r,e){return`${r}: ${C(e)}`}var he=B(()=>{"use strict"});function m(r){let e=new Uint8Array(r),t=Array.from(e,n=>String.fromCharCode(n)).join("");return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function M(r){let e=r.replace(/-/g,"+").replace(/_/g,"/"),t=e.length%4;t&&(e+="=".repeat(4-t));let s=atob(e),n=new Uint8Array(s.length);for(let a=0;a<s.length;a++)n[a]=s.charCodeAt(a);return n.buffer}function $(r){if(r.length!==65||r[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let e=m(r.slice(1,33).buffer),t=m(r.slice(33).buffer);return{kty:"EC",crv:"P-256",x:e,y:t}}async function N(r){let e={crv:r.crv,kty:r.kty,x:r.x,y:r.y},t=JSON.stringify(e),s=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(t));return m(s)}function We(r){return"{"+Object.keys(r).sort().map(s=>[s,r[s]]).map(([s,n])=>`"${String(s)}":${JSON.stringify(n)}`).join(",")+"}"}function ae(r){let e={kmsVersion:r.kmsVersion,method:r.method,algVersion:r.algVersion,purpose:r.purpose};r.credentialId&&(e.credentialId=m(r.credentialId));let t=We(e);return new TextEncoder().encode(t).buffer}function ie(r){let e={kmsVersion:r.kmsVersion,kid:r.kid,alg:r.alg,purpose:r.purpose,createdAt:r.createdAt,keyType:r.keyType},t=We(e);return new TextEncoder().encode(t).buffer}async function ke(r){let e=await crypto.subtle.exportKey("raw",r),t=await crypto.subtle.importKey("raw",e,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),s=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",t,s)}function Fe(r,e){return $t(r,e)}function $t(r,e){let t=new Uint8Array(r),s=new Uint8Array(e);if(t.length!==s.length)return!1;let n=0;for(let a=0;a<t.length;a++)n|=t[a]^s[a];return n===0}async function Y(r){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(r))}async function He(r={min:150,max:300,mid:220}){let e=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),t=crypto.getRandomValues(new Uint8Array(16)),s=1e5,n=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:t,iterations:s},e,256);let u=performance.now()-n,o=Math.round(s*r.mid/u);return o=Math.min(Math.max(o,5e4),2e6),{iterations:o,measuredMs:u}}var j=B(()=>{"use strict"});async function oe(){return new Promise((r,e)=>{let t=indexedDB.open(Nt,jt);t.onerror=()=>{e(new Error("Failed to open IndexedDB"))},t.onsuccess=()=>{W=t.result,r()},t.onupgradeneeded=s=>{let n=s.target.result;if(n.objectStoreNames.contains("config")||n.createObjectStore("config",{keyPath:"method"}),!n.objectStoreNames.contains("keys")){let a=n.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!n.objectStoreNames.contains("leases")){let a=n.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!n.objectStoreNames.contains("audit")){let a=n.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}n.objectStoreNames.contains("meta")||n.createObjectStore("meta",{keyPath:"key"})}})}async function G(){if(W||await oe(),!W)throw new Error("Database not initialized");return W}function $e(){W&&(W.close(),W=null)}async function de(r,e){let t=await G();return new Promise((s,n)=>{let o=t.transaction(r,"readonly").objectStore(r).get(e);o.onsuccess=()=>{s(o.result)},o.onerror=()=>{n(new Error(`Failed to get from ${r}`))}})}async function J(r,e){let t=await G();return new Promise((s,n)=>{let o=t.transaction(r,"readwrite").objectStore(r).put(e);o.onsuccess=()=>{s()},o.onerror=()=>{n(new Error(`Failed to put to ${r}`))}})}async function be(r,e){let t=await G();return new Promise((s,n)=>{let o=t.transaction(r,"readwrite").objectStore(r).delete(e);o.onsuccess=()=>{s()},o.onerror=()=>{n(new Error(`Failed to delete from ${r}`))}})}async function Gt(r){let e=await G();return new Promise((t,s)=>{let u=e.transaction(r,"readonly").objectStore(r).getAll();u.onsuccess=()=>{t(u.result)},u.onerror=()=>{s(new Error(`Failed to getAll from ${r}`))}})}async function L(r,e,t,s=r.algorithm,n=r.usages,a={alg:"unknown",purpose:"unknown"}){let u=crypto.getRandomValues(new Uint8Array(12)),o=Date.now(),i=ie({kmsVersion:2,kid:t,alg:a.alg,purpose:a.purpose,createdAt:o,keyType:Array.isArray(n)?n.join(","):String(n)}),d=r.type==="private"?"pkcs8":"raw",c=await crypto.subtle.exportKey(d,r),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:u,additionalData:i},e,c),p={kid:t,kmsVersion:2,wrappedKey:l,iv:u.buffer.slice(u.byteOffset,u.byteOffset+u.byteLength),aad:i,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:o};await J("keys",p)}async function Ne(r,e,t,s=[]){let n=await de("keys",r);if(!n)throw new Error(`No wrapped key with id: ${r}`);let a=new Uint8Array(n.iv),u=n.aad,o=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:u},e,n.wrappedKey),i=typeof t=="string"?t:t.name,c=i==="ECDSA"||i==="ECDH"||i==="Ed25519"||i.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(c,o,t,!1,s)}async function T(r){return await de("keys",r)??null}async function x(){return Gt("keys")}async function je(r){await be("keys",r)}async function I(r){let e=await de("meta",r);return e?e.value:null}async function R(r,e){await J("meta",{key:r,value:e})}async function Ge(r){await be("meta",r)}async function Je(r){await J("audit",r)}async function _(){let r=await G();return new Promise((e,t)=>{let u=r.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();u.onsuccess=()=>{e(u.result)},u.onerror=()=>{t(new Error("Failed to get audit entries"))}})}async function _e(){let r=await _();return r.length>0?r[r.length-1]:null}async function ve(r){await J("leases",r)}async function X(r){return await de("leases",r)??null}async function Ke(r){let e=await G();return new Promise((t,s)=>{let o=e.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(r);o.onsuccess=()=>{t(o.result)},o.onerror=()=>{s(new Error("Failed to get user leases"))}})}async function Z(r){await be("leases",r)}async function ze(r){let t=(await x()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let s=t[0];if(!s)throw new Error("No VAPID key found after filtering");let n={...s,subscription:r};await J("keys",n)}async function Qe(){let e=(await x()).filter(a=>a.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");let{subscription:s,...n}=t;await J("keys",n)}async function Ie(){let e=(await x()).filter(s=>s.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return t.subscription??null}var Nt,jt,W,ue=B(()=>{"use strict";j();Nt="kms-v2",jt=1,W=null});function Pe(){let r=new Uint8Array(32);return crypto.getRandomValues(r),r}async function Se(r,e,t){let s=t??Pe(),{iterations:n}=await He(),a=crypto.getRandomValues(new Uint8Array(16)),u=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:n},u,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),i=await ke(o),d=crypto.getRandomValues(new Uint8Array(12)),c=ae({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:c},o,s),p={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:n,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:i,encryptedMS:l,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:c,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await R(ce(r),p),{success:!0,ms:s}}async function Ae(r,e,t,s,n="",a,u){let o=s??Pe(),i=a??crypto.getRandomValues(new Uint8Array(32)),d=u??await Y("ATS/KMS/KEK-wrap/salt/v2"),c=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),l=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),p=d instanceof Uint8Array?d.buffer:d,y=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:p,info:c},l,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),f=crypto.getRandomValues(new Uint8Array(12)),h=ae({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:e,purpose:"master-secret"}),g=await crypto.subtle.encrypt({name:"AES-GCM",iv:f,additionalData:h},y,o),w=Date.now(),b=i.buffer.slice(i.byteOffset,i.byteOffset+i.byteLength),S;d instanceof Uint8Array?S=d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength):S=d;let E={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:e,rpId:n,kdf:{algorithm:"HKDF-SHA256",appSalt:b,hkdfSalt:S,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:g,msIV:f.buffer.slice(f.byteOffset,f.byteOffset+f.byteLength),msAAD:h,msVersion:1,createdAt:w,updatedAt:w};return await R(le(r),E),{success:!0,ms:o}}async function Ee(r,e,t,s=""){let n=t??Pe(),a=crypto.getRandomValues(new Uint8Array(32)),u=await Y("ATS/KMS/KEK-gate/salt/v2"),o=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),i=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),d=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:u,info:o},i,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),c=crypto.getRandomValues(new Uint8Array(12)),l=ae({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:e,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,additionalData:l},d,n),y=Date.now(),f={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:e,rpId:s,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:p,msIV:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await R(pe(r),f),{success:!0,ms:n}}async function Ce(r,e){let t=await I(ce(r));if(!t)return{success:!1,error:"Passphrase not set up"};let s=await crypto.subtle.importKey("raw",new TextEncoder().encode(e),"PBKDF2",!1,["deriveKey"]),n=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:t.kdf.salt,iterations:t.kdf.iterations},s,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await ke(n);if(!Fe(a,t.kcv))return{success:!1,error:"Invalid passphrase"};try{let u=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},n,t.encryptedMS);return{success:!0,ms:new Uint8Array(u)}}catch{return{success:!1,error:"Decryption failed"}}}async function xe(r,e){let t=await I(le(r));if(!t)return{success:!1,error:"Passkey not set up"};let s=t.kdf.hkdfSalt,n=new TextEncoder().encode(t.kdf.info),a=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:s,info:n},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},u,t.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Re(r){let e=await I(pe(r));if(!e)return{success:!1,error:"Passkey gate not set up"};let t=new Uint8Array(e.pepperWrapped),s=await Y("ATS/KMS/KEK-gate/salt/v2"),n=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:s,info:n},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:e.msIV,additionalData:e.msAAD},u,e.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Ye(r){let e=await I(ce(r)),t=await I(le(r)),s=await I(pe(r));return!!(e||t||s)}async function Me(r){return!!await I(ce(r))}async function De(r){let e=await I(le(r)),t=await I(pe(r));return!!(e||t)}async function ee(r){let e=await Y("ATS/KMS/MKEK/salt/v2"),t=new TextEncoder().encode("ATS/KMS/MKEK/v2"),s=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:t},s,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function V(r,e){let t=Date.now(),s=null;try{let n;switch(r.method){case"passphrase":n=await Ce(r.userId,r.passphrase);break;case"passkey-prf":n=await xe(r.userId,r.prfOutput);break;case"passkey-gate":n=await Re(r.userId);break;default:throw new Error("Unknown credential method")}if(!n.success)throw new Error(n.error??"Unlock failed");s=n.ms;let a=await ee(s),u=await e(a,s),o=Date.now();return{result:u,unlockTime:t,lockTime:o,duration:o-t}}finally{s&&s.fill(0)}}var ce,le,pe,Xe=B(()=>{"use strict";j();ue();ce=r=>`enrollment:passphrase:v2:${r}`,le=r=>`enrollment:passkey-prf:v2:${r}`,pe=r=>`enrollment:passkey-gate:v2:${r}`});async function Ze(){}async function ye(){let r=await I("LRK");return r||(r=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await R("LRK",r)),r}async function te(r){let e=await crypto.subtle.digest("SHA-256",r);return m(e)}async function D(r){let e=await T("audit-user");if(e&&e.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,r,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),u=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),o=await te(e.publicKeyRaw);P={type:"UAK",keyPair:{privateKey:a,publicKey:u},keyId:o};return}let t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",t.publicKey);await L(t.privateKey,r,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:s});let n=await te(s);P={type:"UAK",keyPair:t,keyId:n}}async function et(r,e){if(!P||P.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let t=Date.now(),s=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),n=await crypto.subtle.exportKey("raw",s.publicKey),a=m(n),u={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:r,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:t,notAfter:e,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},o=JSON.stringify(u,Object.keys(u).sort()),i=await crypto.subtle.sign("Ed25519",P.keyPair.privateKey,new TextEncoder().encode(o)),d={...u,sig:m(i)},c=await ye(),l=ie({kmsVersion:2,kid:`lak-${r}`,alg:"EdDSA",purpose:"lak",createdAt:t,keyType:"lease-audit-key"}),p=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",s.privateKey,c,{name:"AES-GCM",iv:p,additionalData:l});return await R(`lease-audit-key:${r}`,{leaseId:r,wrappedKey:y,iv:p,aad:l,publicKeyRaw:n,delegationCert:d,expiresAt:e,createdAt:t}),{lakKeyPair:s,delegationCert:d}}async function tt(r,e){let t=await I(`lease-audit-key:${r}`);if(!t)throw new Error(`LAK not found for lease: ${r}`);let s=await ye(),n=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,s,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),u=await te(t.publicKeyRaw);P={type:"LAK",keyPair:{privateKey:n,publicKey:a},keyId:u,cert:e}}async function rt(){let r=await T("audit-instance");if(r&&r.publicKeyRaw){let i=await ye(),d=await crypto.subtle.unwrapKey("pkcs8",r.wrappedKey,i,{name:"AES-GCM",iv:r.iv,additionalData:r.aad},{name:"Ed25519"},!1,["sign"]),c=await crypto.subtle.importKey("raw",r.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),l=await te(r.publicKeyRaw);P={type:"KIAK",keyPair:{privateKey:d,publicKey:c},keyId:l};return}let e=await ye(),t=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),s=await crypto.subtle.exportKey("raw",t.publicKey);await L(t.privateKey,e,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:s});let n=await T("audit-instance");if(!n)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",n.wrappedKey,e,{name:"AES-GCM",iv:n.iv,additionalData:n.aad},{name:"Ed25519"},!1,["sign"]),u=await crypto.subtle.importKey("raw",s,{name:"Ed25519"},!1,["verify"]),o=await te(s);P={type:"KIAK",keyPair:{privateKey:a,publicKey:u},keyId:o}}async function A(r){let e,t,s=new Promise((n,a)=>{e=n,t=a});return Le=Le.then(async()=>{try{if(!P)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let n=Date.now(),a=await _e(),u=a?a.chainHash:"",i={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:n,op:r.op,kid:r.kid,requestId:r.requestId,userId:r.userId,origin:r.origin,leaseId:r.leaseId,unlockTime:r.unlockTime,lockTime:r.lockTime,duration:r.duration,details:r.details,previousHash:u,signer:P.type,signerId:P.keyId},d=JSON.stringify(i),c=new TextEncoder().encode(u+d),l=await crypto.subtle.digest("SHA-256",c),p=m(l),y=new TextEncoder().encode(p),f=await crypto.subtle.sign("Ed25519",P.keyPair.privateKey,y),h=m(f),g={kmsVersion:i.kmsVersion,seqNum:i.seqNum,timestamp:i.timestamp,op:i.op,kid:i.kid,requestId:i.requestId,userId:i.userId,...i.origin!==void 0&&{origin:i.origin},...i.leaseId!==void 0&&{leaseId:i.leaseId},...i.unlockTime!==void 0&&{unlockTime:i.unlockTime},...i.lockTime!==void 0&&{lockTime:i.lockTime},...i.duration!==void 0&&{duration:i.duration},...i.details!==void 0&&{details:i.details},previousHash:i.previousHash,chainHash:p,signer:i.signer,signerId:i.signerId,...P.cert!==void 0&&{cert:P.cert},sig:h};await Je(g),e(g)}catch(n){t(n)}}).catch(()=>{}),s}async function st(){let r=await _(),e=[],t=0;for(let s of r){let n={kmsVersion:s.kmsVersion,seqNum:s.seqNum,timestamp:s.timestamp,op:s.op,kid:s.kid,requestId:s.requestId,userId:s.userId,origin:s.origin,leaseId:s.leaseId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:s.details,previousHash:s.previousHash,signer:s.signer,signerId:s.signerId},a=JSON.stringify(n),u=new TextEncoder().encode(s.previousHash+a),o=await crypto.subtle.digest("SHA-256",u);m(o)!==s.chainHash&&e.push(`Chain hash mismatch at seq ${s.seqNum}`),t+=1}return{valid:e.length===0,verified:t,errors:e}}async function nt(){let r=await T("audit-user");if(!r||!r.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:m(r.publicKeyRaw)}}function at(){P=null,Le=Promise.resolve()}var Le,P,it=B(()=>{"use strict";ue();j();Le=Promise.resolve(),P=null});function K(r,e){if(typeof e!="object"||e===null)throw new v(r,"params","object",e);return e}function k(r,e,t){if(typeof t!="string")throw new v(r,e,"string",t);return t}function F(r,e,t){if(t!==void 0)return k(r,e,t)}function fe(r,e,t){if(typeof t!="number")throw new v(r,e,"number",t);return t}function Jt(r,e,t){if(typeof t!="boolean")throw new v(r,e,"boolean",t);return t}function ot(r,e,t){if(t!==void 0)return Jt(r,e,t)}function Ue(r,e,t){if(t instanceof ArrayBuffer)return t;if(t instanceof Uint8Array){let s=new ArrayBuffer(t.byteLength);return new Uint8Array(s).set(t),s}throw new v(r,e,"ArrayBuffer or Uint8Array",t)}function Be(r,e,t){if(t!==void 0){if(t instanceof Uint8Array)return t;if(t instanceof ArrayBuffer)return new Uint8Array(t);throw new v(r,e,"ArrayBuffer or Uint8Array",t)}}function H(r,e){if(typeof e!="object"||e===null)throw new v(r,"credentials","AuthCredentials object",e);let t=e;if(typeof t.method!="string")throw new v(r,"credentials.method","string",t.method);if(typeof t.userId!="string")throw new v(r,"credentials.userId","string",t.userId);switch(t.method){case"passphrase":if(typeof t.passphrase!="string")throw new v(r,"credentials.passphrase","string",t.passphrase);return{method:"passphrase",passphrase:t.passphrase,userId:t.userId};case"passkey-prf":if(!(t.prfOutput instanceof ArrayBuffer))throw new v(r,"credentials.prfOutput","ArrayBuffer",t.prfOutput);return{method:"passkey-prf",prfOutput:t.prfOutput,userId:t.userId};case"passkey-gate":return{method:"passkey-gate",userId:t.userId};default:throw new v(r,"credentials.method","passphrase | passkey-prf | passkey-gate",t.method)}}function _t(r,e){if(typeof e!="object"||e===null)throw new v(r,"payload","VAPIDPayload object",e);let t=e;return{aud:k(r,"payload.aud",t.aud),sub:k(r,"payload.sub",t.sub),exp:fe(r,"payload.exp",t.exp),jti:k(r,"payload.jti",t.jti)}}function dt(r){let e=K("setupPassphrase",r),t=Be("setupPassphrase","existingMS",e.existingMS);return{userId:k("setupPassphrase","userId",e.userId),passphrase:k("setupPassphrase","passphrase",e.passphrase),...t!==void 0&&{existingMS:t}}}function ut(r){let e=K("setupPasskeyPRF",r);if(!e.credentialId)throw new Error("credentialId required");let t=F("setupPasskeyPRF","rpId",e.rpId),s=Be("setupPasskeyPRF","existingMS",e.existingMS);return{userId:k("setupPasskeyPRF","userId",e.userId),credentialId:Ue("setupPasskeyPRF","credentialId",e.credentialId),prfOutput:Ue("setupPasskeyPRF","prfOutput",e.prfOutput),...t!==void 0&&{rpId:t},...s!==void 0&&{existingMS:s}}}function ct(r){let e=K("setupWithPopup",r);return{userId:k("setupWithPopup","userId",e.userId)}}function lt(r){let e=K("setupPasskeyGate",r),t=F("setupPasskeyGate","rpId",e.rpId),s=Be("setupPasskeyGate","existingMS",e.existingMS);return{userId:k("setupPasskeyGate","userId",e.userId),credentialId:Ue("setupPasskeyGate","credentialId",e.credentialId),...t!==void 0&&{rpId:t},...s!==void 0&&{existingMS:s}}}function pt(r){let e=K("addEnrollment",r),t=k("addEnrollment","method",e.method);if(t!=="passphrase"&&t!=="passkey-prf"&&t!=="passkey-gate")throw new v("addEnrollment","method","passphrase | passkey-prf | passkey-gate",t);return{userId:k("addEnrollment","userId",e.userId),method:t,credentials:H("addEnrollment",e.credentials),newCredentials:e.newCredentials}}function yt(r){let e=K("generateVAPID",r);return{credentials:H("generateVAPID",e.credentials)}}function ft(r){let e=K("regenerateVAPID",r);return{credentials:H("regenerateVAPID",e.credentials)}}function mt(r){let e=K("signJWT",r);return{kid:k("signJWT","kid",e.kid),payload:_t("signJWT",e.payload),credentials:H("signJWT",e.credentials)}}function wt(r){let e=K("createLease",r),t={userId:k("createLease","userId",e.userId),ttlHours:fe("createLease","ttlHours",e.ttlHours),credentials:H("createLease",e.credentials)},s=ot("createLease","autoExtend",e.autoExtend);return s!==void 0&&(t.autoExtend=s),t}function gt(r){let e=K("extendLeases",r);if(!Array.isArray(e.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof e.leaseIds}`);if(e.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let s={leaseIds:e.leaseIds.map((a,u)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${u} - expected non-empty string`);return a}),userId:k("extendLeases","userId",e.userId)},n=ot("extendLeases","requestAuth",e.requestAuth);return n!==void 0&&(s.requestAuth=n),e.credentials!==void 0&&(s.credentials=H("extendLeases",e.credentials)),s}function ht(r){let e=K("issueVAPIDJWT",r),t=F("issueVAPIDJWT","kid",e.kid),s=F("issueVAPIDJWT","jti",e.jti),n=e.exp!==void 0?fe("issueVAPIDJWT","exp",e.exp):void 0;return{leaseId:k("issueVAPIDJWT","leaseId",e.leaseId),...t!==void 0&&{kid:t},...s!==void 0&&{jti:s},...n!==void 0&&{exp:n}}}function kt(r){let e=K("issueVAPIDJWTs",r),t=F("issueVAPIDJWTs","kid",e.kid);return{leaseId:k("issueVAPIDJWTs","leaseId",e.leaseId),count:fe("issueVAPIDJWTs","count",e.count),...t!==void 0&&{kid:t}}}function bt(r){if(r==null)return{};let e=K("isSetup",r),t=F("isSetup","userId",e.userId);return t!==void 0?{userId:t}:{}}function vt(r){if(r==null)return{};let e=K("getEnrollments",r),t=F("getEnrollments","userId",e.userId);return t!==void 0?{userId:t}:{}}function Kt(r){let e=K("getPublicKey",r);return{kid:k("getPublicKey","kid",e.kid)}}function It(r){let e=K("getUserLeases",r);return{userId:k("getUserLeases","userId",e.userId)}}function Pt(r){let e=K("verifyLease",r),t={leaseId:k("verifyLease","leaseId",e.leaseId)};if("deleteIfInvalid"in e){if(typeof e.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");t.deleteIfInvalid=e.deleteIfInvalid}return t}function St(r){let e=K("removeEnrollment",r);return{enrollmentId:k("removeEnrollment","enrollmentId",e.enrollmentId),credentials:H("removeEnrollment",e.credentials)}}function Qt(r,e){if(typeof e!="object"||e===null)throw new v(r,"subscription","object",e);let t=e,s=k(r,"subscription.endpoint",t.endpoint);if(!s.startsWith("https://"))throw new Error(`${r}: subscription.endpoint must use HTTPS`);let n;try{n=new URL(s)}catch{throw new Error(`${r}: subscription.endpoint is not a valid URL`)}if(!zt.some(p=>n.hostname===p||n.hostname.endsWith(`.${p}`)))throw new Error(`${r}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${n.hostname}`);let u=t.expirationTime;if(u!==null&&typeof u!="number")throw new v(r,"subscription.expirationTime","number or null",u);if(typeof t.keys!="object"||t.keys===null)throw new v(r,"subscription.keys","object",t.keys);let o=t.keys,i=k(r,"subscription.keys.p256dh",o.p256dh),d=k(r,"subscription.keys.auth",o.auth);if(i.length===0)throw new Error(`${r}: subscription.keys.p256dh must be non-empty`);if(d.length===0)throw new Error(`${r}: subscription.keys.auth must be non-empty`);let c=k(r,"subscription.eid",t.eid);if(c.length===0)throw new Error(`${r}: subscription.eid must be non-empty`);let l=t.createdAt;if(typeof l!="number")throw new v(r,"subscription.createdAt","number",l);return{endpoint:s,expirationTime:u,keys:{p256dh:i,auth:d},eid:c,createdAt:l}}function At(r){let e=K("setPushSubscription",r);return{subscription:Qt("setPushSubscription",e.subscription)}}var v,zt,Et=B(()=>{"use strict";v=class extends Error{constructor(t,s,n,a){super(`RPC ${t}: Invalid ${s} - expected ${n}, got ${typeof a}`);this.method=t;this.param=s;this.expected=n;this.received=a;this.name="RPCValidationError"}};zt=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"]});function Xt(r){if(typeof r!="object"||r===null)return!1;let e=r;return typeof e.tokensIssued=="number"&&typeof e.lastResetAt=="number"}function Ct(r){return Xt(r)?r:{tokensIssued:0,lastResetAt:Date.now()}}var xt=B(()=>{"use strict"});var Bt={};Ft(Bt,{handleMessage:()=>Rt});async function Zt(r,e){let t=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:e,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},t,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function er(){let r=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),e=await crypto.subtle.exportKey("raw",r.publicKey),t=crypto.randomUUID(),s=crypto.getRandomValues(new Uint8Array(32)),n=crypto.getRandomValues(new Uint8Array(32));return me.set(t,{privateKey:r.privateKey,appSalt:s,hkdfSalt:n,createdAt:Date.now()}),setTimeout(()=>{me.delete(t)},10*60*1e3),{publicKey:m(e),keyId:t,appSalt:m(s.buffer),hkdfSalt:m(n.buffer)}}async function tr(r){let e=me.get(r.transportKeyId);if(!e)throw new Error("Transport key not found or expired");let t=M(r.ephemeralPublicKey),s=await crypto.subtle.importKey("raw",t,{name:"ECDH",namedCurve:"P-256"},!1,[]),n=await crypto.subtle.deriveBits({name:"ECDH",public:s},e.privateKey,256),a=await crypto.subtle.importKey("raw",n,"HKDF",!1,["deriveBits"]),u=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},a,256),o=await crypto.subtle.importKey("raw",u,{name:"AES-GCM",length:256},!1,["decrypt"]),i=M(r.iv),d=M(r.encryptedCredentials),c=await crypto.subtle.decrypt({name:"AES-GCM",iv:i,tagLength:128},o,d),l=JSON.parse(new TextDecoder().decode(c)),p;if(r.method==="passphrase"){let y=l;p=await Mt({userId:r.userId,passphrase:y.passphrase},r.requestId)}else if(r.method==="passkey-prf"){let y=l;p=await Dt({userId:r.userId,credentialId:M(y.credentialId),prfOutput:M(y.prfOutput),...y.rpId!==void 0&&{rpId:y.rpId},appSalt:e.appSalt,hkdfSalt:e.hkdfSalt},r.requestId)}else if(r.method==="passkey-gate"){let y=l;p=await Lt({userId:r.userId,credentialId:M(y.credentialId),...y.rpId!==void 0&&{rpId:y.rpId}},r.requestId)}else{let y=r.method;throw new Error(`Unknown method: ${String(y)}`)}return me.delete(r.transportKeyId),p}async function rr(r,e){let t=await er(),s=new URL("https://kms.ats.run/");s.searchParams.set("mode","setup");let a=await new Promise((o,i)=>{let d=setTimeout(()=>{i(new Error("Setup with popup timeout"))},3e5);re.set(e,{resolve:o,reject:i,timeout:d}),self.postMessage({type:"worker:setup-with-popup",requestId:e,userId:r.userId,popupURL:s.toString(),transportKey:t.publicKey,transportKeyId:t.keyId,appSalt:t.appSalt,hkdfSalt:t.hkdfSalt})});return await tr({method:a.method,transportKeyId:a.transportKeyId,ephemeralPublicKey:a.ephemeralPublicKey,iv:a.iv,encryptedCredentials:a.encryptedCredentials,userId:a.userId,requestId:e})}async function Rt(r){let{id:e,method:t,params:s}=r;try{let n;switch(t){case"setupWithPopup":n=await rr(ct(s),e);break;case"setupPassphrase":n=await Mt(dt(s),e);break;case"setupPasskeyPRF":n=await Dt(ut(s),e);break;case"setupPasskeyGate":n=await Lt(lt(s),e);break;case"addEnrollment":n=await sr(pt(s),e);break;case"generateVAPID":n=await nr(yt(s),e);break;case"regenerateVAPID":n=await ar(ft(s),e);break;case"signJWT":n=await ir(mt(s),e);break;case"createLease":n=await or(wt(s),e);break;case"extendLeases":n=await dr(gt(s),e);break;case"issueVAPIDJWT":n=await Ut(ht(s),e);break;case"issueVAPIDJWTs":n=await ur(kt(s),e);break;case"isSetup":n=await cr(bt(s));break;case"getEnrollments":n=await lr(vt(s));break;case"verifyAuditChain":n=await pr();break;case"getAuditLog":n=await yr();break;case"getPublicKey":n=await fr(Kt(s));break;case"getAuditPublicKey":n=await mr();break;case"getUserLeases":n=await wr(It(s));break;case"verifyLease":n=await gr(Pt(s));break;case"getVAPIDKid":n=await hr();break;case"resetKMS":n=await Kr();break;case"removeEnrollment":n=await Ir(St(s),e);break;case"setPushSubscription":n=await kr(At(s));break;case"removePushSubscription":n=await br();break;case"getPushSubscription":n=await vr();break;default:throw new Error(`Unknown RPC method: ${t}`)}return{id:e,result:n}}catch(n){return{id:e,error:C(n)}}}async function Mt(r,e){let{userId:t,passphrase:s,existingMS:n}=r;if(!s||s.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await Se(t,s,n);if(!a.success)throw new Error(a.error);let u=await ee(a.ms);await D(u);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let i=o,d=await crypto.subtle.exportKey("raw",i.publicKey),c=$(new Uint8Array(d)),l=await N(c);return await L(i.privateKey,u,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),a.ms.fill(0),await A({op:"setup-passphrase",kid:"",requestId:e,userId:t,details:{method:"passphrase",vapidKid:l}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:m(d),vapidKid:l}}async function Dt(r,e){let{userId:t,credentialId:s,prfOutput:n,rpId:a="",existingMS:u,appSalt:o,hkdfSalt:i}=r;if(!s||s.byteLength===0)throw new Error("credentialId required");if(!n||n.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let d=await Ae(t,s,n,u,a,o,i);if(!d.success)throw new Error(d.error);let c=await ee(d.ms);await D(c);let l=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in l)||!("publicKey"in l))throw new Error("Failed to generate ECDSA keypair");let p=l,y=await crypto.subtle.exportKey("raw",p.publicKey),f=$(new Uint8Array(y)),h=await N(f);return await L(p.privateKey,c,h,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:y}),d.ms.fill(0),await A({op:"setup-passkey-prf",kid:"",requestId:e,userId:t,details:{method:"passkey-prf",credentialId:m(s),vapidKid:h}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:m(y),vapidKid:h}}async function Lt(r,e){let{userId:t,credentialId:s,rpId:n="",existingMS:a}=r;if(!s||s.byteLength===0)throw new Error("credentialId required");let u=await Ee(t,s,a,n);if(!u.success)throw new Error(u.error);let o=await ee(u.ms);await D(o);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let d=i,c=await crypto.subtle.exportKey("raw",d.publicKey),l=$(new Uint8Array(c)),p=await N(l);return await L(d.privateKey,o,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),u.ms.fill(0),await A({op:"setup-passkey-gate",kid:"",requestId:e,userId:t,details:{method:"passkey-gate",credentialId:m(s),vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:m(c),vapidKid:p}}async function sr(r,e){let{userId:t,method:s,credentials:n,newCredentials:a}=r;function u(c,l){if(typeof l!="object"||l===null)throw new Error(`newCredentials must be an object for ${c}`);return l}let o=u(s,a);await V(n,async(c,l)=>(await D(c),!0));let i;if(n.method==="passphrase"){let c=await Ce(t,n.passphrase);if(!c.success)throw new Error(c.error);i=c.ms}else if(n.method==="passkey-prf"){let c=await xe(t,n.prfOutput);if(!c.success)throw new Error(c.error);i=c.ms}else if(n.method==="passkey-gate"){let c=await Re(t);if(!c.success)throw new Error(c.error);i=c.ms}else throw new Error("Invalid credentials method");let d;if(s==="passphrase"){if(typeof o.passphrase!="string")throw new Error("passphrase must be a string");d=await Se(t,o.passphrase,i)}else if(s==="passkey-prf"){if(!(o.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");if(!(o.prfOutput instanceof ArrayBuffer))throw new Error("prfOutput must be an ArrayBuffer");let c=typeof o.rpId=="string"?o.rpId:"";d=await Ae(t,o.credentialId,o.prfOutput,i,c)}else if(s==="passkey-gate"){if(!(o.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");let c=typeof o.rpId=="string"?o.rpId:"";d=await Ee(t,o.credentialId,i,c)}else{let c=s;throw new Error(`Unknown enrollment method: ${String(c)}`)}if(i.fill(0),!d.success)throw new Error(d.error);return await A({op:"add-enrollment",kid:"",requestId:e,userId:n.userId,details:{method:s,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${s}:v2`}}async function nr(r,e){let{credentials:t}=r,s=await V(t,async(n,a)=>{await D(n);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let o=u,i=await crypto.subtle.exportKey("raw",o.publicKey),d=$(new Uint8Array(i)),c=await N(d);return await L(o.privateKey,n,c,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:i}),{kid:c,publicKey:m(i)}});return await A({op:"generate",kid:s.result.kid,requestId:e,userId:t.userId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),s.result}async function ar(r,e){let{credentials:t}=r,s=await V(t,async(n,a)=>{await D(n);let o=(await x()).filter(y=>y.purpose==="vapid");for(let y of o)await je(y.kid);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let d=i,c=await crypto.subtle.exportKey("raw",d.publicKey),l=$(new Uint8Array(c)),p=await N(l);return await L(d.privateKey,n,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),{kid:p,publicKey:m(c),oldKids:o.map(y=>y.kid)}});return await A({op:"regenerate-vapid",kid:s.result.kid,requestId:e,userId:t.userId,unlockTime:s.unlockTime,lockTime:s.lockTime,duration:s.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:s.result.oldKids,deletedCount:s.result.oldKids.length}}),{kid:s.result.kid,publicKey:s.result.publicKey}}async function ir(r,e){let{kid:t,payload:s,credentials:n}=r;if(!s.aud||!s.sub||!s.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(s.exp<=a)throw new Error("JWT exp must be in the future");if(s.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let u=await V(n,async(o,i)=>{await D(o);let d=await Ne(t,o,{name:"ECDSA",namedCurve:"P-256"},["sign"]),c={typ:"JWT",alg:"ES256",kid:t},l=m(new TextEncoder().encode(JSON.stringify(c)).buffer),p=m(new TextEncoder().encode(JSON.stringify(s)).buffer),y=new TextEncoder().encode(`${l}.${p}`),f=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},d,y),h=m(f);return{jwt:`${l}.${p}.${h}`}});return await A({op:"sign",kid:t,requestId:e,userId:n.userId,unlockTime:u.unlockTime,lockTime:u.lockTime,duration:u.duration,details:{algorithm:"ES256",aud:s.aud,exp:s.exp,jti:s.jti}}),u.result}async function or(r,e){let{userId:t,ttlHours:s,credentials:n,autoExtend:a}=r;if(s<=0||s>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let o=(await x()).filter(w=>w.purpose==="vapid");if(o.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");o.sort((w,b)=>b.createdAt-w.createdAt);let i=o[0];if(!i)throw new Error("VAPID key record not found after filtering");let d=i.kid,c=`lease-${crypto.randomUUID()}`,l=crypto.getRandomValues(new Uint8Array(32)),p=Date.now(),y=p+s*3600*1e3,f=await V(n,async(w,b)=>{await D(w);let{delegationCert:S}=await et(c,y),E=await Zt(b,l),U=await T(d);if(!U)throw new Error(`No wrapped key with id: ${d}`);let z=new Uint8Array(U.iv),se=U.aad,we=await crypto.subtle.unwrapKey("pkcs8",U.wrappedKey,w,{name:"AES-GCM",iv:z,additionalData:se},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),ne=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",we,E,{name:"AES-GCM",iv:ne}),iv:ne,sessionKEK:E,lakDelegationCert:S}});await R(`sessionkek:${c}`,f.result.sessionKEK),Te.set(c,f.result.sessionKEK);let h={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},g={leaseId:c,userId:t,ttlHours:s,createdAt:p,exp:y,autoExtend:a??!0,quotas:h,wrappedLeaseKey:f.result.wrappedLeaseKey,wrappedLeaseKeyIV:f.result.iv.buffer.slice(f.result.iv.byteOffset,f.result.iv.byteOffset+f.result.iv.byteLength),leaseSalt:l.buffer.slice(l.byteOffset,l.byteOffset+l.byteLength),kid:d,lakDelegationCert:f.result.lakDelegationCert};return await ve(g),await R(`quota:${c}`,{leaseId:c,tokensIssued:0,lastResetAt:p,perEndpoint:{}}),await A({op:"create-lease",kid:d,requestId:e,userId:t,details:{action:"create-lease",leaseId:c,userId:t,ttlHours:s,autoExtend:g.autoExtend}}),{leaseId:c,exp:y,quotas:h,autoExtend:g.autoExtend??!0}}async function dr(r,e){let{leaseIds:t,credentials:s,requestAuth:n}=r,a=[],u=0,o=0,i=0,d=!1;if(s)try{await V(s,async(c,l)=>(d=!0,Promise.resolve()))}catch(c){for(let l of t){let p=await X(l);p&&p.autoExtend===!1&&(a.push({leaseId:l,status:"skipped",reason:`Authentication failed: ${C(c)}`}),o++)}if(o===t.length)return{results:a,extended:u,skipped:o,failed:i}}for(let c of t)try{let l=await X(c);if(!l){a.push({leaseId:c,status:"skipped",reason:`Lease not found: ${c}`}),o++;continue}if(l.autoExtend===!1&&!n){a.push({leaseId:c,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),o++;continue}if(l.autoExtend===!1&&n&&!d){a.push({leaseId:c,status:"skipped",reason:"Authentication required but credentials not valid"}),o++;continue}let y=(await x()).filter(S=>S.purpose==="vapid");if(y.length===0){a.push({leaseId:c,status:"skipped",reason:"No VAPID key found"}),o++;continue}y.sort((S,E)=>E.createdAt-S.createdAt);let h=y[0].kid;if(l.kid!==h){a.push({leaseId:c,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${l.kid}, current kid: ${h})`}),o++;continue}let g=Date.now(),w=g+30*24*60*60*1e3,b={...l,exp:w,createdAt:g};await ve(b),await A({op:"extend-lease",kid:b.kid,requestId:e,userId:b.userId,details:{action:"extend-lease",leaseId:b.leaseId,userId:b.userId,newExp:w,autoExtend:b.autoExtend}}),a.push({leaseId:c,status:"extended",result:{leaseId:b.leaseId,exp:b.exp,iat:b.createdAt,kid:b.kid,autoExtend:b.autoExtend??!1}}),u++}catch(l){a.push({leaseId:c,status:"skipped",reason:`Error extending lease: ${C(l)}`}),i++}return{results:a,extended:u,skipped:o,failed:i}}async function Ut(r,e){let{leaseId:t}=r,{kid:s}=r;if(!s){let Q=(await x()).filter(Ot=>Ot.purpose==="vapid");if(Q.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(Q.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let Oe=Q[0];if(!Oe)throw new Error("No VAPID key found after filtering");s=Oe.kid}let n=await X(t);if(!n)throw new Error(`Lease not found: ${t}`);if(Date.now()>=n.exp)throw new Error("Lease expired");let u=(await x()).filter(q=>q.purpose==="vapid");if(u.length===0)throw new Error("No VAPID key available");u.sort((q,Q)=>Q.createdAt-q.createdAt);let o=u[0]?.kid;if(!o)throw new Error("Failed to determine current VAPID key");if(n.kid!==o)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await tt(t,n.lakDelegationCert);let i=await Ie();if(!i)throw new Error("No push subscription found. Call setPushSubscription() first.");let d=await I(`quota:${t}`),c=Ct(d),l=Date.now()-3600*1e3;if(c.lastResetAt<l&&(c.tokensIssued=0,c.lastResetAt=Date.now()),c.tokensIssued>=n.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");c.tokensIssued++,await R(`quota:${t}`,c);let p=r.jti??crypto.randomUUID(),y=r.exp??Math.floor(Date.now()/1e3)+900,f=new URL(i.endpoint),h=`${f.protocol}//${f.host}`,g={aud:h,sub:"mailto:kms@example.com",exp:y,jti:p,uid:n.userId,eid:i.eid},w=Te.get(t);if(!w){let q=await I(`sessionkek:${t}`);if(!q)throw new Error(`SessionKEK not found for lease: ${t}`);w=q,Te.set(t,w)}let b=n.wrappedLeaseKey,S=new Uint8Array(n.wrappedLeaseKeyIV),E=await crypto.subtle.unwrapKey("pkcs8",b,w,{name:"AES-GCM",iv:S},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),U={typ:"JWT",alg:"ES256",kid:n.kid},z=m(new TextEncoder().encode(JSON.stringify(U)).buffer),se=m(new TextEncoder().encode(JSON.stringify(g)).buffer),we=new TextEncoder().encode(`${z}.${se}`),ne=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},E,we),qe=m(ne),Vt=`${z}.${se}.${qe}`,qt=await A({op:"sign",kid:n.kid,requestId:e,userId:n.userId,leaseId:t,details:{action:"issue-lease-jwt",jti:p,aud:h,eid:i.eid}});return{jwt:Vt,jti:p,exp:y,auditEntry:qt}}async function ur(r,e){let{leaseId:t,count:s,kid:n}=r;if(!Number.isInteger(s)||s<1||s>10)throw new Error("count must be an integer between 1 and 10");let a=900,u=Math.floor(a*.6),o=Math.floor(Date.now()/1e3),i=[];for(let d=0;d<s;d++){let c=crypto.randomUUID(),l=o+a+d*u,p=await Ut({leaseId:t,...n!==void 0&&{kid:n},jti:c,exp:l},`${e}-${d}`);i.push(p)}return i}async function cr(r){let e=r?.userId??"default",t=await Ye(e),s=[];await Me(e)&&s.push("passphrase"),await De(e)&&s.push("passkey");let n;return t&&r?.userId&&(n=await Ke(r.userId)),{isSetup:t,methods:s,...n!==void 0&&{leases:n}}}async function lr(r){let e=r?.userId??"default",t=[];if(await Me(e)&&t.push("enrollment:passphrase:v2"),await De(e)){let s=await I(`enrollment:passkey-prf:v2:${e}`),n=await I(`enrollment:passkey-gate:v2:${e}`);s&&t.push("enrollment:passkey-prf:v2"),n&&t.push("enrollment:passkey-gate:v2")}return{enrollments:t}}async function pr(){return await st()}async function yr(){return{entries:await _()}}async function fr(r){let{kid:e}=r,t=await T(e);if(!t||!t.publicKeyRaw)throw new Error(`Public key not found for kid: ${e}`);return{publicKey:m(t.publicKeyRaw)}}async function mr(){return await nt()}async function wr(r){let{userId:e}=r;return{leases:await Ke(e)}}async function gr(r){let{leaseId:e,deleteIfInvalid:t=!1}=r,s=await X(e);if(!s)return{leaseId:e,valid:!1,reason:"not-found",kid:""};if(Date.now()>=s.exp)return t&&await Z(e),{leaseId:e,valid:!1,reason:"expired",kid:s.kid};let a=(await x()).filter(i=>i.purpose==="vapid");if(a.length===0)return t&&await Z(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:s.kid};a.sort((i,d)=>d.createdAt-i.createdAt);let u=a[0];if(!u)return t&&await Z(e),{leaseId:e,valid:!1,reason:"no-vapid-key",kid:s.kid};let o=u.kid;return s.kid!==o?(t&&await Z(e),{leaseId:e,valid:!1,reason:"wrong-key",kid:s.kid}):{leaseId:e,valid:!0,kid:s.kid}}async function hr(){let e=(await x()).filter(s=>s.purpose==="vapid");if(e.length===0)throw new Error("No VAPID key found");if(e.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let t=e[0];if(!t)throw new Error("No VAPID key found after filtering");return{kid:t.kid}}async function kr(r){return await ze(r.subscription),{success:!0}}async function br(){return await Qe(),{success:!0}}async function vr(){return{subscription:await Ie()}}async function Kr(){$e();let r=indexedDB.deleteDatabase("kms-v2");return await new Promise((e,t)=>{r.onsuccess=()=>e(),r.onerror=()=>t(new Error(r.error?.message??"Failed to delete database"))}),await oe(),at(),{success:!0}}async function Ir(r,e){let{enrollmentId:t,credentials:s}=r;return await V(s,async(n,a)=>(await D(n),!0)),await Ge(t),await A({op:"reset",kid:"",requestId:e,userId:s.userId,details:{action:"remove-enrollment",enrollmentId:t}}),{success:!0}}var Te,me,re,Tt=B(()=>{"use strict";Xe();it();ue();j();he();Et();xt();Te=new Map,me=new Map,re=new Map;self.addEventListener("message",r=>{let e=r.data;if("type"in e&&e.type==="worker:popup-credentials"){let t=e.requestId;if(t&&e.credentials){let s=re.get(t);s&&(clearTimeout(s.timeout),re.delete(t),s.resolve(e.credentials))}return}if("type"in e&&e.type==="worker:popup-error"){let t=e.requestId;if(t){let s=re.get(t);s&&(clearTimeout(s.timeout),re.delete(t),s.reject(new Error(e.reason||"Popup setup failed")))}return}(async()=>{let t=r.data,s=await Rt(t);self.postMessage(s)})().catch(t=>{console.error("[KMS Worker] Message handling failed:",t);let s=r.data;self.postMessage({id:s?.id||"unknown",error:t instanceof Error?t.message:"Unknown error"})})});(async()=>{try{await oe(),await Ze(),await rt(),(await _()).length===0&&await A({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(r){console.error("[KMS Worker] Initialization failed:",r)}})()});he();function Ht(r){if(typeof r!="object"||r===null)return!1;let e=r;if("enabled"in e&&typeof e.enabled!="boolean")return!1;if("results"in e){if(typeof e.results!="object"||e.results===null)return!1;let t=e.results;if("first"in t&&!(t.first instanceof ArrayBuffer)&&!(t.first instanceof Uint8Array)||"second"in t&&!(t.second instanceof ArrayBuffer)&&!(t.second instanceof Uint8Array))return!1}return!0}function O(r){let t=r.getClientExtensionResults().prf;if(t){if(!Ht(t)){console.warn("[WebAuthn] Invalid PRF extension result structure:",t);return}return t}}j();var Ve=class{worker=null;parentOrigin;workerUrl;isInitialized=!1;pendingUnlockRequest=null;isStatelessPopup=!1;transportPublicKey=null;transportKeyId=null;appSalt=null;popupState=null;messagePort=null;constructor(e){this.parentOrigin=e.parentOrigin,this.workerUrl=e.workerUrl??"./kms-worker.1c0afa3e.js"}async init(){if(this.isInitialized)throw new Error("KMSClient already initialized");try{let e=new URLSearchParams(window.location.search);this.transportPublicKey=e.get("transportKey"),this.transportKeyId=e.get("keyId"),this.appSalt=e.get("appSalt"),this.popupState=e.get("state");let t=e.get("parentOrigin");this.isStatelessPopup=!!(this.transportPublicKey&&this.transportKeyId),console.log("[KMS Client] Popup detection:",{url:window.location.href,transportKey:this.transportPublicKey?.slice(0,20)+"...",keyId:this.transportKeyId,state:this.popupState,parentOrigin:t,isStatelessPopup:this.isStatelessPopup}),this.isStatelessPopup&&console.log("[KMS Client] Running in stateless popup mode"),window.addEventListener("message",this.handleParentMessage.bind(this)),this.worker=new Worker(this.workerUrl,{type:"module",name:"kms-worker-v2"}),this.worker.addEventListener("message",this.handleWorkerMessage.bind(this)),this.worker.addEventListener("error",this.handleWorkerError.bind(this)),this.isInitialized=!0,this.isStatelessPopup?console.log("[KMS Client] Stateless popup: Ready for two-phase handshake (hello → ready → connect)"):this.sendToParent({type:"kms:ready"})}catch(e){throw console.error("[KMS Client] Initialization failed:",e),new Error(ge("Failed to initialize KMS client",e))}}handleParentMessage(e){if(e.origin!==this.parentOrigin){console.warn("[KMS Client] Rejected message from invalid origin:",{expected:this.parentOrigin,received:e.origin});return}if(e.data?.type==="kms:hello"&&this.isStatelessPopup){if(console.log("[KMS Client] Received kms:hello message"),e.data.state!==this.popupState){console.error("[KMS Client] State mismatch in kms:hello:",{expected:this.popupState,received:e.data.state});return}console.log("[KMS Client] Replying kms:ready to parent"),e.source&&e.source.postMessage({type:"kms:ready",state:this.popupState},e.origin);return}if(e.data?.type==="kms:connect"&&this.isStatelessPopup){if(console.log("[KMS Client] Received kms:connect message with port"),e.data.state!==this.popupState){console.error("[KMS Client] State mismatch in kms:connect:",{expected:this.popupState,received:e.data.state});return}if(!e.ports||e.ports.length===0){console.error("[KMS Client] No MessagePort transferred in kms:connect");return}this.messagePort=e.ports[0]||null,console.log("[KMS Client] MessagePort established successfully"),this.messagePort&&(this.messagePort.postMessage({type:"kms:connected"}),console.log("[KMS Client] Sent kms:connected confirmation to parent"));return}let t=e.data;if(t?.type==="kms:popup-opened"){let a=t.requestId;this.worker?.postMessage({type:"worker:popup-opened",requestId:a});return}if(t?.type==="kms:popup-blocked"){let a=t.requestId,u=t.reason||"Popup was blocked";this.worker?.postMessage({type:"worker:popup-blocked",requestId:a,reason:u});return}if(t?.type==="kms:popup-ready")return;if(!this.isInitialized||!this.worker){console.error("[KMS Client] Received message before initialization");return}let s=e.data,n=["createLease","generateVAPID","signJWT","regenerateVAPID","addEnrollment"];if(s?.method&&n.includes(s.method)){this.showUnlockModal(s);return}if(s?.method==="extendLeases"&&s.params&&typeof s.params=="object"&&"requestAuth"in s.params&&s.params.requestAuth===!0){this.showUnlockModal(s);return}try{this.worker.postMessage(e.data)}catch(a){console.error("[KMS Client] Failed to forward message to Worker:",a),s?.id&&this.sendToParent({id:s.id,error:ge("Failed to forward message",a)})}}handleWorkerMessage(e){try{let t=e.data;if("type"in t&&t.type==="worker:setup-with-popup"){this.handleSetupWithPopup({requestId:t.requestId,userId:t.userId,popupURL:t.popupURL,transportKey:t.transportKey,transportKeyId:t.transportKeyId,appSalt:t.appSalt,hkdfSalt:t.hkdfSalt});return}if("type"in t&&t.type==="worker:request-popup-from-parent"){this.handleWorkerPopupRequest(t.url,t.requestId);return}this.sendToParent(t)}catch(t){console.error("[KMS Client] Failed to forward message to parent:",t)}}handleWorkerPopupRequest(e,t){if(!this.parentOrigin){this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:"Parent origin not configured"});return}let s=window.parent&&window.parent!==window?window.parent:null;if(!s){this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:"No parent window available"});return}try{s.postMessage({type:"kms:request-popup",url:e,requestId:t},this.parentOrigin)}catch(n){console.error("[KMS Client] Failed to send popup request to parent:",n),this.worker?.postMessage({type:"worker:popup-blocked",requestId:t,reason:n instanceof Error?n.message:"Unknown error"})}}async handleSetupWithPopup(e){try{if(!this.parentOrigin)throw new Error("Parent origin not configured");let t=window.parent&&window.parent!==window?window.parent:null;if(!t)throw new Error("No parent window available");let s=new URL(e.popupURL);s.searchParams.set("parentOrigin",this.parentOrigin),t.postMessage({type:"kms:request-popup",url:s.toString(),requestId:e.requestId},this.parentOrigin);let a=await new Promise((i,d)=>{let c=setTimeout(()=>{d(new Error("Popup ready timeout"))},3e4),l=p=>{let y=p.data;y?.type==="kms:popup-ready"&&y.requestId===e.requestId&&(p.ports&&p.ports.length>0&&p.ports[0]?(clearTimeout(c),window.removeEventListener("message",l),i(p.ports[0])):(clearTimeout(c),window.removeEventListener("message",l),d(new Error("No MessagePort received with popup-ready"))))};window.addEventListener("message",l)}),u=new Promise((i,d)=>{let c=setTimeout(()=>{d(new Error("Credentials timeout"))},3e5);a.onmessage=l=>{let p=l.data;p?.type==="popup:credentials"?(clearTimeout(c),a.close(),i({method:p.method,transportKeyId:p.transportKeyId,userId:p.userId,ephemeralPublicKey:p.ephemeralPublicKey,iv:p.iv,encryptedCredentials:p.encryptedCredentials})):p?.type==="popup:error"?(clearTimeout(c),a.close(),d(new Error(p.reason||"Popup error"))):p?.type==="popup:connected"&&console.log("[KMS Client] Popup connected, waiting for credentials...")}});a.postMessage({type:"kms:connect",transportKey:e.transportKey,transportKeyId:e.transportKeyId,appSalt:e.appSalt,hkdfSalt:e.hkdfSalt,userId:e.userId});let o=await u;this.worker?.postMessage({type:"worker:popup-credentials",requestId:e.requestId,credentials:o})}catch(t){console.error("[KMS Client] Setup with popup failed:",t),this.worker?.postMessage({type:"worker:popup-error",requestId:e.requestId,reason:t instanceof Error?t.message:"Unknown error"})}}handleWorkerError(e){console.error("[KMS Client] Worker error:",{message:e.message,filename:e.filename,lineno:e.lineno,colno:e.colno})}sendToParent(e){let t=window.opener&&window.opener!==null&&window.opener!==window,s=window.parent&&window.parent!==window,n=t?window.opener:s?window.parent:null;if(!n){console.error("[KMS Client] No parent/opener window available",{hasValidOpener:t,hasValidParent:s});return}try{n.postMessage(e,this.parentOrigin)}catch(a){console.error("[KMS Client] Failed to send message to parent/opener:",a)}}async getEnrollments(e){return new Promise((t,s)=>{let n=`get-enrollments-${Date.now()}`,a={id:n,method:"getEnrollments",params:{userId:e}},u=o=>{let i=o.data;if(i.id===n)if(this.worker?.removeEventListener("message",u),i.error){let d=typeof i.error=="string"?i.error:i.error.message;s(new Error(d))}else t(i.result?.enrollments||[])};this.worker?.addEventListener("message",u),this.worker?.postMessage(a),setTimeout(()=>{this.worker?.removeEventListener("message",u),s(new Error("getEnrollments timeout"))},5e3)})}showUnlockModal(e){this.pendingUnlockRequest=e;let t=document.getElementById("unlock-modal"),s=document.getElementById("kms-webauthn-btn"),n=document.getElementById("kms-passphrase-input"),a=document.getElementById("kms-passphrase-btn");if(!t||!s||!n||!a){console.error("[KMS Client] Modal elements not found"),e?this.sendToParent({id:e.id,error:"Modal UI not found"}):this.sendToParent({type:"kms:unlock-error",error:"Modal UI not found"});return}t.classList.remove("hidden"),s.onclick=()=>this.handleWebAuthnUnlock(),a.onclick=()=>this.handlePassphraseUnlock(n.value),n.onkeydown=u=>{u.key==="Enter"&&this.handlePassphraseUnlock(n.value).catch(o=>{console.error("[KMS Client] Passphrase unlock failed:",o),this.showError(o instanceof Error?o.message:"Unknown error")})},this.hideError()}async handleWebAuthnUnlock(){this.showLoading(),this.hideError();try{let e=localStorage.getItem("kms:appSalt"),t;e?t=new Uint8Array(e.split(",").map(p=>parseInt(p,10))):t=crypto.getRandomValues(new Uint8Array(32));let s=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:t}}}}});if(!s)throw new Error("No credential returned");let a=O(s)?.results?.first;if(!this.pendingUnlockRequest)throw new Error("No pending operation");let u=this.pendingUnlockRequest.params?.userId;if(!u)throw new Error("userId not found in request params");let o=await this.getEnrollments(u),i=o.includes("enrollment:passkey-prf:v2"),d=o.includes("enrollment:passkey-gate:v2"),c;if(i&&a)c={method:"passkey-prf",prfOutput:a,userId:u};else if(d)c={method:"passkey-gate",userId:u};else throw new Error("No passkey enrollment found for this user");let l={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:c}};this.setupUnlockResponseListener(l),this.worker?.postMessage(l)}catch(e){this.hideLoading(),this.showError(`WebAuthn failed: ${C(e)}`),console.error("[KMS Client] WebAuthn unlock failed:",e)}}async handlePassphraseUnlock(e){if(!e||e.trim().length===0){this.showError("Please enter a passphrase");return}this.showLoading(),this.hideError();try{if(!this.pendingUnlockRequest)throw new Error("No pending operation");let t=this.pendingUnlockRequest.params?.userId;if(!t)throw new Error("userId not found in request params");let s={...this.pendingUnlockRequest,params:{...this.pendingUnlockRequest.params,credentials:{method:"passphrase",passphrase:e,userId:t}}};this.setupUnlockResponseListener(s),this.worker?.postMessage(s)}catch(t){console.error("[KMS Client] Passphrase unlock failed:",t),this.hideLoading(),this.showError(`Unlock failed: ${C(t)}`)}}setupUnlockResponseListener(e){let t=s=>{let n=s.data;n.id===e.id&&(this.worker?.removeEventListener("message",t),this.hideModal(),this.sendToParent(n),this.pendingUnlockRequest=null)};this.worker?.addEventListener("message",t)}showError(e){let t=document.getElementById("kms-modal-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideError(){let e=document.getElementById("kms-modal-error");e&&e.classList.add("hidden")}showLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.remove("hidden")}hideLoading(){let e=document.getElementById("kms-modal-loading");e&&e.classList.add("hidden")}hideModal(){let e=document.getElementById("unlock-modal");e&&e.classList.add("hidden");let t=document.getElementById("kms-passphrase-input");t&&(t.value=""),this.hideLoading(),this.hideError()}async promptUnlockForEnrollment(e,t){this.hideSetupSuccess();let s=document.querySelector("#setup-modal .kms-modal-body");if(s){s.querySelectorAll(".kms-auth-option, .kms-divider").forEach(i=>i.classList.add("hidden"));let a=document.createElement("div");a.id="multi-enrollment-unlock",a.className="multi-enrollment-instructions",a.innerHTML=`
        <p class="multi-enrollment-title">
          🔒 Multi-Enrollment Authentication Required
        </p>
        <p class="multi-enrollment-description">
          You already have an authentication method set up. Please authenticate with your existing method to add a new one.
        </p>
      `,s.insertBefore(a,s.firstChild);let u=e.some(i=>i.includes("passphrase")),o=e.some(i=>i.includes("passkey"));if(u){let i=document.createElement("div");i.className="kms-auth-option",i.id="temp-passphrase-unlock",i.innerHTML=`
          <label for="temp-passphrase-input" class="kms-input-label">Passphrase</label>
          <input
            type="password"
            id="temp-passphrase-input"
            class="kms-input"
            placeholder="Enter your passphrase"
            autocomplete="off"
          />
          <button id="temp-passphrase-btn" class="kms-auth-btn kms-secondary">
            <span class="kms-auth-icon">🔐</span>
            <span class="kms-auth-label">Unlock with Passphrase</span>
          </button>
        `,s.appendChild(i)}if(o){let i=document.createElement("div");i.className="kms-auth-option",i.id="temp-passkey-unlock",i.innerHTML=`
          <button id="temp-passkey-btn" class="kms-auth-btn kms-primary">
            <span class="kms-auth-icon">🔑</span>
            <span class="kms-auth-label">Unlock with Passkey</span>
          </button>
        `,s.appendChild(i)}}return new Promise(n=>{let a=()=>{document.getElementById("multi-enrollment-unlock")?.remove(),document.getElementById("temp-passphrase-unlock")?.remove(),document.getElementById("temp-passkey-unlock")?.remove(),s?.querySelectorAll(".kms-auth-option, .kms-divider")?.forEach(c=>c.classList.remove("hidden"))},u=document.getElementById("temp-passphrase-btn"),o=document.getElementById("temp-passphrase-input");if(u&&o){let d=()=>{let c=o.value;if(!c){this.showSetupError("Please enter your passphrase");return}a(),n({method:"passphrase",passphrase:c,userId:t})};u.onclick=d,o.onkeydown=c=>{c.key==="Enter"&&d()}}let i=document.getElementById("temp-passkey-btn");i&&(i.onclick=async()=>{try{let d=localStorage.getItem("kms:appSalt"),c;d?c=new Uint8Array(d.split(",").map(w=>parseInt(w,10))):c=crypto.getRandomValues(new Uint8Array(32));let l=await navigator.credentials.get({publicKey:{challenge:new Uint8Array(32),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:c}}}}});if(!l)throw new Error("No credential returned");let y=O(l)?.results?.first,f=e.some(w=>w.includes("prf")),h=e.some(w=>w.includes("gate")),g;if(f&&y)g={method:"passkey-prf",prfOutput:y,userId:t};else if(h)g={method:"passkey-gate",userId:t};else throw new Error("Unable to determine passkey method");a(),n(g)}catch(d){this.showSetupError(`Passkey unlock failed: ${C(d)}`)}})})}setupSetupModalHandlers(){let e=document.getElementById("kms-setup-webauthn-btn"),t=document.getElementById("kms-setup-passphrase-input"),s=document.getElementById("kms-setup-passphrase-confirm-input"),n=document.getElementById("kms-setup-passphrase-btn"),a=document.getElementById("kms-passphrase-char-count");if(!e||!t||!s||!n){console.error("[KMS Client] Setup modal elements not found");return}e.onclick=()=>this.handleWebAuthnSetup();let u=document.getElementById("kms-passphrase-match-feedback"),o=()=>{let d=t.value,c=s.value;if(u){if(c.length===0){u.classList.add("hidden");return}u.classList.remove("hidden"),d===c?(u.textContent="✓ Passphrases match",u.classList.remove("error"),u.classList.add("success")):(u.textContent="✗ Passphrases do not match",u.classList.remove("success"),u.classList.add("error"))}};t.oninput=()=>{let d=t.value.length,c=12;a&&(a.textContent=`${d} / ${c} characters`,d<c?(a.classList.remove("success"),a.classList.add("error")):(a.classList.remove("error"),a.classList.add("success"))),o()},s.oninput=o,n.onclick=()=>this.handlePassphraseSetup(t.value,s.value);let i=()=>{this.handlePassphraseSetup(t.value,s.value).catch(d=>{console.error("[KMS Client] Passphrase setup failed:",d),this.showSetupError(d instanceof Error?d.message:"Unknown error")})};t.onkeydown=d=>{d.key==="Enter"&&i()},s.onkeydown=d=>{d.key==="Enter"&&i()}}async encryptCredentials(e,t){let s=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),n=M(t),a=await crypto.subtle.importKey("raw",n,{name:"ECDH",namedCurve:"P-256"},!1,[]),u=await crypto.subtle.deriveBits({name:"ECDH",public:a},s.privateKey,256),o=await crypto.subtle.importKey("raw",u,"HKDF",!1,["deriveBits"]),i=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},o,256),d=await crypto.subtle.importKey("raw",i,{name:"AES-GCM",length:256},!1,["encrypt"]),c=crypto.getRandomValues(new Uint8Array(12)),l=new TextEncoder().encode(JSON.stringify(e)),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,tagLength:128},d,l),y=await crypto.subtle.exportKey("raw",s.publicKey);return{ephemeralPublicKey:m(y),iv:m(c.buffer),encryptedCredentials:m(p)}}async handleWebAuthnSetup(){this.showSetupLoading(),this.hideSetupError();try{let e="demouser@ats.run",t=window.location.hostname;if(this.isStatelessPopup){let p=M(this.appSalt),y=await navigator.credentials.create({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),rp:{id:t,name:"ATS KMS V2"},user:{id:new TextEncoder().encode(e),name:e,displayName:e},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},extensions:{prf:{eval:{first:p}}}}});if(!y)throw new Error("No credential returned");let f=O(y),h=f?.enabled===!0,g=f?.results?.first,w;if(h)if(g)w="passkey-prf",console.log("[KMS Client] PRF output available from create() (modern platform)");else{console.log("[KMS Client] PRF enabled but no output yet, calling get() (legacy platform)");let U=await navigator.credentials.get({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:p}}}}});g=O(U)?.results?.first,g?(w="passkey-prf",console.log("[KMS Client] PRF output obtained from get()")):(w="passkey-gate",console.warn("[KMS Client] PRF enabled but no output from get(), falling back to gate mode"))}else w="passkey-gate",console.log("[KMS Client] PRF not supported by authenticator, using gate mode");let b={credentialId:m(y.rawId),rpId:t};w==="passkey-prf"&&g&&(b.prfOutput=m(g));let S=await this.encryptCredentials(b,this.transportPublicKey),E=this.credentialPort;E?(console.log("[KMS Client] Sending credentials via MessagePort to iframe"),E.postMessage({type:"popup:credentials",method:w,transportKeyId:this.transportKeyId,userId:e,...S}),this.hideSetupLoading(),this.showSetupSuccess()):window.opener&&(console.log("[KMS Client] Sending credentials via window.opener to parent"),window.opener.postMessage({type:"kms:setup-credentials",method:w,transportKeyId:this.transportKeyId,userId:e,...S},this.parentOrigin),this.hideSetupLoading(),this.showSetupSuccess());return}let s=await this.getEnrollments(e),n=null;s.length>0&&(this.hideSetupLoading(),n=await this.promptUnlockForEnrollment(s,e),this.showSetupLoading());let a=crypto.getRandomValues(new Uint8Array(32)),u=await navigator.credentials.create({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),rp:{id:t,name:"ATS KMS V2"},user:{id:new TextEncoder().encode(e),name:e,displayName:e},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},extensions:{prf:{eval:{first:a}}}}});if(!u)throw new Error("No credential returned");let i=O(u)?.enabled===!0,d;if(i){let p=await navigator.credentials.get({publicKey:{challenge:crypto.getRandomValues(new Uint8Array(32)),timeout:6e4,userVerification:"required",extensions:{prf:{eval:{first:a}}}}});d=O(p)?.results?.first}let c;n?c={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:e,method:i&&d?"passkey-prf":"passkey-gate",credentials:n,newCredentials:{credentialId:u.rawId,...d&&{prfOutput:d},rpId:t}}}:c={id:`setup-${Date.now()}`,method:i&&d?"setupPasskeyPRF":"setupPasskeyGate",params:{userId:e,credentialId:u.rawId,...d&&{prfOutput:d},rpId:t}},this.worker?.postMessage(c);let l=await new Promise((p,y)=>{let f=h=>{let g=h.data;if(g.id===c.id)if(this.worker?.removeEventListener("message",f),g.error){let w=typeof g.error=="string"?g.error:g.error.message;y(new Error(w))}else p(g.result)};this.worker?.addEventListener("message",f),setTimeout(()=>{this.worker?.removeEventListener("message",f),y(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),localStorage.setItem("kms:appSalt",Array.from(a).toString()),this.notifySetupComplete({method:d?"passkey-prf":"passkey-gate",result:l})}catch(e){this.hideSetupLoading(),this.showSetupError(`WebAuthn setup failed: ${C(e)}`),console.error("[KMS Client] WebAuthn setup failed:",e)}}async handlePassphraseSetup(e,t){if(!e||e.trim().length===0){this.showSetupError("Please enter a passphrase");return}if(e.length<12){this.showSetupError("Passphrase must be at least 12 characters");return}if(!t||t.trim().length===0){this.showSetupError("Please confirm your passphrase");return}if(e!==t){this.showSetupError("Passphrases do not match");return}this.showSetupLoading(),this.hideSetupError();try{let s="demouser@ats.run";if(console.log("[KMS Client] handlePassphraseSetup - isStatelessPopup:",this.isStatelessPopup,{transportKey:this.transportPublicKey?.slice(0,20)+"...",keyId:this.transportKeyId}),this.isStatelessPopup){console.log("[KMS Client] Entering stateless popup flow for passphrase setup"),console.log("[KMS Client] window.opener check:",{hasOpener:!!window.opener,openerIsWindow:window.opener===window,parentOrigin:this.parentOrigin});let i=await this.encryptCredentials({passphrase:e},this.transportPublicKey);console.log("[KMS Client] Credentials encrypted, preparing to send");let d=this.credentialPort;d?(console.log("[KMS Client] Sending credentials via MessagePort to iframe"),d.postMessage({type:"popup:credentials",method:"passphrase",transportKeyId:this.transportKeyId,userId:s,...i}),this.hideSetupLoading(),this.showSetupSuccess()):window.opener?(console.log("[KMS Client] Sending credentials via window.opener to parent"),window.opener.postMessage({type:"kms:setup-credentials",method:"passphrase",transportKeyId:this.transportKeyId,userId:s,...i},this.parentOrigin),this.hideSetupLoading(),this.showSetupSuccess()):(console.error("[KMS Client] No communication channel available"),this.hideSetupLoading(),this.showSetupError("Communication channel not ready. Please try again."));return}let n=await this.getEnrollments(s),a=null;n.length>0&&(this.hideSetupLoading(),a=await this.promptUnlockForEnrollment(n,s),this.showSetupLoading());let u;a?u={id:`add-enrollment-${Date.now()}`,method:"addEnrollment",params:{userId:s,method:"passphrase",credentials:a,newCredentials:{passphrase:e}}}:u={id:`setup-${Date.now()}`,method:"setupPassphrase",params:{userId:s,passphrase:e}},this.worker?.postMessage(u);let o=await new Promise((i,d)=>{let c=l=>{let p=l.data;if(p.id===u.id)if(this.worker?.removeEventListener("message",c),p.error){let y=typeof p.error=="string"?p.error:p.error.message;d(new Error(y))}else i(p.result)};this.worker?.addEventListener("message",c),setTimeout(()=>{this.worker?.removeEventListener("message",c),d(new Error("Setup timeout"))},3e4)});this.hideSetupLoading(),this.showSetupSuccess(),this.notifySetupComplete({method:"passphrase",result:o})}catch(s){this.hideSetupLoading(),this.showSetupError(`Setup failed: ${C(s)}`),console.error("[KMS Client] Passphrase setup failed:",s)}}showSetupError(e){let t=document.getElementById("kms-setup-error");t&&(t.textContent=e,t.classList.remove("hidden"))}hideSetupError(){let e=document.getElementById("kms-setup-error");e&&e.classList.add("hidden")}showSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.remove("hidden")}hideSetupLoading(){let e=document.getElementById("kms-setup-loading");e&&e.classList.add("hidden")}showSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.remove("hidden")}hideSetupSuccess(){let e=document.getElementById("kms-setup-success");e&&e.classList.add("hidden")}notifySetupComplete(e){let t={type:"kms:setup-complete",method:e.method,result:e.result};window.opener&&window.opener.postMessage(t,this.parentOrigin);try{localStorage.setItem("kms:setup-complete",JSON.stringify({timestamp:Date.now(),...t}))}catch(s){console.warn("[KMS Client] Failed to set localStorage flag:",s)}try{let s=new BroadcastChannel("kms-setup");s.postMessage(t),s.close()}catch(s){console.warn("[KMS Client] BroadcastChannel not available:",s)}}async terminate(){this.worker&&(this.worker.terminate(),this.worker=null),this.isInitialized=!1}async send(e){let{handleMessage:t}=await Promise.resolve().then(()=>(Tt(),Bt));return await t(e)}};if(typeof window<"u"&&typeof document<"u"){let r=new URLSearchParams(window.location.search),e=r.get("parentOrigin")??"https://allthe.services",t=window.self!==window.top,s=r.get("mode")==="setup"||r.has("setup"),n=!t&&(window.opener!==null||s),a=new Ve({parentOrigin:e}),u=()=>{if(a.init().catch(o=>{console.error("[KMS Client] Auto-initialization failed:",o)}),n)if(r.has("transportKey")&&r.has("keyId"))setTimeout(()=>{a.setupSetupModalHandlers();let i=document.getElementById("setup-modal");i&&i.classList.remove("hidden")},100);else{console.log("[KMS Client] Popup in KMS-only mode, signaling ready to parent...");let i=r.get("parentOrigin")??"http://localhost:5173";window.opener&&window.opener.postMessage({type:"kms:popup-ready"},i),window.addEventListener("message",d=>{if(d.data?.type==="kms:connect-port"&&d.origin===i){if(console.log("[KMS Client] Popup received kms:connect-port from parent"),!d.ports||!d.ports[0]){console.error("[KMS Client] No MessagePort received with kms:connect-port");return}let l=d.ports[0];l.onmessage=p=>{let y=p.data;y?.type==="kms:connect"&&(console.log("[KMS Client] Popup received kms:connect via MessagePort"),a.transportPublicKey=y.transportKey,a.transportKeyId=y.transportKeyId,a.appSalt=y.appSalt,a.hkdfSalt=y.hkdfSalt,a.isStatelessPopup=!0,a.credentialPort=l,l.postMessage({type:"popup:connected"}),setTimeout(()=>{a.setupSetupModalHandlers();let f=document.getElementById("setup-modal");f&&f.classList.remove("hidden")},100))}}})}};if(document.readyState==="loading"?document.addEventListener("DOMContentLoaded",u):u(),document.readyState==="loading")document.addEventListener("DOMContentLoaded",()=>{let o=document.getElementById("kms-unlock-form"),i=document.getElementById("kms-setup-form");o&&o.addEventListener("submit",d=>(d.preventDefault(),!1)),i&&i.addEventListener("submit",d=>(d.preventDefault(),!1))});else{let o=document.getElementById("kms-unlock-form"),i=document.getElementById("kms-setup-form");o&&o.addEventListener("submit",d=>(d.preventDefault(),!1)),i&&i.addEventListener("submit",d=>(d.preventDefault(),!1))}if(t){try{new BroadcastChannel("kms-setup-credentials").addEventListener("message",d=>{console.log("[KMS Client] Iframe received credentials from popup via BroadcastChannel"),d.data?.type==="kms:setup-credentials"&&window.parent&&(window.parent.postMessage(d.data,e),console.log("[KMS Client] Iframe forwarded credentials to parent"))}),new BroadcastChannel("kms-setup").addEventListener("message",d=>{let c=d.data;c?.type==="kms:setup-complete"&&window.parent&&window.parent.postMessage(c,e)})}catch(o){console.warn("[KMS Client] BroadcastChannel not available for iframe:",o)}window.addEventListener("storage",o=>{if(o.key==="kms:setup-credentials"&&o.newValue)try{console.log("[KMS Client] Iframe received credentials from popup via localStorage");let i=JSON.parse(o.newValue);i?.type==="kms:setup-credentials"&&(window.parent&&(window.parent.postMessage(i,e),console.log("[KMS Client] Iframe forwarded credentials to parent")),localStorage.removeItem("kms:setup-credentials"))}catch(i){console.warn("[KMS Client] Failed to parse setup-credentials from localStorage:",i)}if(o.key==="kms:setup-complete"&&o.newValue)try{let i=JSON.parse(o.newValue);window.parent&&window.parent.postMessage({type:i.type,method:i.method,result:i.result},e),localStorage.removeItem("kms:setup-complete")}catch(i){console.warn("[KMS Client] Failed to parse setup-complete from localStorage:",i)}});try{let o=localStorage.getItem("kms:setup-complete");if(o){let i=JSON.parse(o);i.timestamp&&Date.now()-i.timestamp<5e3&&window.parent&&window.parent.postMessage({type:i.type,method:i.method,result:i.result},e),localStorage.removeItem("kms:setup-complete")}}catch(o){console.warn("[KMS Client] Failed to check localStorage for setup-complete:",o)}}window.__kmsClient=a,window.__kmsContext={isIframe:t,isStandaloneSetup:n}}export{Ve as KMSClient};
