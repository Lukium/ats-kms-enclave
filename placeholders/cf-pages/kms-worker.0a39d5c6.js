function w(e){let t=new Uint8Array(e),r=Array.from(t,s=>String.fromCharCode(s)).join("");return btoa(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function S(e){let t=e.replace(/-/g,"+").replace(/_/g,"/"),r=t.length%4;r&&(t+="=".repeat(4-r));let n=atob(t),s=new Uint8Array(n.length);for(let a=0;a<n.length;a++)s[a]=n.charCodeAt(a);return s.buffer}function N(e){if(e.length!==65||e[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let t=w(e.slice(1,33).buffer),r=w(e.slice(33).buffer);return{kty:"EC",crv:"P-256",x:t,y:r}}async function J(e){let t={crv:e.crv,kty:e.kty,x:e.x,y:e.y},r=JSON.stringify(t),n=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(r));return w(n)}function Te(e){return"{"+Object.keys(e).sort().map(n=>[n,e[n]]).map(([n,s])=>`"${String(n)}":${JSON.stringify(s)}`).join(",")+"}"}function se(e){let t={kmsVersion:e.kmsVersion,method:e.method,algVersion:e.algVersion,purpose:e.purpose};e.credentialId&&(t.credentialId=w(e.credentialId));let r=Te(t);return new TextEncoder().encode(r).buffer}function ae(e){let t={kmsVersion:e.kmsVersion,kid:e.kid,alg:e.alg,purpose:e.purpose,createdAt:e.createdAt,keyType:e.keyType},r=Te(t);return new TextEncoder().encode(r).buffer}async function me(e){let t=await crypto.subtle.exportKey("raw",e),r=await crypto.subtle.importKey("raw",t,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),n=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",r,n)}function Ve(e,t){return St(e,t)}function St(e,t){let r=new Uint8Array(e),n=new Uint8Array(t);if(r.length!==n.length)return!1;let s=0;for(let a=0;a<r.length;a++)s|=r[a]^n[a];return s===0}async function Y(e){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(e))}async function Ue(e={min:150,max:300,mid:220}){let t=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),r=crypto.getRandomValues(new Uint8Array(16)),n=1e5,s=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:r,iterations:n},t,256);let i=performance.now()-s,o=Math.round(n*e.mid/i);return o=Math.min(Math.max(o,5e4),2e6),{iterations:o,measuredMs:i}}var Et="kms-v2",xt=1,q=null;async function ie(){return new Promise((e,t)=>{let r=indexedDB.open(Et,xt);r.onerror=()=>{t(new Error("Failed to open IndexedDB"))},r.onsuccess=()=>{q=r.result,e()},r.onupgradeneeded=n=>{let s=n.target.result;if(s.objectStoreNames.contains("config")||s.createObjectStore("config",{keyPath:"method"}),!s.objectStoreNames.contains("keys")){let a=s.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!s.objectStoreNames.contains("leases")){let a=s.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!s.objectStoreNames.contains("audit")){let a=s.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}s.objectStoreNames.contains("meta")||s.createObjectStore("meta",{keyPath:"key"})}})}async function _(){if(q||await ie(),!q)throw new Error("Database not initialized");return q}function Me(){q&&(q.close(),q=null)}async function oe(e,t){let r=await _();return new Promise((n,s)=>{let o=r.transaction(e,"readonly").objectStore(e).get(t);o.onsuccess=()=>{n(o.result)},o.onerror=()=>{s(new Error(`Failed to get from ${e}`))}})}async function z(e,t){let r=await _();return new Promise((n,s)=>{let o=r.transaction(e,"readwrite").objectStore(e).put(t);o.onsuccess=()=>{n()},o.onerror=()=>{s(new Error(`Failed to put to ${e}`))}})}async function ke(e,t){let r=await _();return new Promise((n,s)=>{let o=r.transaction(e,"readwrite").objectStore(e).delete(t);o.onsuccess=()=>{n()},o.onerror=()=>{s(new Error(`Failed to delete from ${e}`))}})}async function Ct(e){let t=await _();return new Promise((r,n)=>{let i=t.transaction(e,"readonly").objectStore(e).getAll();i.onsuccess=()=>{r(i.result)},i.onerror=()=>{n(new Error(`Failed to getAll from ${e}`))}})}async function L(e,t,r,n=e.algorithm,s=e.usages,a={alg:"unknown",purpose:"unknown"}){let i=crypto.getRandomValues(new Uint8Array(12)),o=Date.now(),u=ae({kmsVersion:2,kid:r,alg:a.alg,purpose:a.purpose,createdAt:o,keyType:Array.isArray(s)?s.join(","):String(s)}),d=e.type==="private"?"pkcs8":"raw",c=await crypto.subtle.exportKey(d,e),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:i,additionalData:u},t,c),p={kid:r,kmsVersion:2,wrappedKey:l,iv:i.buffer.slice(i.byteOffset,i.byteOffset+i.byteLength),aad:u,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:o};await z("keys",p)}async function Le(e,t,r,n=[]){let s=await oe("keys",e);if(!s)throw new Error(`No wrapped key with id: ${e}`);let a=new Uint8Array(s.iv),i=s.aad,o=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:i},t,s.wrappedKey),u=typeof r=="string"?r:r.name,c=u==="ECDSA"||u==="ECDH"||u==="Ed25519"||u.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(c,o,r,!1,n)}async function W(e){return await oe("keys",e)??null}async function V(){return Ct("keys")}async function Be(e){await ke("keys",e)}async function C(e){let t=await oe("meta",e);return t?t.value:null}async function U(e,t){await z("meta",{key:e,value:t})}async function We(e){await ke("meta",e)}async function Oe(e){await z("audit",e)}async function Q(){let e=await _();return new Promise((t,r)=>{let i=e.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();i.onsuccess=()=>{t(i.result)},i.onerror=()=>{r(new Error("Failed to get audit entries"))}})}async function He(){let e=await Q();return e.length>0?e[e.length-1]:null}async function he(e){await z("leases",e)}async function Z(e){return await oe("leases",e)??null}async function be(e){let t=await _();return new Promise((r,n)=>{let o=t.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(e);o.onsuccess=()=>{r(o.result)},o.onerror=()=>{n(new Error("Failed to get user leases"))}})}async function ee(e){await ke("leases",e)}async function qe(e){let r=(await V()).filter(a=>a.purpose==="vapid");if(r.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(r.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let n=r[0];if(!n)throw new Error("No VAPID key found after filtering");let s={...n,subscription:e};await z("keys",s)}async function Ge(){let t=(await V()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");let{subscription:n,...s}=r;await z("keys",s)}async function Ae(){let t=(await V()).filter(n=>n.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");return r.subscription??null}var ue=e=>`enrollment:passphrase:v2:${e}`,de=e=>`enrollment:passkey-prf:v2:${e}`,ce=e=>`enrollment:passkey-gate:v2:${e}`;function Ke(){let e=new Uint8Array(32);return crypto.getRandomValues(e),e}async function le(e,t,r){let n=r??Ke(),{iterations:s}=await Ue(),a=crypto.getRandomValues(new Uint8Array(16)),i=await crypto.subtle.importKey("raw",new TextEncoder().encode(t),"PBKDF2",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:s},i,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),u=await me(o),d=crypto.getRandomValues(new Uint8Array(12)),c=se({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:c},o,n),p={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:s,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:u,encryptedMS:l,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:c,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await U(ue(e),p),{success:!0,ms:n}}async function pe(e,t,r,n,s="",a,i){let o=n??Ke(),u=a??crypto.getRandomValues(new Uint8Array(32)),d=i??await Y("ATS/KMS/KEK-wrap/salt/v2"),c=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),l=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]),p=d instanceof Uint8Array?d.buffer:d,y=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:p,info:c},l,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),f=crypto.getRandomValues(new Uint8Array(12)),b=se({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:t,purpose:"master-secret"}),I=await crypto.subtle.encrypt({name:"AES-GCM",iv:f,additionalData:b},y,o),K=Date.now(),A=u.buffer.slice(u.byteOffset,u.byteOffset+u.byteLength),x;d instanceof Uint8Array?x=d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength):x=d;let P={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:t,rpId:s,kdf:{algorithm:"HKDF-SHA256",appSalt:A,hkdfSalt:x,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:I,msIV:f.buffer.slice(f.byteOffset,f.byteOffset+f.byteLength),msAAD:b,msVersion:1,createdAt:K,updatedAt:K};return await U(de(e),P),{success:!0,ms:o}}async function ye(e,t,r,n=""){let s=r??Ke(),a=crypto.getRandomValues(new Uint8Array(32)),i=await Y("ATS/KMS/KEK-gate/salt/v2"),o=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),u=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),d=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:i,info:o},u,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),c=crypto.getRandomValues(new Uint8Array(12)),l=se({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:t,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,additionalData:l},d,s),y=Date.now(),f={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:t,rpId:n,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:p,msIV:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await U(ce(e),f),{success:!0,ms:s}}async function Dt(e,t){let r=await C(ue(e));if(!r)return{success:!1,error:"Passphrase not set up"};let n=await crypto.subtle.importKey("raw",new TextEncoder().encode(t),"PBKDF2",!1,["deriveKey"]),s=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:r.kdf.salt,iterations:r.kdf.iterations},n,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await me(s);if(!Ve(a,r.kcv))return{success:!1,error:"Invalid passphrase"};try{let i=await crypto.subtle.decrypt({name:"AES-GCM",iv:r.msIV,additionalData:r.msAAD},s,r.encryptedMS);return{success:!0,ms:new Uint8Array(i)}}catch{return{success:!1,error:"Decryption failed"}}}async function Rt(e,t){let r=await C(de(e));if(!r)return{success:!1,error:"Passkey not set up"};let n=r.kdf.hkdfSalt,s=new TextEncoder().encode(r.kdf.info),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),i=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:r.msIV,additionalData:r.msAAD},i,r.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Tt(e){let t=await C(ce(e));if(!t)return{success:!1,error:"Passkey gate not set up"};let r=new Uint8Array(t.pepperWrapped),n=await Y("ATS/KMS/KEK-gate/salt/v2"),s=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]),i=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},i,t.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Fe(e){let t=await C(ue(e)),r=await C(de(e)),n=await C(ce(e));return!!(t||r||n)}async function Ie(e){return!!await C(ue(e))}async function ve(e){let t=await C(de(e)),r=await C(ce(e));return!!(t||r)}async function te(e){let t=await Y("ATS/KMS/MKEK/salt/v2"),r=new TextEncoder().encode("ATS/KMS/MKEK/v2"),n=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:t,info:r},n,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function B(e,t){let r=Date.now(),n=null;try{let s;switch(e.method){case"passphrase":s=await Dt(e.userId,e.passphrase);break;case"passkey-prf":s=await Rt(e.userId,e.prfOutput);break;case"passkey-gate":s=await Tt(e.userId);break;default:throw new Error("Unknown credential method")}if(!s.success)throw new Error(s.error??"Unlock failed");n=s.ms;let a=await te(n),i=await t(a,n),o=Date.now();return{result:i,unlockTime:r,lockTime:o,duration:o-r}}finally{n&&n.fill(0)}}var Pe=Promise.resolve(),D=null;async function je(){}async function fe(){let e=await C("LRK");return e||(e=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await U("LRK",e)),e}async function re(e){let t=await crypto.subtle.digest("SHA-256",e);return w(t)}async function M(e){let t=await W("audit-user");if(t&&t.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,e,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),i=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),o=await re(t.publicKeyRaw);D={type:"UAK",keyPair:{privateKey:a,publicKey:i},keyId:o};return}let r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),n=await crypto.subtle.exportKey("raw",r.publicKey);await L(r.privateKey,e,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:n});let s=await re(n);D={type:"UAK",keyPair:r,keyId:s}}async function $e(e,t){if(!D||D.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let r=Date.now(),n=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",n.publicKey),a=w(s),i={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:e,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:r,notAfter:t,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},o=JSON.stringify(i,Object.keys(i).sort()),u=await crypto.subtle.sign("Ed25519",D.keyPair.privateKey,new TextEncoder().encode(o)),d={...i,sig:w(u)},c=await fe(),l=ae({kmsVersion:2,kid:`lak-${e}`,alg:"EdDSA",purpose:"lak",createdAt:r,keyType:"lease-audit-key"}),p=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",n.privateKey,c,{name:"AES-GCM",iv:p,additionalData:l});return await U(`lease-audit-key:${e}`,{leaseId:e,wrappedKey:y,iv:p,aad:l,publicKeyRaw:s,delegationCert:d,expiresAt:t,createdAt:r}),{lakKeyPair:n,delegationCert:d}}async function Ne(e,t){let r=await C(`lease-audit-key:${e}`);if(!r)throw new Error(`LAK not found for lease: ${e}`);let n=await fe(),s=await crypto.subtle.unwrapKey("pkcs8",r.wrappedKey,n,{name:"AES-GCM",iv:r.iv,additionalData:r.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",r.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),i=await re(r.publicKeyRaw);D={type:"LAK",keyPair:{privateKey:s,publicKey:a},keyId:i,cert:t}}async function Je(){let e=await W("audit-instance");if(e&&e.publicKeyRaw){let u=await fe(),d=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,u,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),c=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),l=await re(e.publicKeyRaw);D={type:"KIAK",keyPair:{privateKey:d,publicKey:c},keyId:l};return}let t=await fe(),r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),n=await crypto.subtle.exportKey("raw",r.publicKey);await L(r.privateKey,t,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:n});let s=await W("audit-instance");if(!s)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",s.wrappedKey,t,{name:"AES-GCM",iv:s.iv,additionalData:s.aad},{name:"Ed25519"},!1,["sign"]),i=await crypto.subtle.importKey("raw",n,{name:"Ed25519"},!1,["verify"]),o=await re(n);D={type:"KIAK",keyPair:{privateKey:a,publicKey:i},keyId:o}}async function R(e){let t,r,n=new Promise((s,a)=>{t=s,r=a});return Pe=Pe.then(async()=>{try{if(!D)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let s=Date.now(),a=await He(),i=a?a.chainHash:"",u={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:s,op:e.op,kid:e.kid,requestId:e.requestId,userId:e.userId,origin:e.origin,leaseId:e.leaseId,unlockTime:e.unlockTime,lockTime:e.lockTime,duration:e.duration,details:e.details,previousHash:i,signer:D.type,signerId:D.keyId},d=JSON.stringify(u),c=new TextEncoder().encode(i+d),l=await crypto.subtle.digest("SHA-256",c),p=w(l),y=new TextEncoder().encode(p),f=await crypto.subtle.sign("Ed25519",D.keyPair.privateKey,y),b=w(f),I={kmsVersion:u.kmsVersion,seqNum:u.seqNum,timestamp:u.timestamp,op:u.op,kid:u.kid,requestId:u.requestId,userId:u.userId,...u.origin!==void 0&&{origin:u.origin},...u.leaseId!==void 0&&{leaseId:u.leaseId},...u.unlockTime!==void 0&&{unlockTime:u.unlockTime},...u.lockTime!==void 0&&{lockTime:u.lockTime},...u.duration!==void 0&&{duration:u.duration},...u.details!==void 0&&{details:u.details},previousHash:u.previousHash,chainHash:p,signer:u.signer,signerId:u.signerId,...D.cert!==void 0&&{cert:D.cert},sig:b};await Oe(I),t(I)}catch(s){r(s)}}).catch(()=>{}),n}async function _e(){let e=await Q(),t=[],r=0;for(let n of e){let s={kmsVersion:n.kmsVersion,seqNum:n.seqNum,timestamp:n.timestamp,op:n.op,kid:n.kid,requestId:n.requestId,userId:n.userId,origin:n.origin,leaseId:n.leaseId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:n.details,previousHash:n.previousHash,signer:n.signer,signerId:n.signerId},a=JSON.stringify(s),i=new TextEncoder().encode(n.previousHash+a),o=await crypto.subtle.digest("SHA-256",i);w(o)!==n.chainHash&&t.push(`Chain hash mismatch at seq ${n.seqNum}`),r+=1}return{valid:t.length===0,verified:r,errors:t}}async function ze(){let e=await W("audit-user");if(!e||!e.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:w(e.publicKeyRaw)}}function Qe(){D=null,Pe=Promise.resolve()}function we(e){if(e instanceof Error)return e.message;if(typeof e=="string")return e;if(typeof e=="object"&&e!==null&&"message"in e&&typeof e.message=="string")return e.message;try{return String(e)}catch{return"Unknown error"}}var E=class extends Error{constructor(r,n,s,a){super(`RPC ${r}: Invalid ${n} - expected ${s}, got ${typeof a}`);this.method=r;this.param=n;this.expected=s;this.received=a;this.name="RPCValidationError"}};function v(e,t){if(typeof t!="object"||t===null)throw new E(e,"params","object",t);return t}function h(e,t,r){if(typeof r!="string")throw new E(e,t,"string",r);return r}function G(e,t,r){if(r!==void 0)return h(e,t,r)}function ge(e,t,r){if(typeof r!="number")throw new E(e,t,"number",r);return r}function Vt(e,t,r){if(typeof r!="boolean")throw new E(e,t,"boolean",r);return r}function Xe(e,t,r){if(r!==void 0)return Vt(e,t,r)}function Se(e,t,r){if(r instanceof ArrayBuffer)return r;if(r instanceof Uint8Array){let n=new ArrayBuffer(r.byteLength);return new Uint8Array(n).set(r),n}throw new E(e,t,"ArrayBuffer or Uint8Array",r)}function Ee(e,t,r){if(r!==void 0){if(r instanceof Uint8Array)return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);throw new E(e,t,"ArrayBuffer or Uint8Array",r)}}function F(e,t){if(typeof t!="object"||t===null)throw new E(e,"credentials","AuthCredentials object",t);let r=t;if(typeof r.method!="string")throw new E(e,"credentials.method","string",r.method);if(typeof r.userId!="string")throw new E(e,"credentials.userId","string",r.userId);switch(r.method){case"passphrase":if(typeof r.passphrase!="string")throw new E(e,"credentials.passphrase","string",r.passphrase);return{method:"passphrase",passphrase:r.passphrase,userId:r.userId};case"passkey-prf":if(!(r.prfOutput instanceof ArrayBuffer))throw new E(e,"credentials.prfOutput","ArrayBuffer",r.prfOutput);return{method:"passkey-prf",prfOutput:r.prfOutput,userId:r.userId};case"passkey-gate":return{method:"passkey-gate",userId:r.userId};default:throw new E(e,"credentials.method","passphrase | passkey-prf | passkey-gate",r.method)}}function Ut(e,t){if(typeof t!="object"||t===null)throw new E(e,"payload","VAPIDPayload object",t);let r=t;return{aud:h(e,"payload.aud",r.aud),sub:h(e,"payload.sub",r.sub),exp:ge(e,"payload.exp",r.exp),jti:h(e,"payload.jti",r.jti)}}function Ye(e){let t=v("setupPassphrase",e),r=Ee("setupPassphrase","existingMS",t.existingMS);return{userId:h("setupPassphrase","userId",t.userId),passphrase:h("setupPassphrase","passphrase",t.passphrase),...r!==void 0&&{existingMS:r}}}function Ze(e){let t=v("setupPasskeyPRF",e);if(!t.credentialId)throw new Error("credentialId required");let r=G("setupPasskeyPRF","rpId",t.rpId),n=Ee("setupPasskeyPRF","existingMS",t.existingMS);return{userId:h("setupPasskeyPRF","userId",t.userId),credentialId:Se("setupPasskeyPRF","credentialId",t.credentialId),prfOutput:Se("setupPasskeyPRF","prfOutput",t.prfOutput),...r!==void 0&&{rpId:r},...n!==void 0&&{existingMS:n}}}function et(e){let t=v("setupWithPopup",e);return{userId:h("setupWithPopup","userId",t.userId)}}function tt(e){let t=v("setupPasskeyGate",e),r=G("setupPasskeyGate","rpId",t.rpId),n=Ee("setupPasskeyGate","existingMS",t.existingMS);return{userId:h("setupPasskeyGate","userId",t.userId),credentialId:Se("setupPasskeyGate","credentialId",t.credentialId),...r!==void 0&&{rpId:r},...n!==void 0&&{existingMS:n}}}function rt(e){let t=v("addEnrollment",e);return{userId:h("addEnrollment","userId",t.userId),credentials:F("addEnrollment",t.credentials)}}function nt(e){let t=v("addEnrollmentWithPopup",e);return{userId:h("addEnrollmentWithPopup","userId",t.userId)}}function st(e){let t=v("generateVAPID",e);return{credentials:F("generateVAPID",t.credentials)}}function at(e){let t=v("regenerateVAPID",e);return{credentials:F("regenerateVAPID",t.credentials)}}function it(e){let t=v("signJWT",e);return{kid:h("signJWT","kid",t.kid),payload:Ut("signJWT",t.payload),credentials:F("signJWT",t.credentials)}}function ot(e){let t=v("createLease",e),r={userId:h("createLease","userId",t.userId),ttlHours:ge("createLease","ttlHours",t.ttlHours),credentials:F("createLease",t.credentials)},n=Xe("createLease","autoExtend",t.autoExtend);return n!==void 0&&(r.autoExtend=n),r}function ut(e){let t=v("extendLeases",e);if(!Array.isArray(t.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof t.leaseIds}`);if(t.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let n={leaseIds:t.leaseIds.map((a,i)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${i} - expected non-empty string`);return a}),userId:h("extendLeases","userId",t.userId)},s=Xe("extendLeases","requestAuth",t.requestAuth);return s!==void 0&&(n.requestAuth=s),t.credentials!==void 0&&(n.credentials=F("extendLeases",t.credentials)),n}function dt(e){let t=v("issueVAPIDJWT",e),r=G("issueVAPIDJWT","kid",t.kid),n=G("issueVAPIDJWT","jti",t.jti),s=t.exp!==void 0?ge("issueVAPIDJWT","exp",t.exp):void 0;return{leaseId:h("issueVAPIDJWT","leaseId",t.leaseId),...r!==void 0&&{kid:r},...n!==void 0&&{jti:n},...s!==void 0&&{exp:s}}}function ct(e){let t=v("issueVAPIDJWTs",e),r=G("issueVAPIDJWTs","kid",t.kid);return{leaseId:h("issueVAPIDJWTs","leaseId",t.leaseId),count:ge("issueVAPIDJWTs","count",t.count),...r!==void 0&&{kid:r}}}function lt(e){if(e==null)return{};let t=v("isSetup",e),r=G("isSetup","userId",t.userId);return r!==void 0?{userId:r}:{}}function pt(e){if(e==null)return{};let t=v("getEnrollments",e),r=G("getEnrollments","userId",t.userId);return r!==void 0?{userId:r}:{}}function yt(e){let t=v("getPublicKey",e);return{kid:h("getPublicKey","kid",t.kid)}}function ft(e){let t=v("getUserLeases",e);return{userId:h("getUserLeases","userId",t.userId)}}function wt(e){let t=v("verifyLease",e),r={leaseId:h("verifyLease","leaseId",t.leaseId)};if("deleteIfInvalid"in t){if(typeof t.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");r.deleteIfInvalid=t.deleteIfInvalid}return r}function gt(e){let t=v("removeEnrollment",e);return{enrollmentId:h("removeEnrollment","enrollmentId",t.enrollmentId),credentials:F("removeEnrollment",t.credentials)}}var Mt=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"];function Lt(e,t){if(typeof t!="object"||t===null)throw new E(e,"subscription","object",t);let r=t,n=h(e,"subscription.endpoint",r.endpoint);if(!n.startsWith("https://"))throw new Error(`${e}: subscription.endpoint must use HTTPS`);let s;try{s=new URL(n)}catch{throw new Error(`${e}: subscription.endpoint is not a valid URL`)}if(!Mt.some(p=>s.hostname===p||s.hostname.endsWith(`.${p}`)))throw new Error(`${e}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${s.hostname}`);let i=r.expirationTime;if(i!==null&&typeof i!="number")throw new E(e,"subscription.expirationTime","number or null",i);if(typeof r.keys!="object"||r.keys===null)throw new E(e,"subscription.keys","object",r.keys);let o=r.keys,u=h(e,"subscription.keys.p256dh",o.p256dh),d=h(e,"subscription.keys.auth",o.auth);if(u.length===0)throw new Error(`${e}: subscription.keys.p256dh must be non-empty`);if(d.length===0)throw new Error(`${e}: subscription.keys.auth must be non-empty`);let c=h(e,"subscription.eid",r.eid);if(c.length===0)throw new Error(`${e}: subscription.eid must be non-empty`);let l=r.createdAt;if(typeof l!="number")throw new E(e,"subscription.createdAt","number",l);return{endpoint:n,expirationTime:i,keys:{p256dh:u,auth:d},eid:c,createdAt:l}}function mt(e){let t=v("setPushSubscription",e);return{subscription:Lt("setPushSubscription",t.subscription)}}function Wt(e){if(typeof e!="object"||e===null)return!1;let t=e;return typeof t.tokensIssued=="number"&&typeof t.lastResetAt=="number"}function kt(e){return Wt(e)?e:{tokensIssued:0,lastResetAt:Date.now()}}var xe=new Map,O=new Map,j=new Map,ne=new Map;async function Ot(e,t){let r=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:t,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},r,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function Ce(){let e=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),t=await crypto.subtle.exportKey("raw",e.publicKey),r=crypto.randomUUID(),n=crypto.getRandomValues(new Uint8Array(32)),s=crypto.getRandomValues(new Uint8Array(32));return O.set(r,{privateKey:e.privateKey,appSalt:n,hkdfSalt:s,createdAt:Date.now()}),setTimeout(()=>{O.delete(r)},10*60*1e3),{publicKey:w(t),keyId:r,appSalt:w(n.buffer),hkdfSalt:w(s.buffer)}}async function Ht(e){let t=O.get(e.transportKeyId);if(!t)throw new Error("Transport key not found or expired");let r=S(e.ephemeralPublicKey),n=await crypto.subtle.importKey("raw",r,{name:"ECDH",namedCurve:"P-256"},!1,[]),s=await crypto.subtle.deriveBits({name:"ECDH",public:n},t.privateKey,256),a=await crypto.subtle.importKey("raw",s,"HKDF",!1,["deriveBits"]),i=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},a,256),o=await crypto.subtle.importKey("raw",i,{name:"AES-GCM",length:256},!1,["decrypt"]),u=S(e.iv),d=S(e.encryptedCredentials),c=await crypto.subtle.decrypt({name:"AES-GCM",iv:u,tagLength:128},o,d),l=JSON.parse(new TextDecoder().decode(c)),p;if(e.method==="passphrase"){let y=l;p=await ht({userId:e.userId,passphrase:y.passphrase},e.requestId)}else if(e.method==="passkey-prf"){let y=l;p=await bt({userId:e.userId,credentialId:S(y.credentialId),prfOutput:S(y.prfOutput),...y.rpId!==void 0&&{rpId:y.rpId},appSalt:t.appSalt,hkdfSalt:t.hkdfSalt},e.requestId)}else if(e.method==="passkey-gate"){let y=l;p=await At({userId:e.userId,credentialId:S(y.credentialId),...y.rpId!==void 0&&{rpId:y.rpId}},e.requestId)}else{let y=e.method;throw new Error(`Unknown method: ${String(y)}`)}return O.delete(e.transportKeyId),p}async function qt(e,t){let r=await Ce(),n=new URL("https://kms.ats.run/");n.searchParams.set("mode","setup");let a=await new Promise((o,u)=>{let d=setTimeout(()=>{u(new Error("Setup with popup timeout"))},3e5);j.set(t,{resolve:o,reject:u,timeout:d}),self.postMessage({type:"worker:setup-with-popup",requestId:t,userId:e.userId,popupURL:n.toString(),transportKey:r.publicKey,transportKeyId:r.keyId,appSalt:r.appSalt,hkdfSalt:r.hkdfSalt})});return await Ht({method:a.method,transportKeyId:a.transportKeyId,ephemeralPublicKey:a.ephemeralPublicKey,iv:a.iv,encryptedCredentials:a.encryptedCredentials,userId:a.userId,requestId:t})}self.addEventListener("message",e=>{let t=e.data;if("type"in t&&t.type==="worker:popup-credentials"){let r=t.requestId;if(r&&t.credentials){let n=j.get(r);n&&(clearTimeout(n.timeout),j.delete(r),n.resolve(t.credentials))}return}if("type"in t&&t.type==="worker:popup-error"){let r=t.requestId;if(r){let n=j.get(r);n&&(clearTimeout(n.timeout),j.delete(r),n.reject(new Error(t.reason||"Popup setup failed")))}return}if("type"in t&&t.type==="worker:unlock-credentials"){let r=t.requestId,n=t.credentials;if(r&&n){let s=ne.get(r);s&&(clearTimeout(s.timeout),ne.delete(r),s.resolve(n))}return}if("type"in t&&t.type==="worker:unlock-error"){let r=t.requestId;if(r){let n=ne.get(r);n&&(clearTimeout(n.timeout),ne.delete(r),n.reject(new Error(t.reason||"Unlock failed")))}return}(async()=>{let r=e.data,n=await Gt(r);self.postMessage(n)})().catch(r=>{console.error("[KMS Worker] Message handling failed:",r);let n=e.data;self.postMessage({id:n?.id||"unknown",error:r instanceof Error?r.message:"Unknown error"})})});async function Gt(e){let{id:t,method:r,params:n}=e;try{let s;switch(r){case"setupWithPopup":s=await qt(et(n),t);break;case"setupPassphrase":s=await ht(Ye(n),t);break;case"setupPasskeyPRF":s=await bt(Ze(n),t);break;case"setupPasskeyGate":s=await At(tt(n),t);break;case"addEnrollment":s=await Ft(rt(n),t);break;case"addEnrollmentWithPopup":s=await jt(nt(n),t);break;case"generateVAPID":s=await $t(st(n),t);break;case"regenerateVAPID":s=await Nt(at(n),t);break;case"signJWT":s=await Jt(it(n),t);break;case"createLease":s=await _t(ot(n),t);break;case"extendLeases":s=await zt(ut(n),t);break;case"issueVAPIDJWT":s=await Kt(dt(n),t);break;case"issueVAPIDJWTs":s=await Qt(ct(n),t);break;case"isSetup":s=await Xt(lt(n));break;case"getEnrollments":s=await Yt(pt(n));break;case"verifyAuditChain":s=await Zt();break;case"getAuditLog":s=await er();break;case"getPublicKey":s=await tr(yt(n));break;case"getAuditPublicKey":s=await rr();break;case"getUserLeases":s=await nr(ft(n));break;case"verifyLease":s=await sr(wt(n));break;case"getVAPIDKid":s=await ar();break;case"resetKMS":s=await dr();break;case"removeEnrollment":s=await cr(gt(n),t);break;case"setPushSubscription":s=await ir(mt(n));break;case"removePushSubscription":s=await or();break;case"getPushSubscription":s=await ur();break;default:throw new Error(`Unknown RPC method: ${r}`)}return{id:t,result:s}}catch(s){return{id:t,error:we(s)}}}async function ht(e,t){let{userId:r,passphrase:n,existingMS:s}=e;if(!n||n.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await le(r,n,s);if(!a.success)throw new Error(a.error);let i=await te(a.ms);await M(i);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let u=o,d=await crypto.subtle.exportKey("raw",u.publicKey),c=N(new Uint8Array(d)),l=await J(c);return await L(u.privateKey,i,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),a.ms.fill(0),await R({op:"setup-passphrase",kid:"",requestId:t,userId:r,details:{method:"passphrase",vapidKid:l}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:w(d),vapidKid:l}}async function bt(e,t){let{userId:r,credentialId:n,prfOutput:s,rpId:a="",existingMS:i,appSalt:o,hkdfSalt:u}=e;if(!n||n.byteLength===0)throw new Error("credentialId required");if(!s||s.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let d=await pe(r,n,s,i,a,o,u);if(!d.success)throw new Error(d.error);let c=await te(d.ms);await M(c);let l=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in l)||!("publicKey"in l))throw new Error("Failed to generate ECDSA keypair");let p=l,y=await crypto.subtle.exportKey("raw",p.publicKey),f=N(new Uint8Array(y)),b=await J(f);return await L(p.privateKey,c,b,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:y}),d.ms.fill(0),await R({op:"setup-passkey-prf",kid:"",requestId:t,userId:r,details:{method:"passkey-prf",credentialId:w(n),vapidKid:b}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:w(y),vapidKid:b}}async function At(e,t){let{userId:r,credentialId:n,rpId:s="",existingMS:a}=e;if(!n||n.byteLength===0)throw new Error("credentialId required");let i=await ye(r,n,a,s);if(!i.success)throw new Error(i.error);let o=await te(i.ms);await M(o);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let d=u,c=await crypto.subtle.exportKey("raw",d.publicKey),l=N(new Uint8Array(c)),p=await J(l);return await L(d.privateKey,o,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),i.ms.fill(0),await R({op:"setup-passkey-gate",kid:"",requestId:t,userId:r,details:{method:"passkey-gate",credentialId:w(n),vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:w(c),vapidKid:p}}async function Ft(e,t){let{userId:r,credentials:n}=e;console.log("[Worker] handleAddEnrollment START:",{userId:r,method:n.method,requestId:t}),console.log("[Worker] Step 1: Unlocking with credentials to get MS...");let a=(await B(n,async(m,T)=>(await M(m),T))).result;console.log("[Worker] Step 1: MS obtained and audit key ensured ✓"),console.log("[Worker] Step 2: Generating transport key...");let i=await Ce();console.log("[Worker] Step 2: Transport key generated ✓");let o=new URL("https://kms.ats.run/");o.searchParams.set("mode","setup"),console.log("[Worker] Step 3: Sending worker:setup-with-popup message to parent...");let u=new Promise((m,T)=>{let $=setTimeout(()=>{console.error("[Worker] Popup timeout after 5 minutes"),T(new Error("Add enrollment popup timeout"))},3e5);j.set(t,{resolve:m,reject:T,timeout:$}),console.log("[Worker] Posting message with requestId:",t),self.postMessage({type:"worker:setup-with-popup",requestId:t,userId:e.userId,popupURL:o.toString(),transportKey:i.publicKey,transportKeyId:i.keyId,appSalt:i.appSalt,hkdfSalt:i.hkdfSalt}),console.log("[Worker] Message posted, waiting for popup response...")});console.log("[Worker] Step 4: Waiting for popup credentials...");let d=await u;console.log("[Worker] Step 4: Credentials received ✓");let c=O.get(d.transportKeyId);if(!c)throw new Error("Transport key not found or expired");let l=S(d.ephemeralPublicKey),p=await crypto.subtle.importKey("raw",l,{name:"ECDH",namedCurve:"P-256"},!1,[]),y=await crypto.subtle.deriveBits({name:"ECDH",public:p},c.privateKey,256),f=await crypto.subtle.importKey("raw",y,"HKDF",!1,["deriveBits"]),b=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},f,256),I=await crypto.subtle.importKey("raw",b,{name:"AES-GCM",length:256},!1,["decrypt"]),K=S(d.iv),A=S(d.encryptedCredentials),x=await crypto.subtle.decrypt({name:"AES-GCM",iv:K,tagLength:128},I,A),P=JSON.parse(new TextDecoder().decode(x));O.delete(d.transportKeyId);let k=d.method,g;if(k==="passphrase")g=await le(r,P.passphrase,a);else if(k==="passkey-prf"){let m=P,T=m.rpId||"";g=await pe(r,S(m.credentialId),S(m.prfOutput),a,T)}else if(k==="passkey-gate"){let m=P,T=m.rpId||"";g=await ye(r,S(m.credentialId),a,T)}else{let m=k;throw new Error(`Unknown enrollment method: ${String(m)}`)}if(a.fill(0),!g.success)throw new Error(g.error);return await R({op:"add-enrollment",kid:"",requestId:t,userId:n.userId,details:{method:k,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${k}:v2`}}async function jt(e,t){let{userId:r}=e;console.log("[Worker] handleAddEnrollmentWithPopup START:",{userId:r,requestId:t}),console.log("[Worker] Step 1: Generating transport key...");let n=await Ce();console.log("[Worker] Step 1: Transport key generated ✓");let s=new URL("https://kms.ats.run/");s.searchParams.set("mode","setup"),console.log("[Worker] Step 2: Sending worker:setup-with-popup message to parent...");let a=await new Promise((k,g)=>{let m=setTimeout(()=>{console.error("[Worker] Popup timeout after 5 minutes"),g(new Error("Add enrollment popup timeout"))},3e5);j.set(t,{resolve:k,reject:g,timeout:m}),console.log("[Worker] Posting message with requestId:",t),self.postMessage({type:"worker:setup-with-popup",requestId:t,userId:r,popupURL:s.toString(),transportKey:n.publicKey,transportKeyId:n.keyId,appSalt:n.appSalt,hkdfSalt:n.hkdfSalt}),console.log("[Worker] Message posted, waiting for popup response...")});console.log("[Worker] Step 2: New credentials received from popup ✓"),console.log("[Worker] Step 3: Decrypting new credentials...");let i=O.get(a.transportKeyId);if(!i)throw new Error("Transport key not found or expired");let o=S(a.ephemeralPublicKey),u=await crypto.subtle.importKey("raw",o,{name:"ECDH",namedCurve:"P-256"},!1,[]),d=await crypto.subtle.deriveBits({name:"ECDH",public:u},i.privateKey,256),c=await crypto.subtle.importKey("raw",d,"HKDF",!1,["deriveBits"]),l=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},c,256),p=await crypto.subtle.importKey("raw",l,{name:"AES-GCM",length:256},!1,["decrypt"]),y=S(a.iv),f=S(a.encryptedCredentials),b=await crypto.subtle.decrypt({name:"AES-GCM",iv:y,tagLength:128},p,f),I=JSON.parse(new TextDecoder().decode(b));O.delete(a.transportKeyId),console.log("[Worker] Step 3: New credentials decrypted ✓"),console.log("[Worker] Step 4: Requesting unlock with existing credentials...");let K=await new Promise((k,g)=>{let m=setTimeout(()=>{console.error("[Worker] Unlock timeout after 5 minutes"),g(new Error("Unlock modal timeout"))},3e5);ne.set(t,{resolve:k,reject:g,timeout:m}),self.postMessage({type:"worker:request-unlock",requestId:t,userId:r}),console.log("[Worker] Unlock modal request sent, waiting for credentials...")});console.log("[Worker] Step 4: Unlock credentials received ✓"),console.log("[Worker] Step 5: Unlocking with existing credentials to get MS...");let x=(await B(K,async(k,g)=>(await M(k),new Uint8Array(g)))).result;console.log("[Worker] Step 5: MS obtained and audit key ensured ✓");let P=a.method;try{console.log("[Worker] Step 6: Rewrapping MS with new credentials...");let k;if(P==="passphrase")k=await le(r,I.passphrase,x);else if(P==="passkey-prf"){let g=I,m=g.rpId||"";k=await pe(r,S(g.credentialId),S(g.prfOutput),x,m)}else if(P==="passkey-gate"){let g=I,m=g.rpId||"";k=await ye(r,S(g.credentialId),x,m)}else{let g=P;throw new Error(`Unknown enrollment method: ${String(g)}`)}if(console.log("[Worker] Step 6: MS rewrapped with new credentials ✓"),!k.success)throw new Error(k.error)}finally{x.fill(0)}return await R({op:"add-enrollment-with-popup",kid:"",requestId:t,userId:r,details:{method:P,action:"add-enrollment-with-popup"}}),console.log("[Worker] handleAddEnrollmentWithPopup COMPLETE ✓"),{success:!0,enrollmentId:`enrollment:${P}:v2`}}async function $t(e,t){let{credentials:r}=e,n=await B(r,async(s,a)=>{await M(s);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let o=i,u=await crypto.subtle.exportKey("raw",o.publicKey),d=N(new Uint8Array(u)),c=await J(d);return await L(o.privateKey,s,c,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:u}),{kid:c,publicKey:w(u)}});return await R({op:"generate",kid:n.result.kid,requestId:t,userId:r.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),n.result}async function Nt(e,t){let{credentials:r}=e,n=await B(r,async(s,a)=>{await M(s);let o=(await V()).filter(y=>y.purpose==="vapid");for(let y of o)await Be(y.kid);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let d=u,c=await crypto.subtle.exportKey("raw",d.publicKey),l=N(new Uint8Array(c)),p=await J(l);return await L(d.privateKey,s,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),{kid:p,publicKey:w(c),oldKids:o.map(y=>y.kid)}});return await R({op:"regenerate-vapid",kid:n.result.kid,requestId:t,userId:r.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:n.result.oldKids,deletedCount:n.result.oldKids.length}}),{kid:n.result.kid,publicKey:n.result.publicKey}}async function Jt(e,t){let{kid:r,payload:n,credentials:s}=e;if(!n.aud||!n.sub||!n.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(n.exp<=a)throw new Error("JWT exp must be in the future");if(n.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let i=await B(s,async(o,u)=>{await M(o);let d=await Le(r,o,{name:"ECDSA",namedCurve:"P-256"},["sign"]),c={typ:"JWT",alg:"ES256",kid:r},l=w(new TextEncoder().encode(JSON.stringify(c)).buffer),p=w(new TextEncoder().encode(JSON.stringify(n)).buffer),y=new TextEncoder().encode(`${l}.${p}`),f=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},d,y),b=w(f);return{jwt:`${l}.${p}.${b}`}});return await R({op:"sign",kid:r,requestId:t,userId:s.userId,unlockTime:i.unlockTime,lockTime:i.lockTime,duration:i.duration,details:{algorithm:"ES256",aud:n.aud,exp:n.exp,jti:n.jti}}),i.result}async function _t(e,t){let{userId:r,ttlHours:n,credentials:s,autoExtend:a}=e;if(n<=0||n>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let o=(await V()).filter(K=>K.purpose==="vapid");if(o.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");o.sort((K,A)=>A.createdAt-K.createdAt);let u=o[0];if(!u)throw new Error("VAPID key record not found after filtering");let d=u.kid,c=`lease-${crypto.randomUUID()}`,l=crypto.getRandomValues(new Uint8Array(32)),p=Date.now(),y=p+n*3600*1e3,f=await B(s,async(K,A)=>{await M(K);let{delegationCert:x}=await $e(c,y),P=await Ot(A,l),k=await W(d);if(!k)throw new Error(`No wrapped key with id: ${d}`);let g=new Uint8Array(k.iv),m=k.aad,T=await crypto.subtle.unwrapKey("pkcs8",k.wrappedKey,K,{name:"AES-GCM",iv:g,additionalData:m},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),$=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",T,P,{name:"AES-GCM",iv:$}),iv:$,sessionKEK:P,lakDelegationCert:x}});await U(`sessionkek:${c}`,f.result.sessionKEK),xe.set(c,f.result.sessionKEK);let b={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},I={leaseId:c,userId:r,ttlHours:n,createdAt:p,exp:y,autoExtend:a??!0,quotas:b,wrappedLeaseKey:f.result.wrappedLeaseKey,wrappedLeaseKeyIV:f.result.iv.buffer.slice(f.result.iv.byteOffset,f.result.iv.byteOffset+f.result.iv.byteLength),leaseSalt:l.buffer.slice(l.byteOffset,l.byteOffset+l.byteLength),kid:d,lakDelegationCert:f.result.lakDelegationCert};return await he(I),await U(`quota:${c}`,{leaseId:c,tokensIssued:0,lastResetAt:p,perEndpoint:{}}),await R({op:"create-lease",kid:d,requestId:t,userId:r,details:{action:"create-lease",leaseId:c,userId:r,ttlHours:n,autoExtend:I.autoExtend}}),{leaseId:c,exp:y,quotas:b,autoExtend:I.autoExtend??!0}}async function zt(e,t){let{leaseIds:r,credentials:n,requestAuth:s}=e,a=[],i=0,o=0,u=0,d=!1;if(n)try{await B(n,async(c,l)=>(d=!0,Promise.resolve()))}catch(c){for(let l of r){let p=await Z(l);p&&p.autoExtend===!1&&(a.push({leaseId:l,status:"skipped",reason:`Authentication failed: ${we(c)}`}),o++)}if(o===r.length)return{results:a,extended:i,skipped:o,failed:u}}for(let c of r)try{let l=await Z(c);if(!l){a.push({leaseId:c,status:"skipped",reason:`Lease not found: ${c}`}),o++;continue}if(l.autoExtend===!1&&!s){a.push({leaseId:c,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),o++;continue}if(l.autoExtend===!1&&s&&!d){a.push({leaseId:c,status:"skipped",reason:"Authentication required but credentials not valid"}),o++;continue}let y=(await V()).filter(x=>x.purpose==="vapid");if(y.length===0){a.push({leaseId:c,status:"skipped",reason:"No VAPID key found"}),o++;continue}y.sort((x,P)=>P.createdAt-x.createdAt);let b=y[0].kid;if(l.kid!==b){a.push({leaseId:c,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${l.kid}, current kid: ${b})`}),o++;continue}let I=Date.now(),K=I+30*24*60*60*1e3,A={...l,exp:K,createdAt:I};await he(A),await R({op:"extend-lease",kid:A.kid,requestId:t,userId:A.userId,details:{action:"extend-lease",leaseId:A.leaseId,userId:A.userId,newExp:K,autoExtend:A.autoExtend}}),a.push({leaseId:c,status:"extended",result:{leaseId:A.leaseId,exp:A.exp,iat:A.createdAt,kid:A.kid,autoExtend:A.autoExtend??!1}}),i++}catch(l){a.push({leaseId:c,status:"skipped",reason:`Error extending lease: ${we(l)}`}),u++}return{results:a,extended:i,skipped:o,failed:u}}async function Kt(e,t){let{leaseId:r}=e,{kid:n}=e;if(!n){let X=(await V()).filter(Pt=>Pt.purpose==="vapid");if(X.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(X.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let Re=X[0];if(!Re)throw new Error("No VAPID key found after filtering");n=Re.kid}let s=await Z(r);if(!s)throw new Error(`Lease not found: ${r}`);if(Date.now()>=s.exp)throw new Error("Lease expired");let i=(await V()).filter(H=>H.purpose==="vapid");if(i.length===0)throw new Error("No VAPID key available");i.sort((H,X)=>X.createdAt-H.createdAt);let o=i[0]?.kid;if(!o)throw new Error("Failed to determine current VAPID key");if(s.kid!==o)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await Ne(r,s.lakDelegationCert);let u=await Ae();if(!u)throw new Error("No push subscription found. Call setPushSubscription() first.");let d=await C(`quota:${r}`),c=kt(d),l=Date.now()-3600*1e3;if(c.lastResetAt<l&&(c.tokensIssued=0,c.lastResetAt=Date.now()),c.tokensIssued>=s.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");c.tokensIssued++,await U(`quota:${r}`,c);let p=e.jti??crypto.randomUUID(),y=e.exp??Math.floor(Date.now()/1e3)+900,f=new URL(u.endpoint),b=`${f.protocol}//${f.host}`,I={aud:b,sub:"mailto:kms@example.com",exp:y,jti:p,uid:s.userId,eid:u.eid},K=xe.get(r);if(!K){let H=await C(`sessionkek:${r}`);if(!H)throw new Error(`SessionKEK not found for lease: ${r}`);K=H,xe.set(r,K)}let A=s.wrappedLeaseKey,x=new Uint8Array(s.wrappedLeaseKeyIV),P=await crypto.subtle.unwrapKey("pkcs8",A,K,{name:"AES-GCM",iv:x},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),k={typ:"JWT",alg:"ES256",kid:s.kid},g=w(new TextEncoder().encode(JSON.stringify(k)).buffer),m=w(new TextEncoder().encode(JSON.stringify(I)).buffer),T=new TextEncoder().encode(`${g}.${m}`),$=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},P,T),De=w($),It=`${g}.${m}.${De}`,vt=await R({op:"sign",kid:s.kid,requestId:t,userId:s.userId,leaseId:r,details:{action:"issue-lease-jwt",jti:p,aud:b,eid:u.eid}});return{jwt:It,jti:p,exp:y,auditEntry:vt}}async function Qt(e,t){let{leaseId:r,count:n,kid:s}=e;if(!Number.isInteger(n)||n<1||n>10)throw new Error("count must be an integer between 1 and 10");let a=900,i=Math.floor(a*.6),o=Math.floor(Date.now()/1e3),u=[];for(let d=0;d<n;d++){let c=crypto.randomUUID(),l=o+a+d*i,p=await Kt({leaseId:r,...s!==void 0&&{kid:s},jti:c,exp:l},`${t}-${d}`);u.push(p)}return u}async function Xt(e){let t=e?.userId??"default",r=await Fe(t),n=[];await Ie(t)&&n.push("passphrase"),await ve(t)&&n.push("passkey");let s;return r&&e?.userId&&(s=await be(e.userId)),{isSetup:r,methods:n,...s!==void 0&&{leases:s}}}async function Yt(e){let t=e?.userId??"default",r=[];if(await Ie(t)&&r.push("enrollment:passphrase:v2"),await ve(t)){let n=await C(`enrollment:passkey-prf:v2:${t}`),s=await C(`enrollment:passkey-gate:v2:${t}`);n&&r.push("enrollment:passkey-prf:v2"),s&&r.push("enrollment:passkey-gate:v2")}return{enrollments:r}}async function Zt(){return await _e()}async function er(){return{entries:await Q()}}async function tr(e){let{kid:t}=e,r=await W(t);if(!r||!r.publicKeyRaw)throw new Error(`Public key not found for kid: ${t}`);return{publicKey:w(r.publicKeyRaw)}}async function rr(){return await ze()}async function nr(e){let{userId:t}=e;return{leases:await be(t)}}async function sr(e){let{leaseId:t,deleteIfInvalid:r=!1}=e,n=await Z(t);if(!n)return{leaseId:t,valid:!1,reason:"not-found",kid:""};if(Date.now()>=n.exp)return r&&await ee(t),{leaseId:t,valid:!1,reason:"expired",kid:n.kid};let a=(await V()).filter(u=>u.purpose==="vapid");if(a.length===0)return r&&await ee(t),{leaseId:t,valid:!1,reason:"no-vapid-key",kid:n.kid};a.sort((u,d)=>d.createdAt-u.createdAt);let i=a[0];if(!i)return r&&await ee(t),{leaseId:t,valid:!1,reason:"no-vapid-key",kid:n.kid};let o=i.kid;return n.kid!==o?(r&&await ee(t),{leaseId:t,valid:!1,reason:"wrong-key",kid:n.kid}):{leaseId:t,valid:!0,kid:n.kid}}async function ar(){let t=(await V()).filter(n=>n.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");return{kid:r.kid}}async function ir(e){return await qe(e.subscription),{success:!0}}async function or(){return await Ge(),{success:!0}}async function ur(){return{subscription:await Ae()}}async function dr(){Me();let e=indexedDB.deleteDatabase("kms-v2");return await new Promise((t,r)=>{e.onsuccess=()=>t(),e.onerror=()=>r(new Error(e.error?.message??"Failed to delete database"))}),await ie(),Qe(),{success:!0}}async function cr(e,t){let{enrollmentId:r,credentials:n}=e;return await B(n,async(s,a)=>(await M(s),!0)),await We(r),await R({op:"reset",kid:"",requestId:t,userId:n.userId,details:{action:"remove-enrollment",enrollmentId:r}}),{success:!0}}(async()=>{try{await ie(),await je(),await Je(),(await Q()).length===0&&await R({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(e){console.error("[KMS Worker] Initialization failed:",e)}})();export{Gt as handleMessage};
