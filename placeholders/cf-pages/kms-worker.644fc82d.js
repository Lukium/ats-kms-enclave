function f(e){let t=new Uint8Array(e),r=Array.from(t,s=>String.fromCharCode(s)).join("");return btoa(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function L(e){let t=e.replace(/-/g,"+").replace(/_/g,"/"),r=t.length%4;r&&(t+="=".repeat(4-r));let n=atob(t),s=new Uint8Array(n.length);for(let a=0;a<n.length;a++)s[a]=n.charCodeAt(a);return s.buffer}function q(e){if(e.length!==65||e[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let t=f(e.slice(1,33).buffer),r=f(e.slice(33).buffer);return{kty:"EC",crv:"P-256",x:t,y:r}}async function j(e){let t={crv:e.crv,kty:e.kty,x:e.x,y:e.y},r=JSON.stringify(t),n=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(r));return f(n)}function Ve(e){return"{"+Object.keys(e).sort().map(n=>[n,e[n]]).map(([n,s])=>`"${String(n)}":${JSON.stringify(s)}`).join(",")+"}"}function ee(e){let t={kmsVersion:e.kmsVersion,method:e.method,algVersion:e.algVersion,purpose:e.purpose};e.credentialId&&(t.credentialId=f(e.credentialId));let r=Ve(t);return new TextEncoder().encode(r).buffer}function te(e){let t={kmsVersion:e.kmsVersion,kid:e.kid,alg:e.alg,purpose:e.purpose,createdAt:e.createdAt,keyType:e.keyType},r=Ve(t);return new TextEncoder().encode(r).buffer}async function pe(e){let t=await crypto.subtle.exportKey("raw",e),r=await crypto.subtle.importKey("raw",t,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),n=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",r,n)}function Te(e,t){return Pt(e,t)}function Pt(e,t){let r=new Uint8Array(e),n=new Uint8Array(t);if(r.length!==n.length)return!1;let s=0;for(let a=0;a<r.length;a++)s|=r[a]^n[a];return s===0}async function N(e){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(e))}async function Be(e={min:150,max:300,mid:220}){let t=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),r=crypto.getRandomValues(new Uint8Array(16)),n=1e5,s=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:r,iterations:n},t,256);let o=performance.now()-s,i=Math.round(n*e.mid/o);return i=Math.min(Math.max(i,5e4),2e6),{iterations:i,measuredMs:o}}var Et="kms-v2",St=1,U=null;async function re(){return new Promise((e,t)=>{let r=indexedDB.open(Et,St);r.onerror=()=>{t(new Error("Failed to open IndexedDB"))},r.onsuccess=()=>{U=r.result,e()},r.onupgradeneeded=n=>{let s=n.target.result;if(s.objectStoreNames.contains("config")||s.createObjectStore("config",{keyPath:"method"}),!s.objectStoreNames.contains("keys")){let a=s.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!s.objectStoreNames.contains("leases")){let a=s.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!s.objectStoreNames.contains("audit")){let a=s.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}s.objectStoreNames.contains("meta")||s.createObjectStore("meta",{keyPath:"key"})}})}async function H(){if(U||await re(),!U)throw new Error("Database not initialized");return U}function Le(){U&&(U.close(),U=null)}async function ne(e,t){let r=await H();return new Promise((n,s)=>{let i=r.transaction(e,"readonly").objectStore(e).get(t);i.onsuccess=()=>{n(i.result)},i.onerror=()=>{s(new Error(`Failed to get from ${e}`))}})}async function $(e,t){let r=await H();return new Promise((n,s)=>{let i=r.transaction(e,"readwrite").objectStore(e).put(t);i.onsuccess=()=>{n()},i.onerror=()=>{s(new Error(`Failed to put to ${e}`))}})}async function ye(e,t){let r=await H();return new Promise((n,s)=>{let i=r.transaction(e,"readwrite").objectStore(e).delete(t);i.onsuccess=()=>{n()},i.onerror=()=>{s(new Error(`Failed to delete from ${e}`))}})}async function xt(e){let t=await H();return new Promise((r,n)=>{let o=t.transaction(e,"readonly").objectStore(e).getAll();o.onsuccess=()=>{r(o.result)},o.onerror=()=>{n(new Error(`Failed to getAll from ${e}`))}})}async function D(e,t,r,n=e.algorithm,s=e.usages,a={alg:"unknown",purpose:"unknown"}){let o=crypto.getRandomValues(new Uint8Array(12)),i=Date.now(),d=te({kmsVersion:2,kid:r,alg:a.alg,purpose:a.purpose,createdAt:i,keyType:Array.isArray(s)?s.join(","):String(s)}),c=e.type==="private"?"pkcs8":"raw",u=await crypto.subtle.exportKey(c,e),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:o,additionalData:d},t,u),p={kid:r,kmsVersion:2,wrappedKey:l,iv:o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength),aad:d,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:i};await $("keys",p)}async function Ue(e,t,r,n=[]){let s=await ne("keys",e);if(!s)throw new Error(`No wrapped key with id: ${e}`);let a=new Uint8Array(s.iv),o=s.aad,i=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:o},t,s.wrappedKey),d=typeof r=="string"?r:r.name,u=d==="ECDSA"||d==="ECDH"||d==="Ed25519"||d.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(u,i,r,!1,n)}async function V(e){return await ne("keys",e)??null}async function S(){return xt("keys")}async function Me(e){await ye("keys",e)}async function A(e){let t=await ne("meta",e);return t?t.value:null}async function x(e,t){await $("meta",{key:e,value:t})}async function We(e){await ye("meta",e)}async function Oe(e){await $("audit",e)}async function F(){let e=await H();return new Promise((t,r)=>{let o=e.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();o.onsuccess=()=>{t(o.result)},o.onerror=()=>{r(new Error("Failed to get audit entries"))}})}async function qe(){let e=await F();return e.length>0?e[e.length-1]:null}async function fe(e){await $("leases",e)}async function J(e){return await ne("leases",e)??null}async function we(e){let t=await H();return new Promise((r,n)=>{let i=t.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(e);i.onsuccess=()=>{r(i.result)},i.onerror=()=>{n(new Error("Failed to get user leases"))}})}async function _(e){await ye("leases",e)}async function je(e){let r=(await S()).filter(a=>a.purpose==="vapid");if(r.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(r.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let n=r[0];if(!n)throw new Error("No VAPID key found after filtering");let s={...n,subscription:e};await $("keys",s)}async function He(){let t=(await S()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");let{subscription:n,...s}=r;await $("keys",s)}async function ge(){let t=(await S()).filter(n=>n.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");return r.subscription??null}var se=e=>`enrollment:passphrase:v2:${e}`,ae=e=>`enrollment:passkey-prf:v2:${e}`,ie=e=>`enrollment:passkey-gate:v2:${e}`;function me(){let e=new Uint8Array(32);return crypto.getRandomValues(e),e}async function he(e,t,r){let n=r??me(),{iterations:s}=await Be(),a=crypto.getRandomValues(new Uint8Array(16)),o=await crypto.subtle.importKey("raw",new TextEncoder().encode(t),"PBKDF2",!1,["deriveKey"]),i=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:s},o,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),d=await pe(i),c=crypto.getRandomValues(new Uint8Array(12)),u=ee({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,additionalData:u},i,n),p={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:s,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:d,encryptedMS:l,msIV:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),msAAD:u,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await x(se(e),p),{success:!0,ms:n}}async function ke(e,t,r,n,s="",a,o){let i=n??me(),d=a??crypto.getRandomValues(new Uint8Array(32)),c=o??await N("ATS/KMS/KEK-wrap/salt/v2"),u=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),l=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]),p=c instanceof Uint8Array?c.buffer:c,y=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:p,info:u},l,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),g=crypto.getRandomValues(new Uint8Array(12)),h=ee({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:t,purpose:"master-secret"}),v=await crypto.subtle.encrypt({name:"AES-GCM",iv:g,additionalData:h},y,i),K=Date.now(),k=d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),E;c instanceof Uint8Array?E=c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength):E=c;let R={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:t,rpId:s,kdf:{algorithm:"HKDF-SHA256",appSalt:k,hkdfSalt:E,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:v,msIV:g.buffer.slice(g.byteOffset,g.byteOffset+g.byteLength),msAAD:h,msVersion:1,createdAt:K,updatedAt:K};return await x(ae(e),R),{success:!0,ms:i}}async function be(e,t,r,n=""){let s=r??me(),a=crypto.getRandomValues(new Uint8Array(32)),o=await N("ATS/KMS/KEK-gate/salt/v2"),i=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),d=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),c=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:o,info:i},d,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),u=crypto.getRandomValues(new Uint8Array(12)),l=ee({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:t,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:u,additionalData:l},c,s),y=Date.now(),g={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:t,rpId:n,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:p,msIV:u.buffer.slice(u.byteOffset,u.byteOffset+u.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await x(ie(e),g),{success:!0,ms:s}}async function Ae(e,t){let r=await A(se(e));if(!r)return{success:!1,error:"Passphrase not set up"};let n=await crypto.subtle.importKey("raw",new TextEncoder().encode(t),"PBKDF2",!1,["deriveKey"]),s=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:r.kdf.salt,iterations:r.kdf.iterations},n,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await pe(s);if(!Te(a,r.kcv))return{success:!1,error:"Invalid passphrase"};try{let o=await crypto.subtle.decrypt({name:"AES-GCM",iv:r.msIV,additionalData:r.msAAD},s,r.encryptedMS);return{success:!0,ms:new Uint8Array(o)}}catch{return{success:!1,error:"Decryption failed"}}}async function Ke(e,t){let r=await A(ae(e));if(!r)return{success:!1,error:"Passkey not set up"};let n=r.kdf.hkdfSalt,s=new TextEncoder().encode(r.kdf.info),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let i=await crypto.subtle.decrypt({name:"AES-GCM",iv:r.msIV,additionalData:r.msAAD},o,r.encryptedMS);return{success:!0,ms:new Uint8Array(i)}}catch{return{success:!1,error:"Decryption failed"}}}async function Ie(e){let t=await A(ie(e));if(!t)return{success:!1,error:"Passkey gate not set up"};let r=new Uint8Array(t.pepperWrapped),n=await N("ATS/KMS/KEK-gate/salt/v2"),s=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]),o=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let i=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},o,t.encryptedMS);return{success:!0,ms:new Uint8Array(i)}}catch{return{success:!1,error:"Decryption failed"}}}async function $e(e){let t=await A(se(e)),r=await A(ae(e)),n=await A(ie(e));return!!(t||r||n)}async function ve(e){return!!await A(se(e))}async function Pe(e){let t=await A(ae(e)),r=await A(ie(e));return!!(t||r)}async function z(e){let t=await N("ATS/KMS/MKEK/salt/v2"),r=new TextEncoder().encode("ATS/KMS/MKEK/v2"),n=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:t,info:r},n,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function T(e,t){let r=Date.now(),n=null;try{let s;switch(e.method){case"passphrase":s=await Ae(e.userId,e.passphrase);break;case"passkey-prf":s=await Ke(e.userId,e.prfOutput);break;case"passkey-gate":s=await Ie(e.userId);break;default:throw new Error("Unknown credential method")}if(!s.success)throw new Error(s.error??"Unlock failed");n=s.ms;let a=await z(n),o=await t(a,n),i=Date.now();return{result:o,unlockTime:r,lockTime:i,duration:i-r}}finally{n&&n.fill(0)}}var Ee=Promise.resolve(),I=null;async function Fe(){}async function oe(){let e=await A("LRK");return e||(e=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await x("LRK",e)),e}async function Q(e){let t=await crypto.subtle.digest("SHA-256",e);return f(t)}async function C(e){let t=await V("audit-user");if(t&&t.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,e,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),o=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),i=await Q(t.publicKeyRaw);I={type:"UAK",keyPair:{privateKey:a,publicKey:o},keyId:i};return}let r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),n=await crypto.subtle.exportKey("raw",r.publicKey);await D(r.privateKey,e,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:n});let s=await Q(n);I={type:"UAK",keyPair:r,keyId:s}}async function Ge(e,t){if(!I||I.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let r=Date.now(),n=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",n.publicKey),a=f(s),o={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:e,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:r,notAfter:t,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},i=JSON.stringify(o,Object.keys(o).sort()),d=await crypto.subtle.sign("Ed25519",I.keyPair.privateKey,new TextEncoder().encode(i)),c={...o,sig:f(d)},u=await oe(),l=te({kmsVersion:2,kid:`lak-${e}`,alg:"EdDSA",purpose:"lak",createdAt:r,keyType:"lease-audit-key"}),p=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",n.privateKey,u,{name:"AES-GCM",iv:p,additionalData:l});return await x(`lease-audit-key:${e}`,{leaseId:e,wrappedKey:y,iv:p,aad:l,publicKeyRaw:s,delegationCert:c,expiresAt:t,createdAt:r}),{lakKeyPair:n,delegationCert:c}}async function Ne(e,t){let r=await A(`lease-audit-key:${e}`);if(!r)throw new Error(`LAK not found for lease: ${e}`);let n=await oe(),s=await crypto.subtle.unwrapKey("pkcs8",r.wrappedKey,n,{name:"AES-GCM",iv:r.iv,additionalData:r.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",r.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),o=await Q(r.publicKeyRaw);I={type:"LAK",keyPair:{privateKey:s,publicKey:a},keyId:o,cert:t}}async function Je(){let e=await V("audit-instance");if(e&&e.publicKeyRaw){let d=await oe(),c=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,d,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),u=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),l=await Q(e.publicKeyRaw);I={type:"KIAK",keyPair:{privateKey:c,publicKey:u},keyId:l};return}let t=await oe(),r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),n=await crypto.subtle.exportKey("raw",r.publicKey);await D(r.privateKey,t,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:n});let s=await V("audit-instance");if(!s)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",s.wrappedKey,t,{name:"AES-GCM",iv:s.iv,additionalData:s.aad},{name:"Ed25519"},!1,["sign"]),o=await crypto.subtle.importKey("raw",n,{name:"Ed25519"},!1,["verify"]),i=await Q(n);I={type:"KIAK",keyPair:{privateKey:a,publicKey:o},keyId:i}}async function P(e){let t,r,n=new Promise((s,a)=>{t=s,r=a});return Ee=Ee.then(async()=>{try{if(!I)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let s=Date.now(),a=await qe(),o=a?a.chainHash:"",d={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:s,op:e.op,kid:e.kid,requestId:e.requestId,userId:e.userId,origin:e.origin,leaseId:e.leaseId,unlockTime:e.unlockTime,lockTime:e.lockTime,duration:e.duration,details:e.details,previousHash:o,signer:I.type,signerId:I.keyId},c=JSON.stringify(d),u=new TextEncoder().encode(o+c),l=await crypto.subtle.digest("SHA-256",u),p=f(l),y=new TextEncoder().encode(p),g=await crypto.subtle.sign("Ed25519",I.keyPair.privateKey,y),h=f(g),v={kmsVersion:d.kmsVersion,seqNum:d.seqNum,timestamp:d.timestamp,op:d.op,kid:d.kid,requestId:d.requestId,userId:d.userId,...d.origin!==void 0&&{origin:d.origin},...d.leaseId!==void 0&&{leaseId:d.leaseId},...d.unlockTime!==void 0&&{unlockTime:d.unlockTime},...d.lockTime!==void 0&&{lockTime:d.lockTime},...d.duration!==void 0&&{duration:d.duration},...d.details!==void 0&&{details:d.details},previousHash:d.previousHash,chainHash:p,signer:d.signer,signerId:d.signerId,...I.cert!==void 0&&{cert:I.cert},sig:h};await Oe(v),t(v)}catch(s){r(s)}}).catch(()=>{}),n}async function _e(){let e=await F(),t=[],r=0;for(let n of e){let s={kmsVersion:n.kmsVersion,seqNum:n.seqNum,timestamp:n.timestamp,op:n.op,kid:n.kid,requestId:n.requestId,userId:n.userId,origin:n.origin,leaseId:n.leaseId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:n.details,previousHash:n.previousHash,signer:n.signer,signerId:n.signerId},a=JSON.stringify(s),o=new TextEncoder().encode(n.previousHash+a),i=await crypto.subtle.digest("SHA-256",o);f(i)!==n.chainHash&&t.push(`Chain hash mismatch at seq ${n.seqNum}`),r+=1}return{valid:t.length===0,verified:r,errors:t}}async function ze(){let e=await V("audit-user");if(!e||!e.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:f(e.publicKeyRaw)}}function Qe(){I=null,Ee=Promise.resolve()}function ue(e){if(e instanceof Error)return e.message;if(typeof e=="string")return e;if(typeof e=="object"&&e!==null&&"message"in e&&typeof e.message=="string")return e.message;try{return String(e)}catch{return"Unknown error"}}var m=class extends Error{constructor(r,n,s,a){super(`RPC ${r}: Invalid ${n} - expected ${s}, got ${typeof a}`);this.method=r;this.param=n;this.expected=s;this.received=a;this.name="RPCValidationError"}};function b(e,t){if(typeof t!="object"||t===null)throw new m(e,"params","object",t);return t}function w(e,t,r){if(typeof r!="string")throw new m(e,t,"string",r);return r}function M(e,t,r){if(r!==void 0)return w(e,t,r)}function de(e,t,r){if(typeof r!="number")throw new m(e,t,"number",r);return r}function Ct(e,t,r){if(typeof r!="boolean")throw new m(e,t,"boolean",r);return r}function Xe(e,t,r){if(r!==void 0)return Ct(e,t,r)}function Se(e,t,r){if(r instanceof ArrayBuffer)return r;if(r instanceof Uint8Array){let n=new ArrayBuffer(r.byteLength);return new Uint8Array(n).set(r),n}throw new m(e,t,"ArrayBuffer or Uint8Array",r)}function xe(e,t,r){if(r!==void 0){if(r instanceof Uint8Array)return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);throw new m(e,t,"ArrayBuffer or Uint8Array",r)}}function W(e,t){if(typeof t!="object"||t===null)throw new m(e,"credentials","AuthCredentials object",t);let r=t;if(typeof r.method!="string")throw new m(e,"credentials.method","string",r.method);if(typeof r.userId!="string")throw new m(e,"credentials.userId","string",r.userId);switch(r.method){case"passphrase":if(typeof r.passphrase!="string")throw new m(e,"credentials.passphrase","string",r.passphrase);return{method:"passphrase",passphrase:r.passphrase,userId:r.userId};case"passkey-prf":if(!(r.prfOutput instanceof ArrayBuffer))throw new m(e,"credentials.prfOutput","ArrayBuffer",r.prfOutput);return{method:"passkey-prf",prfOutput:r.prfOutput,userId:r.userId};case"passkey-gate":return{method:"passkey-gate",userId:r.userId};default:throw new m(e,"credentials.method","passphrase | passkey-prf | passkey-gate",r.method)}}function Dt(e,t){if(typeof t!="object"||t===null)throw new m(e,"payload","VAPIDPayload object",t);let r=t;return{aud:w(e,"payload.aud",r.aud),sub:w(e,"payload.sub",r.sub),exp:de(e,"payload.exp",r.exp),jti:w(e,"payload.jti",r.jti)}}function Ye(e){let t=b("setupPassphrase",e),r=xe("setupPassphrase","existingMS",t.existingMS);return{userId:w("setupPassphrase","userId",t.userId),passphrase:w("setupPassphrase","passphrase",t.passphrase),...r!==void 0&&{existingMS:r}}}function Ze(e){let t=b("setupPasskeyPRF",e);if(!t.credentialId)throw new Error("credentialId required");let r=M("setupPasskeyPRF","rpId",t.rpId),n=xe("setupPasskeyPRF","existingMS",t.existingMS);return{userId:w("setupPasskeyPRF","userId",t.userId),credentialId:Se("setupPasskeyPRF","credentialId",t.credentialId),prfOutput:Se("setupPasskeyPRF","prfOutput",t.prfOutput),...r!==void 0&&{rpId:r},...n!==void 0&&{existingMS:n}}}function et(e){let t=b("setupWithEncryptedCredentials",e),r=w("setupWithEncryptedCredentials","method",t.method);if(r!=="passphrase"&&r!=="passkey-prf"&&r!=="passkey-gate")throw new m("setupWithEncryptedCredentials","method","passphrase | passkey-prf | passkey-gate",r);return{method:r,transportKeyId:w("setupWithEncryptedCredentials","transportKeyId",t.transportKeyId),ephemeralPublicKey:w("setupWithEncryptedCredentials","ephemeralPublicKey",t.ephemeralPublicKey),iv:w("setupWithEncryptedCredentials","iv",t.iv),encryptedCredentials:w("setupWithEncryptedCredentials","encryptedCredentials",t.encryptedCredentials),userId:w("setupWithEncryptedCredentials","userId",t.userId),requestId:w("setupWithEncryptedCredentials","requestId",t.requestId)}}function tt(e){let t=b("setupPasskeyGate",e),r=M("setupPasskeyGate","rpId",t.rpId),n=xe("setupPasskeyGate","existingMS",t.existingMS);return{userId:w("setupPasskeyGate","userId",t.userId),credentialId:Se("setupPasskeyGate","credentialId",t.credentialId),...r!==void 0&&{rpId:r},...n!==void 0&&{existingMS:n}}}function rt(e){let t=b("addEnrollment",e),r=w("addEnrollment","method",t.method);if(r!=="passphrase"&&r!=="passkey-prf"&&r!=="passkey-gate")throw new m("addEnrollment","method","passphrase | passkey-prf | passkey-gate",r);return{userId:w("addEnrollment","userId",t.userId),method:r,credentials:W("addEnrollment",t.credentials),newCredentials:t.newCredentials}}function nt(e){let t=b("generateVAPID",e);return{credentials:W("generateVAPID",t.credentials)}}function st(e){let t=b("regenerateVAPID",e);return{credentials:W("regenerateVAPID",t.credentials)}}function at(e){let t=b("signJWT",e);return{kid:w("signJWT","kid",t.kid),payload:Dt("signJWT",t.payload),credentials:W("signJWT",t.credentials)}}function it(e){let t=b("createLease",e),r={userId:w("createLease","userId",t.userId),ttlHours:de("createLease","ttlHours",t.ttlHours),credentials:W("createLease",t.credentials)},n=Xe("createLease","autoExtend",t.autoExtend);return n!==void 0&&(r.autoExtend=n),r}function ot(e){let t=b("extendLeases",e);if(!Array.isArray(t.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof t.leaseIds}`);if(t.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let n={leaseIds:t.leaseIds.map((a,o)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${o} - expected non-empty string`);return a}),userId:w("extendLeases","userId",t.userId)},s=Xe("extendLeases","requestAuth",t.requestAuth);return s!==void 0&&(n.requestAuth=s),t.credentials!==void 0&&(n.credentials=W("extendLeases",t.credentials)),n}function ut(e){let t=b("issueVAPIDJWT",e),r=M("issueVAPIDJWT","kid",t.kid),n=M("issueVAPIDJWT","jti",t.jti),s=t.exp!==void 0?de("issueVAPIDJWT","exp",t.exp):void 0;return{leaseId:w("issueVAPIDJWT","leaseId",t.leaseId),...r!==void 0&&{kid:r},...n!==void 0&&{jti:n},...s!==void 0&&{exp:s}}}function dt(e){let t=b("issueVAPIDJWTs",e),r=M("issueVAPIDJWTs","kid",t.kid);return{leaseId:w("issueVAPIDJWTs","leaseId",t.leaseId),count:de("issueVAPIDJWTs","count",t.count),...r!==void 0&&{kid:r}}}function ct(e){if(e==null)return{};let t=b("isSetup",e),r=M("isSetup","userId",t.userId);return r!==void 0?{userId:r}:{}}function lt(e){if(e==null)return{};let t=b("getEnrollments",e),r=M("getEnrollments","userId",t.userId);return r!==void 0?{userId:r}:{}}function pt(e){let t=b("getPublicKey",e);return{kid:w("getPublicKey","kid",t.kid)}}function yt(e){let t=b("getUserLeases",e);return{userId:w("getUserLeases","userId",t.userId)}}function ft(e){let t=b("verifyLease",e),r={leaseId:w("verifyLease","leaseId",t.leaseId)};if("deleteIfInvalid"in t){if(typeof t.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");r.deleteIfInvalid=t.deleteIfInvalid}return r}function wt(e){let t=b("removeEnrollment",e);return{enrollmentId:w("removeEnrollment","enrollmentId",t.enrollmentId),credentials:W("removeEnrollment",t.credentials)}}var Rt=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"];function Vt(e,t){if(typeof t!="object"||t===null)throw new m(e,"subscription","object",t);let r=t,n=w(e,"subscription.endpoint",r.endpoint);if(!n.startsWith("https://"))throw new Error(`${e}: subscription.endpoint must use HTTPS`);let s;try{s=new URL(n)}catch{throw new Error(`${e}: subscription.endpoint is not a valid URL`)}if(!Rt.some(p=>s.hostname===p||s.hostname.endsWith(`.${p}`)))throw new Error(`${e}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${s.hostname}`);let o=r.expirationTime;if(o!==null&&typeof o!="number")throw new m(e,"subscription.expirationTime","number or null",o);if(typeof r.keys!="object"||r.keys===null)throw new m(e,"subscription.keys","object",r.keys);let i=r.keys,d=w(e,"subscription.keys.p256dh",i.p256dh),c=w(e,"subscription.keys.auth",i.auth);if(d.length===0)throw new Error(`${e}: subscription.keys.p256dh must be non-empty`);if(c.length===0)throw new Error(`${e}: subscription.keys.auth must be non-empty`);let u=w(e,"subscription.eid",r.eid);if(u.length===0)throw new Error(`${e}: subscription.eid must be non-empty`);let l=r.createdAt;if(typeof l!="number")throw new m(e,"subscription.createdAt","number",l);return{endpoint:n,expirationTime:o,keys:{p256dh:d,auth:c},eid:u,createdAt:l}}function gt(e){let t=b("setPushSubscription",e);return{subscription:Vt("setPushSubscription",t.subscription)}}function Bt(e){if(typeof e!="object"||e===null)return!1;let t=e;return typeof t.tokensIssued=="number"&&typeof t.lastResetAt=="number"}function mt(e){return Bt(e)?e:{tokensIssued:0,lastResetAt:Date.now()}}var Ce=new Map,ce=new Map;async function Lt(e,t){let r=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:t,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},r,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function Ut(){let e=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),t=await crypto.subtle.exportKey("raw",e.publicKey),r=crypto.randomUUID(),n=crypto.getRandomValues(new Uint8Array(32)),s=crypto.getRandomValues(new Uint8Array(32));return ce.set(r,{privateKey:e.privateKey,appSalt:n,hkdfSalt:s,createdAt:Date.now()}),setTimeout(()=>{ce.delete(r)},10*60*1e3),{publicKey:f(t),keyId:r,appSalt:f(n.buffer),hkdfSalt:f(s.buffer)}}async function Mt(e){let t=ce.get(e.transportKeyId);if(!t)throw new Error("Transport key not found or expired");try{let r=L(e.ephemeralPublicKey),n=await crypto.subtle.importKey("raw",r,{name:"ECDH",namedCurve:"P-256"},!1,[]),s=await crypto.subtle.deriveBits({name:"ECDH",public:n},t.privateKey,256),a=await crypto.subtle.importKey("raw",s,"HKDF",!1,["deriveBits"]),o=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},a,256),i=await crypto.subtle.importKey("raw",o,{name:"AES-GCM",length:256},!1,["decrypt"]),d=L(e.iv),c=L(e.encryptedCredentials),u=await crypto.subtle.decrypt({name:"AES-GCM",iv:d,tagLength:128},i,c),l=JSON.parse(new TextDecoder().decode(u)),p;if(e.method==="passphrase"){let y=l;p=await ht({userId:e.userId,passphrase:y.passphrase},e.requestId)}else if(e.method==="passkey-prf"){let y=l;p=await kt({userId:e.userId,credentialId:L(y.credentialId),prfOutput:L(y.prfOutput),...y.rpId!==void 0&&{rpId:y.rpId},appSalt:t.appSalt,hkdfSalt:t.hkdfSalt},e.requestId)}else if(e.method==="passkey-gate"){let y=l;p=await bt({userId:e.userId,credentialId:L(y.credentialId),...y.rpId!==void 0&&{rpId:y.rpId}},e.requestId)}else{let y=e.method;throw new Error(`Unknown method: ${String(y)}`)}return ce.delete(e.transportKeyId),p}catch(r){throw r}}self.addEventListener("message",e=>{(async()=>{let t=e.data,r=await Wt(t);self.postMessage(r)})().catch(t=>{console.error("[KMS Worker] Message handling failed:",t);let r=e.data;self.postMessage({id:r?.id||"unknown",error:t instanceof Error?t.message:"Unknown error"})})});async function Wt(e){let{id:t,method:r,params:n}=e;try{let s;switch(r){case"generateSetupTransportKey":s=await Ut();break;case"setupWithEncryptedCredentials":s=await Mt(et(n));break;case"setupPassphrase":s=await ht(Ye(n),t);break;case"setupPasskeyPRF":s=await kt(Ze(n),t);break;case"setupPasskeyGate":s=await bt(tt(n),t);break;case"addEnrollment":s=await Ot(rt(n),t);break;case"generateVAPID":s=await qt(nt(n),t);break;case"regenerateVAPID":s=await jt(st(n),t);break;case"signJWT":s=await Ht(at(n),t);break;case"createLease":s=await $t(it(n),t);break;case"extendLeases":s=await Ft(ot(n),t);break;case"issueVAPIDJWT":s=await At(ut(n),t);break;case"issueVAPIDJWTs":s=await Gt(dt(n),t);break;case"isSetup":s=await Nt(ct(n));break;case"getEnrollments":s=await Jt(lt(n));break;case"verifyAuditChain":s=await _t();break;case"getAuditLog":s=await zt();break;case"getPublicKey":s=await Qt(pt(n));break;case"getAuditPublicKey":s=await Xt();break;case"getUserLeases":s=await Yt(yt(n));break;case"verifyLease":s=await Zt(ft(n));break;case"getVAPIDKid":s=await er();break;case"resetKMS":s=await sr();break;case"removeEnrollment":s=await ar(wt(n),t);break;case"setPushSubscription":s=await tr(gt(n));break;case"removePushSubscription":s=await rr();break;case"getPushSubscription":s=await nr();break;default:throw new Error(`Unknown RPC method: ${r}`)}return{id:t,result:s}}catch(s){return{id:t,error:ue(s)}}}async function ht(e,t){let{userId:r,passphrase:n,existingMS:s}=e;if(!n||n.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await he(r,n,s);if(!a.success)throw new Error(a.error);let o=await z(a.ms);await C(o);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let d=i,c=await crypto.subtle.exportKey("raw",d.publicKey),u=q(new Uint8Array(c)),l=await j(u);return await D(d.privateKey,o,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),a.ms.fill(0),await P({op:"setup-passphrase",kid:"",requestId:t,userId:r,details:{method:"passphrase",vapidKid:l}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:f(c),vapidKid:l}}async function kt(e,t){let{userId:r,credentialId:n,prfOutput:s,rpId:a="",existingMS:o,appSalt:i,hkdfSalt:d}=e;if(!n||n.byteLength===0)throw new Error("credentialId required");if(!s||s.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let c=await ke(r,n,s,o,a,i,d);if(!c.success)throw new Error(c.error);let u=await z(c.ms);await C(u);let l=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in l)||!("publicKey"in l))throw new Error("Failed to generate ECDSA keypair");let p=l,y=await crypto.subtle.exportKey("raw",p.publicKey),g=q(new Uint8Array(y)),h=await j(g);return await D(p.privateKey,u,h,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:y}),c.ms.fill(0),await P({op:"setup-passkey-prf",kid:"",requestId:t,userId:r,details:{method:"passkey-prf",credentialId:f(n),vapidKid:h}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:f(y),vapidKid:h}}async function bt(e,t){let{userId:r,credentialId:n,rpId:s="",existingMS:a}=e;if(!n||n.byteLength===0)throw new Error("credentialId required");let o=await be(r,n,a,s);if(!o.success)throw new Error(o.error);let i=await z(o.ms);await C(i);let d=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in d)||!("publicKey"in d))throw new Error("Failed to generate ECDSA keypair");let c=d,u=await crypto.subtle.exportKey("raw",c.publicKey),l=q(new Uint8Array(u)),p=await j(l);return await D(c.privateKey,i,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:u}),o.ms.fill(0),await P({op:"setup-passkey-gate",kid:"",requestId:t,userId:r,details:{method:"passkey-gate",credentialId:f(n),vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:f(u),vapidKid:p}}async function Ot(e,t){let{userId:r,method:n,credentials:s,newCredentials:a}=e;function o(u,l){if(typeof l!="object"||l===null)throw new Error(`newCredentials must be an object for ${u}`);return l}let i=o(n,a);await T(s,async(u,l)=>(await C(u),!0));let d;if(s.method==="passphrase"){let u=await Ae(r,s.passphrase);if(!u.success)throw new Error(u.error);d=u.ms}else if(s.method==="passkey-prf"){let u=await Ke(r,s.prfOutput);if(!u.success)throw new Error(u.error);d=u.ms}else if(s.method==="passkey-gate"){let u=await Ie(r);if(!u.success)throw new Error(u.error);d=u.ms}else throw new Error("Invalid credentials method");let c;if(n==="passphrase"){if(typeof i.passphrase!="string")throw new Error("passphrase must be a string");c=await he(r,i.passphrase,d)}else if(n==="passkey-prf"){if(!(i.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");if(!(i.prfOutput instanceof ArrayBuffer))throw new Error("prfOutput must be an ArrayBuffer");let u=typeof i.rpId=="string"?i.rpId:"";c=await ke(r,i.credentialId,i.prfOutput,d,u)}else if(n==="passkey-gate"){if(!(i.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");let u=typeof i.rpId=="string"?i.rpId:"";c=await be(r,i.credentialId,d,u)}else{let u=n;throw new Error(`Unknown enrollment method: ${String(u)}`)}if(d.fill(0),!c.success)throw new Error(c.error);return await P({op:"add-enrollment",kid:"",requestId:t,userId:s.userId,details:{method:n,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${n}:v2`}}async function qt(e,t){let{credentials:r}=e,n=await T(r,async(s,a)=>{await C(s);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let i=o,d=await crypto.subtle.exportKey("raw",i.publicKey),c=q(new Uint8Array(d)),u=await j(c);return await D(i.privateKey,s,u,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),{kid:u,publicKey:f(d)}});return await P({op:"generate",kid:n.result.kid,requestId:t,userId:r.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),n.result}async function jt(e,t){let{credentials:r}=e,n=await T(r,async(s,a)=>{await C(s);let i=(await S()).filter(y=>y.purpose==="vapid");for(let y of i)await Me(y.kid);let d=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in d)||!("publicKey"in d))throw new Error("Failed to generate ECDSA keypair");let c=d,u=await crypto.subtle.exportKey("raw",c.publicKey),l=q(new Uint8Array(u)),p=await j(l);return await D(c.privateKey,s,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:u}),{kid:p,publicKey:f(u),oldKids:i.map(y=>y.kid)}});return await P({op:"regenerate-vapid",kid:n.result.kid,requestId:t,userId:r.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:n.result.oldKids,deletedCount:n.result.oldKids.length}}),{kid:n.result.kid,publicKey:n.result.publicKey}}async function Ht(e,t){let{kid:r,payload:n,credentials:s}=e;if(!n.aud||!n.sub||!n.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(n.exp<=a)throw new Error("JWT exp must be in the future");if(n.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let o=await T(s,async(i,d)=>{await C(i);let c=await Ue(r,i,{name:"ECDSA",namedCurve:"P-256"},["sign"]),u={typ:"JWT",alg:"ES256",kid:r},l=f(new TextEncoder().encode(JSON.stringify(u)).buffer),p=f(new TextEncoder().encode(JSON.stringify(n)).buffer),y=new TextEncoder().encode(`${l}.${p}`),g=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},c,y),h=f(g);return{jwt:`${l}.${p}.${h}`}});return await P({op:"sign",kid:r,requestId:t,userId:s.userId,unlockTime:o.unlockTime,lockTime:o.lockTime,duration:o.duration,details:{algorithm:"ES256",aud:n.aud,exp:n.exp,jti:n.jti}}),o.result}async function $t(e,t){let{userId:r,ttlHours:n,credentials:s,autoExtend:a}=e;if(n<=0||n>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let i=(await S()).filter(K=>K.purpose==="vapid");if(i.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");i.sort((K,k)=>k.createdAt-K.createdAt);let d=i[0];if(!d)throw new Error("VAPID key record not found after filtering");let c=d.kid,u=`lease-${crypto.randomUUID()}`,l=crypto.getRandomValues(new Uint8Array(32)),p=Date.now(),y=p+n*3600*1e3,g=await T(s,async(K,k)=>{await C(K);let{delegationCert:E}=await Ge(u,y),R=await Lt(k,l),O=await V(c);if(!O)throw new Error(`No wrapped key with id: ${c}`);let X=new Uint8Array(O.iv),Y=O.aad,le=await crypto.subtle.unwrapKey("pkcs8",O.wrappedKey,K,{name:"AES-GCM",iv:X,additionalData:Y},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),Z=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",le,R,{name:"AES-GCM",iv:Z}),iv:Z,sessionKEK:R,lakDelegationCert:E}});await x(`sessionkek:${u}`,g.result.sessionKEK),Ce.set(u,g.result.sessionKEK);let h={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},v={leaseId:u,userId:r,ttlHours:n,createdAt:p,exp:y,autoExtend:a??!0,quotas:h,wrappedLeaseKey:g.result.wrappedLeaseKey,wrappedLeaseKeyIV:g.result.iv.buffer.slice(g.result.iv.byteOffset,g.result.iv.byteOffset+g.result.iv.byteLength),leaseSalt:l.buffer.slice(l.byteOffset,l.byteOffset+l.byteLength),kid:c,lakDelegationCert:g.result.lakDelegationCert};return await fe(v),await x(`quota:${u}`,{leaseId:u,tokensIssued:0,lastResetAt:p,perEndpoint:{}}),await P({op:"create-lease",kid:c,requestId:t,userId:r,details:{action:"create-lease",leaseId:u,userId:r,ttlHours:n,autoExtend:v.autoExtend}}),{leaseId:u,exp:y,quotas:h,autoExtend:v.autoExtend??!0}}async function Ft(e,t){let{leaseIds:r,credentials:n,requestAuth:s}=e,a=[],o=0,i=0,d=0,c=!1;if(n)try{await T(n,async(u,l)=>(c=!0,Promise.resolve()))}catch(u){for(let l of r){let p=await J(l);p&&p.autoExtend===!1&&(a.push({leaseId:l,status:"skipped",reason:`Authentication failed: ${ue(u)}`}),i++)}if(i===r.length)return{results:a,extended:o,skipped:i,failed:d}}for(let u of r)try{let l=await J(u);if(!l){a.push({leaseId:u,status:"skipped",reason:`Lease not found: ${u}`}),i++;continue}if(l.autoExtend===!1&&!s){a.push({leaseId:u,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),i++;continue}if(l.autoExtend===!1&&s&&!c){a.push({leaseId:u,status:"skipped",reason:"Authentication required but credentials not valid"}),i++;continue}let y=(await S()).filter(E=>E.purpose==="vapid");if(y.length===0){a.push({leaseId:u,status:"skipped",reason:"No VAPID key found"}),i++;continue}y.sort((E,R)=>R.createdAt-E.createdAt);let h=y[0].kid;if(l.kid!==h){a.push({leaseId:u,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${l.kid}, current kid: ${h})`}),i++;continue}let v=Date.now(),K=v+30*24*60*60*1e3,k={...l,exp:K,createdAt:v};await fe(k),await P({op:"extend-lease",kid:k.kid,requestId:t,userId:k.userId,details:{action:"extend-lease",leaseId:k.leaseId,userId:k.userId,newExp:K,autoExtend:k.autoExtend}}),a.push({leaseId:u,status:"extended",result:{leaseId:k.leaseId,exp:k.exp,iat:k.createdAt,kid:k.kid,autoExtend:k.autoExtend??!1}}),o++}catch(l){a.push({leaseId:u,status:"skipped",reason:`Error extending lease: ${ue(l)}`}),d++}return{results:a,extended:o,skipped:i,failed:d}}async function At(e,t){let{leaseId:r}=e,{kid:n}=e;if(!n){let G=(await S()).filter(vt=>vt.purpose==="vapid");if(G.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(G.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let Re=G[0];if(!Re)throw new Error("No VAPID key found after filtering");n=Re.kid}let s=await J(r);if(!s)throw new Error(`Lease not found: ${r}`);if(Date.now()>=s.exp)throw new Error("Lease expired");let o=(await S()).filter(B=>B.purpose==="vapid");if(o.length===0)throw new Error("No VAPID key available");o.sort((B,G)=>G.createdAt-B.createdAt);let i=o[0]?.kid;if(!i)throw new Error("Failed to determine current VAPID key");if(s.kid!==i)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await Ne(r,s.lakDelegationCert);let d=await ge();if(!d)throw new Error("No push subscription found. Call setPushSubscription() first.");let c=await A(`quota:${r}`),u=mt(c),l=Date.now()-3600*1e3;if(u.lastResetAt<l&&(u.tokensIssued=0,u.lastResetAt=Date.now()),u.tokensIssued>=s.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");u.tokensIssued++,await x(`quota:${r}`,u);let p=e.jti??crypto.randomUUID(),y=e.exp??Math.floor(Date.now()/1e3)+900,g=new URL(d.endpoint),h=`${g.protocol}//${g.host}`,v={aud:h,sub:"mailto:kms@example.com",exp:y,jti:p,uid:s.userId,eid:d.eid},K=Ce.get(r);if(!K){let B=await A(`sessionkek:${r}`);if(!B)throw new Error(`SessionKEK not found for lease: ${r}`);K=B,Ce.set(r,K)}let k=s.wrappedLeaseKey,E=new Uint8Array(s.wrappedLeaseKeyIV),R=await crypto.subtle.unwrapKey("pkcs8",k,K,{name:"AES-GCM",iv:E},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),O={typ:"JWT",alg:"ES256",kid:s.kid},X=f(new TextEncoder().encode(JSON.stringify(O)).buffer),Y=f(new TextEncoder().encode(JSON.stringify(v)).buffer),le=new TextEncoder().encode(`${X}.${Y}`),Z=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},R,le),De=f(Z),Kt=`${X}.${Y}.${De}`,It=await P({op:"sign",kid:s.kid,requestId:t,userId:s.userId,leaseId:r,details:{action:"issue-lease-jwt",jti:p,aud:h,eid:d.eid}});return{jwt:Kt,jti:p,exp:y,auditEntry:It}}async function Gt(e,t){let{leaseId:r,count:n,kid:s}=e;if(!Number.isInteger(n)||n<1||n>10)throw new Error("count must be an integer between 1 and 10");let a=900,o=Math.floor(a*.6),i=Math.floor(Date.now()/1e3),d=[];for(let c=0;c<n;c++){let u=crypto.randomUUID(),l=i+a+c*o,p=await At({leaseId:r,...s!==void 0&&{kid:s},jti:u,exp:l},`${t}-${c}`);d.push(p)}return d}async function Nt(e){let t=e?.userId??"default",r=await $e(t),n=[];await ve(t)&&n.push("passphrase"),await Pe(t)&&n.push("passkey");let s;return r&&e?.userId&&(s=await we(e.userId)),{isSetup:r,methods:n,...s!==void 0&&{leases:s}}}async function Jt(e){let t=e?.userId??"default",r=[];if(await ve(t)&&r.push("enrollment:passphrase:v2"),await Pe(t)){let n=await A(`enrollment:passkey-prf:v2:${t}`),s=await A(`enrollment:passkey-gate:v2:${t}`);n&&r.push("enrollment:passkey-prf:v2"),s&&r.push("enrollment:passkey-gate:v2")}return{enrollments:r}}async function _t(){return await _e()}async function zt(){return{entries:await F()}}async function Qt(e){let{kid:t}=e,r=await V(t);if(!r||!r.publicKeyRaw)throw new Error(`Public key not found for kid: ${t}`);return{publicKey:f(r.publicKeyRaw)}}async function Xt(){return await ze()}async function Yt(e){let{userId:t}=e;return{leases:await we(t)}}async function Zt(e){let{leaseId:t,deleteIfInvalid:r=!1}=e,n=await J(t);if(!n)return{leaseId:t,valid:!1,reason:"not-found",kid:""};if(Date.now()>=n.exp)return r&&await _(t),{leaseId:t,valid:!1,reason:"expired",kid:n.kid};let a=(await S()).filter(d=>d.purpose==="vapid");if(a.length===0)return r&&await _(t),{leaseId:t,valid:!1,reason:"no-vapid-key",kid:n.kid};a.sort((d,c)=>c.createdAt-d.createdAt);let o=a[0];if(!o)return r&&await _(t),{leaseId:t,valid:!1,reason:"no-vapid-key",kid:n.kid};let i=o.kid;return n.kid!==i?(r&&await _(t),{leaseId:t,valid:!1,reason:"wrong-key",kid:n.kid}):{leaseId:t,valid:!0,kid:n.kid}}async function er(){let t=(await S()).filter(n=>n.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");return{kid:r.kid}}async function tr(e){return await je(e.subscription),{success:!0}}async function rr(){return await He(),{success:!0}}async function nr(){return{subscription:await ge()}}async function sr(){Le();let e=indexedDB.deleteDatabase("kms-v2");return await new Promise((t,r)=>{e.onsuccess=()=>t(),e.onerror=()=>r(new Error(e.error?.message??"Failed to delete database"))}),await re(),Qe(),{success:!0}}async function ar(e,t){let{enrollmentId:r,credentials:n}=e;return await T(n,async(s,a)=>(await C(s),!0)),await We(r),await P({op:"reset",kid:"",requestId:t,userId:n.userId,details:{action:"remove-enrollment",enrollmentId:r}}),{success:!0}}(async()=>{try{await re(),await Fe(),await Je(),(await F()).length===0&&await P({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(e){console.error("[KMS Worker] Initialization failed:",e)}})();export{Wt as handleMessage};
