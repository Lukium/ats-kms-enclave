function w(e){let t=new Uint8Array(e),r=Array.from(t,s=>String.fromCharCode(s)).join("");return btoa(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function U(e){let t=e.replace(/-/g,"+").replace(/_/g,"/"),r=t.length%4;r&&(t+="=".repeat(4-r));let n=atob(t),s=new Uint8Array(n.length);for(let a=0;a<n.length;a++)s[a]=n.charCodeAt(a);return s.buffer}function O(e){if(e.length!==65||e[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let t=w(e.slice(1,33).buffer),r=w(e.slice(33).buffer);return{kty:"EC",crv:"P-256",x:t,y:r}}async function j(e){let t={crv:e.crv,kty:e.kty,x:e.x,y:e.y},r=JSON.stringify(t),n=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(r));return w(n)}function Te(e){return"{"+Object.keys(e).sort().map(n=>[n,e[n]]).map(([n,s])=>`"${String(n)}":${JSON.stringify(s)}`).join(",")+"}"}function te(e){let t={kmsVersion:e.kmsVersion,method:e.method,algVersion:e.algVersion,purpose:e.purpose};e.credentialId&&(t.credentialId=w(e.credentialId));let r=Te(t);return new TextEncoder().encode(r).buffer}function re(e){let t={kmsVersion:e.kmsVersion,kid:e.kid,alg:e.alg,purpose:e.purpose,createdAt:e.createdAt,keyType:e.keyType},r=Te(t);return new TextEncoder().encode(r).buffer}async function ye(e){let t=await crypto.subtle.exportKey("raw",e),r=await crypto.subtle.importKey("raw",t,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),n=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",r,n)}function Le(e,t){return Ct(e,t)}function Ct(e,t){let r=new Uint8Array(e),n=new Uint8Array(t);if(r.length!==n.length)return!1;let s=0;for(let a=0;a<r.length;a++)s|=r[a]^n[a];return s===0}async function N(e){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(e))}async function Ue(e={min:150,max:300,mid:220}){let t=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),r=crypto.getRandomValues(new Uint8Array(16)),n=1e5,s=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:r,iterations:n},t,256);let u=performance.now()-s,i=Math.round(n*e.mid/u);return i=Math.min(Math.max(i,5e4),2e6),{iterations:i,measuredMs:u}}var Dt="kms-v2",Rt=1,B=null;async function ne(){return new Promise((e,t)=>{let r=indexedDB.open(Dt,Rt);r.onerror=()=>{t(new Error("Failed to open IndexedDB"))},r.onsuccess=()=>{B=r.result,e()},r.onupgradeneeded=n=>{let s=n.target.result;if(s.objectStoreNames.contains("config")||s.createObjectStore("config",{keyPath:"method"}),!s.objectStoreNames.contains("keys")){let a=s.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!s.objectStoreNames.contains("leases")){let a=s.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!s.objectStoreNames.contains("audit")){let a=s.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}s.objectStoreNames.contains("meta")||s.createObjectStore("meta",{keyPath:"key"})}})}async function H(){if(B||await ne(),!B)throw new Error("Database not initialized");return B}function Be(){B&&(B.close(),B=null)}async function se(e,t){let r=await H();return new Promise((n,s)=>{let i=r.transaction(e,"readonly").objectStore(e).get(t);i.onsuccess=()=>{n(i.result)},i.onerror=()=>{s(new Error(`Failed to get from ${e}`))}})}async function $(e,t){let r=await H();return new Promise((n,s)=>{let i=r.transaction(e,"readwrite").objectStore(e).put(t);i.onsuccess=()=>{n()},i.onerror=()=>{s(new Error(`Failed to put to ${e}`))}})}async function fe(e,t){let r=await H();return new Promise((n,s)=>{let i=r.transaction(e,"readwrite").objectStore(e).delete(t);i.onsuccess=()=>{n()},i.onerror=()=>{s(new Error(`Failed to delete from ${e}`))}})}async function Vt(e){let t=await H();return new Promise((r,n)=>{let u=t.transaction(e,"readonly").objectStore(e).getAll();u.onsuccess=()=>{r(u.result)},u.onerror=()=>{n(new Error(`Failed to getAll from ${e}`))}})}async function D(e,t,r,n=e.algorithm,s=e.usages,a={alg:"unknown",purpose:"unknown"}){let u=crypto.getRandomValues(new Uint8Array(12)),i=Date.now(),o=re({kmsVersion:2,kid:r,alg:a.alg,purpose:a.purpose,createdAt:i,keyType:Array.isArray(s)?s.join(","):String(s)}),c=e.type==="private"?"pkcs8":"raw",d=await crypto.subtle.exportKey(c,e),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:u,additionalData:o},t,d),p={kid:r,kmsVersion:2,wrappedKey:l,iv:u.buffer.slice(u.byteOffset,u.byteOffset+u.byteLength),aad:o,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:i};await $("keys",p)}async function Me(e,t,r,n=[]){let s=await se("keys",e);if(!s)throw new Error(`No wrapped key with id: ${e}`);let a=new Uint8Array(s.iv),u=s.aad,i=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:u},t,s.wrappedKey),o=typeof r=="string"?r:r.name,d=o==="ECDSA"||o==="ECDH"||o==="Ed25519"||o.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(d,i,r,!1,n)}async function V(e){return await se("keys",e)??null}async function S(){return Vt("keys")}async function We(e){await fe("keys",e)}async function A(e){let t=await se("meta",e);return t?t.value:null}async function x(e,t){await $("meta",{key:e,value:t})}async function qe(e){await fe("meta",e)}async function Oe(e){await $("audit",e)}async function F(){let e=await H();return new Promise((t,r)=>{let u=e.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();u.onsuccess=()=>{t(u.result)},u.onerror=()=>{r(new Error("Failed to get audit entries"))}})}async function je(){let e=await F();return e.length>0?e[e.length-1]:null}async function we(e){await $("leases",e)}async function J(e){return await se("leases",e)??null}async function ge(e){let t=await H();return new Promise((r,n)=>{let i=t.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(e);i.onsuccess=()=>{r(i.result)},i.onerror=()=>{n(new Error("Failed to get user leases"))}})}async function _(e){await fe("leases",e)}async function He(e){let r=(await S()).filter(a=>a.purpose==="vapid");if(r.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(r.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let n=r[0];if(!n)throw new Error("No VAPID key found after filtering");let s={...n,subscription:e};await $("keys",s)}async function $e(){let t=(await S()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");let{subscription:n,...s}=r;await $("keys",s)}async function me(){let t=(await S()).filter(n=>n.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");return r.subscription??null}var ae=e=>`enrollment:passphrase:v2:${e}`,ie=e=>`enrollment:passkey-prf:v2:${e}`,oe=e=>`enrollment:passkey-gate:v2:${e}`;function he(){let e=new Uint8Array(32);return crypto.getRandomValues(e),e}async function ke(e,t,r){let n=r??he(),{iterations:s}=await Ue(),a=crypto.getRandomValues(new Uint8Array(16)),u=await crypto.subtle.importKey("raw",new TextEncoder().encode(t),"PBKDF2",!1,["deriveKey"]),i=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:s},u,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),o=await ye(i),c=crypto.getRandomValues(new Uint8Array(12)),d=te({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,additionalData:d},i,n),p={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:s,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:o,encryptedMS:l,msIV:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),msAAD:d,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await x(ae(e),p),{success:!0,ms:n}}async function be(e,t,r,n,s="",a,u){let i=n??he(),o=a??crypto.getRandomValues(new Uint8Array(32)),c=u??await N("ATS/KMS/KEK-wrap/salt/v2"),d=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),l=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]),p=c instanceof Uint8Array?c.buffer:c,y=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:p,info:d},l,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),g=crypto.getRandomValues(new Uint8Array(12)),k=te({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:t,purpose:"master-secret"}),v=await crypto.subtle.encrypt({name:"AES-GCM",iv:g,additionalData:k},y,i),K=Date.now(),b=o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength),E;c instanceof Uint8Array?E=c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength):E=c;let R={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:t,rpId:s,kdf:{algorithm:"HKDF-SHA256",appSalt:b,hkdfSalt:E,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:v,msIV:g.buffer.slice(g.byteOffset,g.byteOffset+g.byteLength),msAAD:k,msVersion:1,createdAt:K,updatedAt:K};return await x(ie(e),R),{success:!0,ms:i}}async function Ae(e,t,r,n=""){let s=r??he(),a=crypto.getRandomValues(new Uint8Array(32)),u=await N("ATS/KMS/KEK-gate/salt/v2"),i=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),o=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),c=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:u,info:i},o,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),d=crypto.getRandomValues(new Uint8Array(12)),l=te({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:t,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:l},c,s),y=Date.now(),g={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:t,rpId:n,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:p,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await x(oe(e),g),{success:!0,ms:s}}async function Ke(e,t){let r=await A(ae(e));if(!r)return{success:!1,error:"Passphrase not set up"};let n=await crypto.subtle.importKey("raw",new TextEncoder().encode(t),"PBKDF2",!1,["deriveKey"]),s=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:r.kdf.salt,iterations:r.kdf.iterations},n,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await ye(s);if(!Le(a,r.kcv))return{success:!1,error:"Invalid passphrase"};try{let u=await crypto.subtle.decrypt({name:"AES-GCM",iv:r.msIV,additionalData:r.msAAD},s,r.encryptedMS);return{success:!0,ms:new Uint8Array(u)}}catch{return{success:!1,error:"Decryption failed"}}}async function Ie(e,t){let r=await A(ie(e));if(!r)return{success:!1,error:"Passkey not set up"};let n=r.kdf.hkdfSalt,s=new TextEncoder().encode(r.kdf.info),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let i=await crypto.subtle.decrypt({name:"AES-GCM",iv:r.msIV,additionalData:r.msAAD},u,r.encryptedMS);return{success:!0,ms:new Uint8Array(i)}}catch{return{success:!1,error:"Decryption failed"}}}async function ve(e){let t=await A(oe(e));if(!t)return{success:!1,error:"Passkey gate not set up"};let r=new Uint8Array(t.pepperWrapped),n=await N("ATS/KMS/KEK-gate/salt/v2"),s=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let i=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},u,t.encryptedMS);return{success:!0,ms:new Uint8Array(i)}}catch{return{success:!1,error:"Decryption failed"}}}async function Fe(e){let t=await A(ae(e)),r=await A(ie(e)),n=await A(oe(e));return!!(t||r||n)}async function Pe(e){return!!await A(ae(e))}async function Ee(e){let t=await A(ie(e)),r=await A(oe(e));return!!(t||r)}async function z(e){let t=await N("ATS/KMS/MKEK/salt/v2"),r=new TextEncoder().encode("ATS/KMS/MKEK/v2"),n=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:t,info:r},n,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function T(e,t){let r=Date.now(),n=null;try{let s;switch(e.method){case"passphrase":s=await Ke(e.userId,e.passphrase);break;case"passkey-prf":s=await Ie(e.userId,e.prfOutput);break;case"passkey-gate":s=await ve(e.userId);break;default:throw new Error("Unknown credential method")}if(!s.success)throw new Error(s.error??"Unlock failed");n=s.ms;let a=await z(n),u=await t(a,n),i=Date.now();return{result:u,unlockTime:r,lockTime:i,duration:i-r}}finally{n&&n.fill(0)}}var Se=Promise.resolve(),I=null;async function Ge(){}async function ue(){let e=await A("LRK");return e||(e=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await x("LRK",e)),e}async function Q(e){let t=await crypto.subtle.digest("SHA-256",e);return w(t)}async function C(e){let t=await V("audit-user");if(t&&t.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,e,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),u=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),i=await Q(t.publicKeyRaw);I={type:"UAK",keyPair:{privateKey:a,publicKey:u},keyId:i};return}let r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),n=await crypto.subtle.exportKey("raw",r.publicKey);await D(r.privateKey,e,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:n});let s=await Q(n);I={type:"UAK",keyPair:r,keyId:s}}async function Ne(e,t){if(!I||I.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let r=Date.now(),n=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",n.publicKey),a=w(s),u={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:e,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:r,notAfter:t,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},i=JSON.stringify(u,Object.keys(u).sort()),o=await crypto.subtle.sign("Ed25519",I.keyPair.privateKey,new TextEncoder().encode(i)),c={...u,sig:w(o)},d=await ue(),l=re({kmsVersion:2,kid:`lak-${e}`,alg:"EdDSA",purpose:"lak",createdAt:r,keyType:"lease-audit-key"}),p=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",n.privateKey,d,{name:"AES-GCM",iv:p,additionalData:l});return await x(`lease-audit-key:${e}`,{leaseId:e,wrappedKey:y,iv:p,aad:l,publicKeyRaw:s,delegationCert:c,expiresAt:t,createdAt:r}),{lakKeyPair:n,delegationCert:c}}async function Je(e,t){let r=await A(`lease-audit-key:${e}`);if(!r)throw new Error(`LAK not found for lease: ${e}`);let n=await ue(),s=await crypto.subtle.unwrapKey("pkcs8",r.wrappedKey,n,{name:"AES-GCM",iv:r.iv,additionalData:r.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",r.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),u=await Q(r.publicKeyRaw);I={type:"LAK",keyPair:{privateKey:s,publicKey:a},keyId:u,cert:t}}async function _e(){let e=await V("audit-instance");if(e&&e.publicKeyRaw){let o=await ue(),c=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,o,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),d=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),l=await Q(e.publicKeyRaw);I={type:"KIAK",keyPair:{privateKey:c,publicKey:d},keyId:l};return}let t=await ue(),r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),n=await crypto.subtle.exportKey("raw",r.publicKey);await D(r.privateKey,t,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:n});let s=await V("audit-instance");if(!s)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",s.wrappedKey,t,{name:"AES-GCM",iv:s.iv,additionalData:s.aad},{name:"Ed25519"},!1,["sign"]),u=await crypto.subtle.importKey("raw",n,{name:"Ed25519"},!1,["verify"]),i=await Q(n);I={type:"KIAK",keyPair:{privateKey:a,publicKey:u},keyId:i}}async function P(e){let t,r,n=new Promise((s,a)=>{t=s,r=a});return Se=Se.then(async()=>{try{if(!I)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let s=Date.now(),a=await je(),u=a?a.chainHash:"",o={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:s,op:e.op,kid:e.kid,requestId:e.requestId,userId:e.userId,origin:e.origin,leaseId:e.leaseId,unlockTime:e.unlockTime,lockTime:e.lockTime,duration:e.duration,details:e.details,previousHash:u,signer:I.type,signerId:I.keyId},c=JSON.stringify(o),d=new TextEncoder().encode(u+c),l=await crypto.subtle.digest("SHA-256",d),p=w(l),y=new TextEncoder().encode(p),g=await crypto.subtle.sign("Ed25519",I.keyPair.privateKey,y),k=w(g),v={kmsVersion:o.kmsVersion,seqNum:o.seqNum,timestamp:o.timestamp,op:o.op,kid:o.kid,requestId:o.requestId,userId:o.userId,...o.origin!==void 0&&{origin:o.origin},...o.leaseId!==void 0&&{leaseId:o.leaseId},...o.unlockTime!==void 0&&{unlockTime:o.unlockTime},...o.lockTime!==void 0&&{lockTime:o.lockTime},...o.duration!==void 0&&{duration:o.duration},...o.details!==void 0&&{details:o.details},previousHash:o.previousHash,chainHash:p,signer:o.signer,signerId:o.signerId,...I.cert!==void 0&&{cert:I.cert},sig:k};await Oe(v),t(v)}catch(s){r(s)}}).catch(()=>{}),n}async function ze(){let e=await F(),t=[],r=0;for(let n of e){let s={kmsVersion:n.kmsVersion,seqNum:n.seqNum,timestamp:n.timestamp,op:n.op,kid:n.kid,requestId:n.requestId,userId:n.userId,origin:n.origin,leaseId:n.leaseId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:n.details,previousHash:n.previousHash,signer:n.signer,signerId:n.signerId},a=JSON.stringify(s),u=new TextEncoder().encode(n.previousHash+a),i=await crypto.subtle.digest("SHA-256",u);w(i)!==n.chainHash&&t.push(`Chain hash mismatch at seq ${n.seqNum}`),r+=1}return{valid:t.length===0,verified:r,errors:t}}async function Qe(){let e=await V("audit-user");if(!e||!e.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:w(e.publicKeyRaw)}}function Xe(){I=null,Se=Promise.resolve()}function de(e){if(e instanceof Error)return e.message;if(typeof e=="string")return e;if(typeof e=="object"&&e!==null&&"message"in e&&typeof e.message=="string")return e.message;try{return String(e)}catch{return"Unknown error"}}var m=class extends Error{constructor(r,n,s,a){super(`RPC ${r}: Invalid ${n} - expected ${s}, got ${typeof a}`);this.method=r;this.param=n;this.expected=s;this.received=a;this.name="RPCValidationError"}};function h(e,t){if(typeof t!="object"||t===null)throw new m(e,"params","object",t);return t}function f(e,t,r){if(typeof r!="string")throw new m(e,t,"string",r);return r}function M(e,t,r){if(r!==void 0)return f(e,t,r)}function ce(e,t,r){if(typeof r!="number")throw new m(e,t,"number",r);return r}function Tt(e,t,r){if(typeof r!="boolean")throw new m(e,t,"boolean",r);return r}function Ye(e,t,r){if(r!==void 0)return Tt(e,t,r)}function xe(e,t,r){if(r instanceof ArrayBuffer)return r;if(r instanceof Uint8Array){let n=new ArrayBuffer(r.byteLength);return new Uint8Array(n).set(r),n}throw new m(e,t,"ArrayBuffer or Uint8Array",r)}function Ce(e,t,r){if(r!==void 0){if(r instanceof Uint8Array)return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);throw new m(e,t,"ArrayBuffer or Uint8Array",r)}}function W(e,t){if(typeof t!="object"||t===null)throw new m(e,"credentials","AuthCredentials object",t);let r=t;if(typeof r.method!="string")throw new m(e,"credentials.method","string",r.method);if(typeof r.userId!="string")throw new m(e,"credentials.userId","string",r.userId);switch(r.method){case"passphrase":if(typeof r.passphrase!="string")throw new m(e,"credentials.passphrase","string",r.passphrase);return{method:"passphrase",passphrase:r.passphrase,userId:r.userId};case"passkey-prf":if(!(r.prfOutput instanceof ArrayBuffer))throw new m(e,"credentials.prfOutput","ArrayBuffer",r.prfOutput);return{method:"passkey-prf",prfOutput:r.prfOutput,userId:r.userId};case"passkey-gate":return{method:"passkey-gate",userId:r.userId};default:throw new m(e,"credentials.method","passphrase | passkey-prf | passkey-gate",r.method)}}function Lt(e,t){if(typeof t!="object"||t===null)throw new m(e,"payload","VAPIDPayload object",t);let r=t;return{aud:f(e,"payload.aud",r.aud),sub:f(e,"payload.sub",r.sub),exp:ce(e,"payload.exp",r.exp),jti:f(e,"payload.jti",r.jti)}}function Ze(e){let t=h("setupPassphrase",e),r=Ce("setupPassphrase","existingMS",t.existingMS);return{userId:f("setupPassphrase","userId",t.userId),passphrase:f("setupPassphrase","passphrase",t.passphrase),...r!==void 0&&{existingMS:r}}}function et(e){let t=h("setupPasskeyPRF",e);if(!t.credentialId)throw new Error("credentialId required");let r=M("setupPasskeyPRF","rpId",t.rpId),n=Ce("setupPasskeyPRF","existingMS",t.existingMS);return{userId:f("setupPasskeyPRF","userId",t.userId),credentialId:xe("setupPasskeyPRF","credentialId",t.credentialId),prfOutput:xe("setupPasskeyPRF","prfOutput",t.prfOutput),...r!==void 0&&{rpId:r},...n!==void 0&&{existingMS:n}}}function tt(e){let t=h("setupWithEncryptedCredentials",e),r=f("setupWithEncryptedCredentials","method",t.method);if(r!=="passphrase"&&r!=="passkey-prf"&&r!=="passkey-gate")throw new m("setupWithEncryptedCredentials","method","passphrase | passkey-prf | passkey-gate",r);return{method:r,transportKeyId:f("setupWithEncryptedCredentials","transportKeyId",t.transportKeyId),ephemeralPublicKey:f("setupWithEncryptedCredentials","ephemeralPublicKey",t.ephemeralPublicKey),iv:f("setupWithEncryptedCredentials","iv",t.iv),encryptedCredentials:f("setupWithEncryptedCredentials","encryptedCredentials",t.encryptedCredentials),userId:f("setupWithEncryptedCredentials","userId",t.userId),requestId:f("setupWithEncryptedCredentials","requestId",t.requestId)}}function rt(e){let t=h("setupWithPopup",e);return{userId:f("setupWithPopup","userId",t.userId)}}function nt(e){let t=h("setupPasskeyGate",e),r=M("setupPasskeyGate","rpId",t.rpId),n=Ce("setupPasskeyGate","existingMS",t.existingMS);return{userId:f("setupPasskeyGate","userId",t.userId),credentialId:xe("setupPasskeyGate","credentialId",t.credentialId),...r!==void 0&&{rpId:r},...n!==void 0&&{existingMS:n}}}function st(e){let t=h("addEnrollment",e),r=f("addEnrollment","method",t.method);if(r!=="passphrase"&&r!=="passkey-prf"&&r!=="passkey-gate")throw new m("addEnrollment","method","passphrase | passkey-prf | passkey-gate",r);return{userId:f("addEnrollment","userId",t.userId),method:r,credentials:W("addEnrollment",t.credentials),newCredentials:t.newCredentials}}function at(e){let t=h("generateVAPID",e);return{credentials:W("generateVAPID",t.credentials)}}function it(e){let t=h("regenerateVAPID",e);return{credentials:W("regenerateVAPID",t.credentials)}}function ot(e){let t=h("signJWT",e);return{kid:f("signJWT","kid",t.kid),payload:Lt("signJWT",t.payload),credentials:W("signJWT",t.credentials)}}function ut(e){let t=h("createLease",e),r={userId:f("createLease","userId",t.userId),ttlHours:ce("createLease","ttlHours",t.ttlHours),credentials:W("createLease",t.credentials)},n=Ye("createLease","autoExtend",t.autoExtend);return n!==void 0&&(r.autoExtend=n),r}function dt(e){let t=h("extendLeases",e);if(!Array.isArray(t.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof t.leaseIds}`);if(t.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let n={leaseIds:t.leaseIds.map((a,u)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${u} - expected non-empty string`);return a}),userId:f("extendLeases","userId",t.userId)},s=Ye("extendLeases","requestAuth",t.requestAuth);return s!==void 0&&(n.requestAuth=s),t.credentials!==void 0&&(n.credentials=W("extendLeases",t.credentials)),n}function ct(e){let t=h("issueVAPIDJWT",e),r=M("issueVAPIDJWT","kid",t.kid),n=M("issueVAPIDJWT","jti",t.jti),s=t.exp!==void 0?ce("issueVAPIDJWT","exp",t.exp):void 0;return{leaseId:f("issueVAPIDJWT","leaseId",t.leaseId),...r!==void 0&&{kid:r},...n!==void 0&&{jti:n},...s!==void 0&&{exp:s}}}function lt(e){let t=h("issueVAPIDJWTs",e),r=M("issueVAPIDJWTs","kid",t.kid);return{leaseId:f("issueVAPIDJWTs","leaseId",t.leaseId),count:ce("issueVAPIDJWTs","count",t.count),...r!==void 0&&{kid:r}}}function pt(e){if(e==null)return{};let t=h("isSetup",e),r=M("isSetup","userId",t.userId);return r!==void 0?{userId:r}:{}}function yt(e){if(e==null)return{};let t=h("getEnrollments",e),r=M("getEnrollments","userId",t.userId);return r!==void 0?{userId:r}:{}}function ft(e){let t=h("getPublicKey",e);return{kid:f("getPublicKey","kid",t.kid)}}function wt(e){let t=h("getUserLeases",e);return{userId:f("getUserLeases","userId",t.userId)}}function gt(e){let t=h("verifyLease",e),r={leaseId:f("verifyLease","leaseId",t.leaseId)};if("deleteIfInvalid"in t){if(typeof t.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");r.deleteIfInvalid=t.deleteIfInvalid}return r}function mt(e){let t=h("removeEnrollment",e);return{enrollmentId:f("removeEnrollment","enrollmentId",t.enrollmentId),credentials:W("removeEnrollment",t.credentials)}}var Ut=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"];function Bt(e,t){if(typeof t!="object"||t===null)throw new m(e,"subscription","object",t);let r=t,n=f(e,"subscription.endpoint",r.endpoint);if(!n.startsWith("https://"))throw new Error(`${e}: subscription.endpoint must use HTTPS`);let s;try{s=new URL(n)}catch{throw new Error(`${e}: subscription.endpoint is not a valid URL`)}if(!Ut.some(p=>s.hostname===p||s.hostname.endsWith(`.${p}`)))throw new Error(`${e}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${s.hostname}`);let u=r.expirationTime;if(u!==null&&typeof u!="number")throw new m(e,"subscription.expirationTime","number or null",u);if(typeof r.keys!="object"||r.keys===null)throw new m(e,"subscription.keys","object",r.keys);let i=r.keys,o=f(e,"subscription.keys.p256dh",i.p256dh),c=f(e,"subscription.keys.auth",i.auth);if(o.length===0)throw new Error(`${e}: subscription.keys.p256dh must be non-empty`);if(c.length===0)throw new Error(`${e}: subscription.keys.auth must be non-empty`);let d=f(e,"subscription.eid",r.eid);if(d.length===0)throw new Error(`${e}: subscription.eid must be non-empty`);let l=r.createdAt;if(typeof l!="number")throw new m(e,"subscription.createdAt","number",l);return{endpoint:n,expirationTime:u,keys:{p256dh:o,auth:c},eid:d,createdAt:l}}function ht(e){let t=h("setPushSubscription",e);return{subscription:Bt("setPushSubscription",t.subscription)}}function Wt(e){if(typeof e!="object"||e===null)return!1;let t=e;return typeof t.tokensIssued=="number"&&typeof t.lastResetAt=="number"}function kt(e){return Wt(e)?e:{tokensIssued:0,lastResetAt:Date.now()}}var De=new Map,le=new Map,X=new Map;async function qt(e,t){let r=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:t,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},r,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function bt(){let e=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),t=await crypto.subtle.exportKey("raw",e.publicKey),r=crypto.randomUUID(),n=crypto.getRandomValues(new Uint8Array(32)),s=crypto.getRandomValues(new Uint8Array(32));return le.set(r,{privateKey:e.privateKey,appSalt:n,hkdfSalt:s,createdAt:Date.now()}),setTimeout(()=>{le.delete(r)},10*60*1e3),{publicKey:w(t),keyId:r,appSalt:w(n.buffer),hkdfSalt:w(s.buffer)}}async function At(e){let t=le.get(e.transportKeyId);if(!t)throw new Error("Transport key not found or expired");let r=U(e.ephemeralPublicKey),n=await crypto.subtle.importKey("raw",r,{name:"ECDH",namedCurve:"P-256"},!1,[]),s=await crypto.subtle.deriveBits({name:"ECDH",public:n},t.privateKey,256),a=await crypto.subtle.importKey("raw",s,"HKDF",!1,["deriveBits"]),u=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},a,256),i=await crypto.subtle.importKey("raw",u,{name:"AES-GCM",length:256},!1,["decrypt"]),o=U(e.iv),c=U(e.encryptedCredentials),d=await crypto.subtle.decrypt({name:"AES-GCM",iv:o,tagLength:128},i,c),l=JSON.parse(new TextDecoder().decode(d)),p;if(e.method==="passphrase"){let y=l;p=await Kt({userId:e.userId,passphrase:y.passphrase},e.requestId)}else if(e.method==="passkey-prf"){let y=l;p=await It({userId:e.userId,credentialId:U(y.credentialId),prfOutput:U(y.prfOutput),...y.rpId!==void 0&&{rpId:y.rpId},appSalt:t.appSalt,hkdfSalt:t.hkdfSalt},e.requestId)}else if(e.method==="passkey-gate"){let y=l;p=await vt({userId:e.userId,credentialId:U(y.credentialId),...y.rpId!==void 0&&{rpId:y.rpId}},e.requestId)}else{let y=e.method;throw new Error(`Unknown method: ${String(y)}`)}return le.delete(e.transportKeyId),p}async function Ot(e,t){let r=await bt(),n=new URL("https://kms.ats.run/");n.searchParams.set("mode","setup");let a=await new Promise((i,o)=>{let c=setTimeout(()=>{o(new Error("Setup with popup timeout"))},3e5);X.set(t,{resolve:i,reject:o,timeout:c}),self.postMessage({type:"worker:setup-with-popup",requestId:t,userId:e.userId,popupURL:n.toString(),transportKey:r.publicKey,transportKeyId:r.keyId,appSalt:r.appSalt,hkdfSalt:r.hkdfSalt})});return await At({method:a.method,transportKeyId:a.transportKeyId,ephemeralPublicKey:a.ephemeralPublicKey,iv:a.iv,encryptedCredentials:a.encryptedCredentials,userId:a.userId,requestId:t})}self.addEventListener("message",e=>{let t=e.data;if("type"in t&&t.type==="worker:popup-credentials"){let r=t.requestId;if(r&&t.credentials){let n=X.get(r);n&&(clearTimeout(n.timeout),X.delete(r),n.resolve(t.credentials))}return}if("type"in t&&t.type==="worker:popup-error"){let r=t.requestId;if(r){let n=X.get(r);n&&(clearTimeout(n.timeout),X.delete(r),n.reject(new Error(t.reason||"Popup setup failed")))}return}(async()=>{let r=e.data,n=await jt(r);self.postMessage(n)})().catch(r=>{console.error("[KMS Worker] Message handling failed:",r);let n=e.data;self.postMessage({id:n?.id||"unknown",error:r instanceof Error?r.message:"Unknown error"})})});async function jt(e){let{id:t,method:r,params:n}=e;try{let s;switch(r){case"generateSetupTransportKey":s=await bt();break;case"setupWithEncryptedCredentials":s=await At(tt(n));break;case"setupWithPopup":s=await Ot(rt(n),t);break;case"setupPassphrase":s=await Kt(Ze(n),t);break;case"setupPasskeyPRF":s=await It(et(n),t);break;case"setupPasskeyGate":s=await vt(nt(n),t);break;case"addEnrollment":s=await Ht(st(n),t);break;case"generateVAPID":s=await $t(at(n),t);break;case"regenerateVAPID":s=await Ft(it(n),t);break;case"signJWT":s=await Gt(ot(n),t);break;case"createLease":s=await Nt(ut(n),t);break;case"extendLeases":s=await Jt(dt(n),t);break;case"issueVAPIDJWT":s=await Pt(ct(n),t);break;case"issueVAPIDJWTs":s=await _t(lt(n),t);break;case"isSetup":s=await zt(pt(n));break;case"getEnrollments":s=await Qt(yt(n));break;case"verifyAuditChain":s=await Xt();break;case"getAuditLog":s=await Yt();break;case"getPublicKey":s=await Zt(ft(n));break;case"getAuditPublicKey":s=await er();break;case"getUserLeases":s=await tr(wt(n));break;case"verifyLease":s=await rr(gt(n));break;case"getVAPIDKid":s=await nr();break;case"resetKMS":s=await or();break;case"removeEnrollment":s=await ur(mt(n),t);break;case"setPushSubscription":s=await sr(ht(n));break;case"removePushSubscription":s=await ar();break;case"getPushSubscription":s=await ir();break;default:throw new Error(`Unknown RPC method: ${r}`)}return{id:t,result:s}}catch(s){return{id:t,error:de(s)}}}async function Kt(e,t){let{userId:r,passphrase:n,existingMS:s}=e;if(!n||n.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await ke(r,n,s);if(!a.success)throw new Error(a.error);let u=await z(a.ms);await C(u);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let o=i,c=await crypto.subtle.exportKey("raw",o.publicKey),d=O(new Uint8Array(c)),l=await j(d);return await D(o.privateKey,u,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),a.ms.fill(0),await P({op:"setup-passphrase",kid:"",requestId:t,userId:r,details:{method:"passphrase",vapidKid:l}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:w(c),vapidKid:l}}async function It(e,t){let{userId:r,credentialId:n,prfOutput:s,rpId:a="",existingMS:u,appSalt:i,hkdfSalt:o}=e;if(!n||n.byteLength===0)throw new Error("credentialId required");if(!s||s.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let c=await be(r,n,s,u,a,i,o);if(!c.success)throw new Error(c.error);let d=await z(c.ms);await C(d);let l=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in l)||!("publicKey"in l))throw new Error("Failed to generate ECDSA keypair");let p=l,y=await crypto.subtle.exportKey("raw",p.publicKey),g=O(new Uint8Array(y)),k=await j(g);return await D(p.privateKey,d,k,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:y}),c.ms.fill(0),await P({op:"setup-passkey-prf",kid:"",requestId:t,userId:r,details:{method:"passkey-prf",credentialId:w(n),vapidKid:k}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:w(y),vapidKid:k}}async function vt(e,t){let{userId:r,credentialId:n,rpId:s="",existingMS:a}=e;if(!n||n.byteLength===0)throw new Error("credentialId required");let u=await Ae(r,n,a,s);if(!u.success)throw new Error(u.error);let i=await z(u.ms);await C(i);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let c=o,d=await crypto.subtle.exportKey("raw",c.publicKey),l=O(new Uint8Array(d)),p=await j(l);return await D(c.privateKey,i,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),u.ms.fill(0),await P({op:"setup-passkey-gate",kid:"",requestId:t,userId:r,details:{method:"passkey-gate",credentialId:w(n),vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:w(d),vapidKid:p}}async function Ht(e,t){let{userId:r,method:n,credentials:s,newCredentials:a}=e;function u(d,l){if(typeof l!="object"||l===null)throw new Error(`newCredentials must be an object for ${d}`);return l}let i=u(n,a);await T(s,async(d,l)=>(await C(d),!0));let o;if(s.method==="passphrase"){let d=await Ke(r,s.passphrase);if(!d.success)throw new Error(d.error);o=d.ms}else if(s.method==="passkey-prf"){let d=await Ie(r,s.prfOutput);if(!d.success)throw new Error(d.error);o=d.ms}else if(s.method==="passkey-gate"){let d=await ve(r);if(!d.success)throw new Error(d.error);o=d.ms}else throw new Error("Invalid credentials method");let c;if(n==="passphrase"){if(typeof i.passphrase!="string")throw new Error("passphrase must be a string");c=await ke(r,i.passphrase,o)}else if(n==="passkey-prf"){if(!(i.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");if(!(i.prfOutput instanceof ArrayBuffer))throw new Error("prfOutput must be an ArrayBuffer");let d=typeof i.rpId=="string"?i.rpId:"";c=await be(r,i.credentialId,i.prfOutput,o,d)}else if(n==="passkey-gate"){if(!(i.credentialId instanceof ArrayBuffer))throw new Error("credentialId must be an ArrayBuffer");let d=typeof i.rpId=="string"?i.rpId:"";c=await Ae(r,i.credentialId,o,d)}else{let d=n;throw new Error(`Unknown enrollment method: ${String(d)}`)}if(o.fill(0),!c.success)throw new Error(c.error);return await P({op:"add-enrollment",kid:"",requestId:t,userId:s.userId,details:{method:n,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${n}:v2`}}async function $t(e,t){let{credentials:r}=e,n=await T(r,async(s,a)=>{await C(s);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let i=u,o=await crypto.subtle.exportKey("raw",i.publicKey),c=O(new Uint8Array(o)),d=await j(c);return await D(i.privateKey,s,d,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:o}),{kid:d,publicKey:w(o)}});return await P({op:"generate",kid:n.result.kid,requestId:t,userId:r.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),n.result}async function Ft(e,t){let{credentials:r}=e,n=await T(r,async(s,a)=>{await C(s);let i=(await S()).filter(y=>y.purpose==="vapid");for(let y of i)await We(y.kid);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let c=o,d=await crypto.subtle.exportKey("raw",c.publicKey),l=O(new Uint8Array(d)),p=await j(l);return await D(c.privateKey,s,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),{kid:p,publicKey:w(d),oldKids:i.map(y=>y.kid)}});return await P({op:"regenerate-vapid",kid:n.result.kid,requestId:t,userId:r.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:n.result.oldKids,deletedCount:n.result.oldKids.length}}),{kid:n.result.kid,publicKey:n.result.publicKey}}async function Gt(e,t){let{kid:r,payload:n,credentials:s}=e;if(!n.aud||!n.sub||!n.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(n.exp<=a)throw new Error("JWT exp must be in the future");if(n.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let u=await T(s,async(i,o)=>{await C(i);let c=await Me(r,i,{name:"ECDSA",namedCurve:"P-256"},["sign"]),d={typ:"JWT",alg:"ES256",kid:r},l=w(new TextEncoder().encode(JSON.stringify(d)).buffer),p=w(new TextEncoder().encode(JSON.stringify(n)).buffer),y=new TextEncoder().encode(`${l}.${p}`),g=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},c,y),k=w(g);return{jwt:`${l}.${p}.${k}`}});return await P({op:"sign",kid:r,requestId:t,userId:s.userId,unlockTime:u.unlockTime,lockTime:u.lockTime,duration:u.duration,details:{algorithm:"ES256",aud:n.aud,exp:n.exp,jti:n.jti}}),u.result}async function Nt(e,t){let{userId:r,ttlHours:n,credentials:s,autoExtend:a}=e;if(n<=0||n>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let i=(await S()).filter(K=>K.purpose==="vapid");if(i.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");i.sort((K,b)=>b.createdAt-K.createdAt);let o=i[0];if(!o)throw new Error("VAPID key record not found after filtering");let c=o.kid,d=`lease-${crypto.randomUUID()}`,l=crypto.getRandomValues(new Uint8Array(32)),p=Date.now(),y=p+n*3600*1e3,g=await T(s,async(K,b)=>{await C(K);let{delegationCert:E}=await Ne(d,y),R=await qt(b,l),q=await V(c);if(!q)throw new Error(`No wrapped key with id: ${c}`);let Y=new Uint8Array(q.iv),Z=q.aad,pe=await crypto.subtle.unwrapKey("pkcs8",q.wrappedKey,K,{name:"AES-GCM",iv:Y,additionalData:Z},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),ee=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",pe,R,{name:"AES-GCM",iv:ee}),iv:ee,sessionKEK:R,lakDelegationCert:E}});await x(`sessionkek:${d}`,g.result.sessionKEK),De.set(d,g.result.sessionKEK);let k={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},v={leaseId:d,userId:r,ttlHours:n,createdAt:p,exp:y,autoExtend:a??!0,quotas:k,wrappedLeaseKey:g.result.wrappedLeaseKey,wrappedLeaseKeyIV:g.result.iv.buffer.slice(g.result.iv.byteOffset,g.result.iv.byteOffset+g.result.iv.byteLength),leaseSalt:l.buffer.slice(l.byteOffset,l.byteOffset+l.byteLength),kid:c,lakDelegationCert:g.result.lakDelegationCert};return await we(v),await x(`quota:${d}`,{leaseId:d,tokensIssued:0,lastResetAt:p,perEndpoint:{}}),await P({op:"create-lease",kid:c,requestId:t,userId:r,details:{action:"create-lease",leaseId:d,userId:r,ttlHours:n,autoExtend:v.autoExtend}}),{leaseId:d,exp:y,quotas:k,autoExtend:v.autoExtend??!0}}async function Jt(e,t){let{leaseIds:r,credentials:n,requestAuth:s}=e,a=[],u=0,i=0,o=0,c=!1;if(n)try{await T(n,async(d,l)=>(c=!0,Promise.resolve()))}catch(d){for(let l of r){let p=await J(l);p&&p.autoExtend===!1&&(a.push({leaseId:l,status:"skipped",reason:`Authentication failed: ${de(d)}`}),i++)}if(i===r.length)return{results:a,extended:u,skipped:i,failed:o}}for(let d of r)try{let l=await J(d);if(!l){a.push({leaseId:d,status:"skipped",reason:`Lease not found: ${d}`}),i++;continue}if(l.autoExtend===!1&&!s){a.push({leaseId:d,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),i++;continue}if(l.autoExtend===!1&&s&&!c){a.push({leaseId:d,status:"skipped",reason:"Authentication required but credentials not valid"}),i++;continue}let y=(await S()).filter(E=>E.purpose==="vapid");if(y.length===0){a.push({leaseId:d,status:"skipped",reason:"No VAPID key found"}),i++;continue}y.sort((E,R)=>R.createdAt-E.createdAt);let k=y[0].kid;if(l.kid!==k){a.push({leaseId:d,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${l.kid}, current kid: ${k})`}),i++;continue}let v=Date.now(),K=v+30*24*60*60*1e3,b={...l,exp:K,createdAt:v};await we(b),await P({op:"extend-lease",kid:b.kid,requestId:t,userId:b.userId,details:{action:"extend-lease",leaseId:b.leaseId,userId:b.userId,newExp:K,autoExtend:b.autoExtend}}),a.push({leaseId:d,status:"extended",result:{leaseId:b.leaseId,exp:b.exp,iat:b.createdAt,kid:b.kid,autoExtend:b.autoExtend??!1}}),u++}catch(l){a.push({leaseId:d,status:"skipped",reason:`Error extending lease: ${de(l)}`}),o++}return{results:a,extended:u,skipped:i,failed:o}}async function Pt(e,t){let{leaseId:r}=e,{kid:n}=e;if(!n){let G=(await S()).filter(xt=>xt.purpose==="vapid");if(G.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(G.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let Ve=G[0];if(!Ve)throw new Error("No VAPID key found after filtering");n=Ve.kid}let s=await J(r);if(!s)throw new Error(`Lease not found: ${r}`);if(Date.now()>=s.exp)throw new Error("Lease expired");let u=(await S()).filter(L=>L.purpose==="vapid");if(u.length===0)throw new Error("No VAPID key available");u.sort((L,G)=>G.createdAt-L.createdAt);let i=u[0]?.kid;if(!i)throw new Error("Failed to determine current VAPID key");if(s.kid!==i)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await Je(r,s.lakDelegationCert);let o=await me();if(!o)throw new Error("No push subscription found. Call setPushSubscription() first.");let c=await A(`quota:${r}`),d=kt(c),l=Date.now()-3600*1e3;if(d.lastResetAt<l&&(d.tokensIssued=0,d.lastResetAt=Date.now()),d.tokensIssued>=s.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");d.tokensIssued++,await x(`quota:${r}`,d);let p=e.jti??crypto.randomUUID(),y=e.exp??Math.floor(Date.now()/1e3)+900,g=new URL(o.endpoint),k=`${g.protocol}//${g.host}`,v={aud:k,sub:"mailto:kms@example.com",exp:y,jti:p,uid:s.userId,eid:o.eid},K=De.get(r);if(!K){let L=await A(`sessionkek:${r}`);if(!L)throw new Error(`SessionKEK not found for lease: ${r}`);K=L,De.set(r,K)}let b=s.wrappedLeaseKey,E=new Uint8Array(s.wrappedLeaseKeyIV),R=await crypto.subtle.unwrapKey("pkcs8",b,K,{name:"AES-GCM",iv:E},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),q={typ:"JWT",alg:"ES256",kid:s.kid},Y=w(new TextEncoder().encode(JSON.stringify(q)).buffer),Z=w(new TextEncoder().encode(JSON.stringify(v)).buffer),pe=new TextEncoder().encode(`${Y}.${Z}`),ee=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},R,pe),Re=w(ee),Et=`${Y}.${Z}.${Re}`,St=await P({op:"sign",kid:s.kid,requestId:t,userId:s.userId,leaseId:r,details:{action:"issue-lease-jwt",jti:p,aud:k,eid:o.eid}});return{jwt:Et,jti:p,exp:y,auditEntry:St}}async function _t(e,t){let{leaseId:r,count:n,kid:s}=e;if(!Number.isInteger(n)||n<1||n>10)throw new Error("count must be an integer between 1 and 10");let a=900,u=Math.floor(a*.6),i=Math.floor(Date.now()/1e3),o=[];for(let c=0;c<n;c++){let d=crypto.randomUUID(),l=i+a+c*u,p=await Pt({leaseId:r,...s!==void 0&&{kid:s},jti:d,exp:l},`${t}-${c}`);o.push(p)}return o}async function zt(e){let t=e?.userId??"default",r=await Fe(t),n=[];await Pe(t)&&n.push("passphrase"),await Ee(t)&&n.push("passkey");let s;return r&&e?.userId&&(s=await ge(e.userId)),{isSetup:r,methods:n,...s!==void 0&&{leases:s}}}async function Qt(e){let t=e?.userId??"default",r=[];if(await Pe(t)&&r.push("enrollment:passphrase:v2"),await Ee(t)){let n=await A(`enrollment:passkey-prf:v2:${t}`),s=await A(`enrollment:passkey-gate:v2:${t}`);n&&r.push("enrollment:passkey-prf:v2"),s&&r.push("enrollment:passkey-gate:v2")}return{enrollments:r}}async function Xt(){return await ze()}async function Yt(){return{entries:await F()}}async function Zt(e){let{kid:t}=e,r=await V(t);if(!r||!r.publicKeyRaw)throw new Error(`Public key not found for kid: ${t}`);return{publicKey:w(r.publicKeyRaw)}}async function er(){return await Qe()}async function tr(e){let{userId:t}=e;return{leases:await ge(t)}}async function rr(e){let{leaseId:t,deleteIfInvalid:r=!1}=e,n=await J(t);if(!n)return{leaseId:t,valid:!1,reason:"not-found",kid:""};if(Date.now()>=n.exp)return r&&await _(t),{leaseId:t,valid:!1,reason:"expired",kid:n.kid};let a=(await S()).filter(o=>o.purpose==="vapid");if(a.length===0)return r&&await _(t),{leaseId:t,valid:!1,reason:"no-vapid-key",kid:n.kid};a.sort((o,c)=>c.createdAt-o.createdAt);let u=a[0];if(!u)return r&&await _(t),{leaseId:t,valid:!1,reason:"no-vapid-key",kid:n.kid};let i=u.kid;return n.kid!==i?(r&&await _(t),{leaseId:t,valid:!1,reason:"wrong-key",kid:n.kid}):{leaseId:t,valid:!0,kid:n.kid}}async function nr(){let t=(await S()).filter(n=>n.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");return{kid:r.kid}}async function sr(e){return await He(e.subscription),{success:!0}}async function ar(){return await $e(),{success:!0}}async function ir(){return{subscription:await me()}}async function or(){Be();let e=indexedDB.deleteDatabase("kms-v2");return await new Promise((t,r)=>{e.onsuccess=()=>t(),e.onerror=()=>r(new Error(e.error?.message??"Failed to delete database"))}),await ne(),Xe(),{success:!0}}async function ur(e,t){let{enrollmentId:r,credentials:n}=e;return await T(n,async(s,a)=>(await C(s),!0)),await qe(r),await P({op:"reset",kid:"",requestId:t,userId:n.userId,details:{action:"remove-enrollment",enrollmentId:r}}),{success:!0}}(async()=>{try{await ne(),await Ge(),await _e(),(await F()).length===0&&await P({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(e){console.error("[KMS Worker] Initialization failed:",e)}})();export{jt as handleMessage};
