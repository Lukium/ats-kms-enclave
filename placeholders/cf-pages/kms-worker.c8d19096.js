function f(e){let t=new Uint8Array(e),r=Array.from(t,s=>String.fromCharCode(s)).join("");return btoa(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/g,"")}function D(e){let t=e.replace(/-/g,"+").replace(/_/g,"/"),r=t.length%4;r&&(t+="=".repeat(4-r));let n=atob(t),s=new Uint8Array(n.length);for(let a=0;a<n.length;a++)s[a]=n.charCodeAt(a);return s.buffer}function G(e){if(e.length!==65||e[0]!==4)throw new Error("Invalid uncompressed P-256 public key");let t=f(e.slice(1,33).buffer),r=f(e.slice(33).buffer);return{kty:"EC",crv:"P-256",x:t,y:r}}async function j(e){let t={crv:e.crv,kty:e.kty,x:e.x,y:e.y},r=JSON.stringify(t),n=await crypto.subtle.digest("SHA-256",new TextEncoder().encode(r));return f(n)}function Ce(e){return"{"+Object.keys(e).sort().map(n=>[n,e[n]]).map(([n,s])=>`"${String(n)}":${JSON.stringify(s)}`).join(",")+"}"}function ne(e){let t={kmsVersion:e.kmsVersion,method:e.method,algVersion:e.algVersion,purpose:e.purpose};e.credentialId&&(t.credentialId=f(e.credentialId));let r=Ce(t);return new TextEncoder().encode(r).buffer}function se(e){let t={kmsVersion:e.kmsVersion,kid:e.kid,alg:e.alg,purpose:e.purpose,createdAt:e.createdAt,keyType:e.keyType},r=Ce(t);return new TextEncoder().encode(r).buffer}async function ye(e){let t=await crypto.subtle.exportKey("raw",e),r=await crypto.subtle.importKey("raw",t,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),n=new TextEncoder().encode("ATS/KMS/KCV/v2");return await crypto.subtle.sign("HMAC",r,n)}function Re(e,t){return vt(e,t)}function vt(e,t){let r=new Uint8Array(e),n=new Uint8Array(t);if(r.length!==n.length)return!1;let s=0;for(let a=0;a<r.length;a++)s|=r[a]^n[a];return s===0}async function X(e){return await crypto.subtle.digest("SHA-256",new TextEncoder().encode(e))}async function Ve(e={min:150,max:300,mid:220}){let t=await crypto.subtle.importKey("raw",new TextEncoder().encode("calibration"),"PBKDF2",!1,["deriveBits"]),r=crypto.getRandomValues(new Uint8Array(16)),n=1e5,s=performance.now();await crypto.subtle.deriveBits({name:"PBKDF2",hash:"SHA-256",salt:r,iterations:n},t,256);let i=performance.now()-s,u=Math.round(n*e.mid/i);return u=Math.min(Math.max(u,5e4),2e6),{iterations:u,measuredMs:i}}var Pt="kms-v2",St=1,O=null;async function ae(){return new Promise((e,t)=>{let r=indexedDB.open(Pt,St);r.onerror=()=>{t(new Error("Failed to open IndexedDB"))},r.onsuccess=()=>{O=r.result,e()},r.onupgradeneeded=n=>{let s=n.target.result;if(s.objectStoreNames.contains("config")||s.createObjectStore("config",{keyPath:"method"}),!s.objectStoreNames.contains("keys")){let a=s.createObjectStore("keys",{keyPath:"kid"});a.createIndex("by-purpose","purpose",{unique:!1}),a.createIndex("by-createdAt","createdAt",{unique:!1})}if(!s.objectStoreNames.contains("leases")){let a=s.createObjectStore("leases",{keyPath:"leaseId"});a.createIndex("by-userId","userId",{unique:!1}),a.createIndex("by-exp","exp",{unique:!1})}if(!s.objectStoreNames.contains("audit")){let a=s.createObjectStore("audit",{autoIncrement:!0});a.createIndex("by-seqNum","seqNum",{unique:!0}),a.createIndex("by-timestamp","timestamp",{unique:!1}),a.createIndex("by-op","op",{unique:!1}),a.createIndex("by-kid","kid",{unique:!1})}s.objectStoreNames.contains("meta")||s.createObjectStore("meta",{keyPath:"key"})}})}async function F(){if(O||await ae(),!O)throw new Error("Database not initialized");return O}function Te(){O&&(O.close(),O=null)}async function ie(e,t){let r=await F();return new Promise((n,s)=>{let u=r.transaction(e,"readonly").objectStore(e).get(t);u.onsuccess=()=>{n(u.result)},u.onerror=()=>{s(new Error(`Failed to get from ${e}`))}})}async function $(e,t){let r=await F();return new Promise((n,s)=>{let u=r.transaction(e,"readwrite").objectStore(e).put(t);u.onsuccess=()=>{n()},u.onerror=()=>{s(new Error(`Failed to put to ${e}`))}})}async function fe(e,t){let r=await F();return new Promise((n,s)=>{let u=r.transaction(e,"readwrite").objectStore(e).delete(t);u.onsuccess=()=>{n()},u.onerror=()=>{s(new Error(`Failed to delete from ${e}`))}})}async function Et(e){let t=await F();return new Promise((r,n)=>{let i=t.transaction(e,"readonly").objectStore(e).getAll();i.onsuccess=()=>{r(i.result)},i.onerror=()=>{n(new Error(`Failed to getAll from ${e}`))}})}async function L(e,t,r,n=e.algorithm,s=e.usages,a={alg:"unknown",purpose:"unknown"}){let i=crypto.getRandomValues(new Uint8Array(12)),u=Date.now(),o=se({kmsVersion:2,kid:r,alg:a.alg,purpose:a.purpose,createdAt:u,keyType:Array.isArray(s)?s.join(","):String(s)}),c=e.type==="private"?"pkcs8":"raw",d=await crypto.subtle.exportKey(c,e),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:i,additionalData:o},t,d),p={kid:r,kmsVersion:2,wrappedKey:l,iv:i.buffer.slice(i.byteOffset,i.byteOffset+i.byteLength),aad:o,...a.publicKeyRaw!==void 0&&{publicKeyRaw:a.publicKeyRaw},alg:a.alg,purpose:a.purpose,createdAt:u};await $("keys",p)}async function Ue(e,t,r,n=[]){let s=await ie("keys",e);if(!s)throw new Error(`No wrapped key with id: ${e}`);let a=new Uint8Array(s.iv),i=s.aad,u=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:i},t,s.wrappedKey),o=typeof r=="string"?r:r.name,d=o==="ECDSA"||o==="ECDH"||o==="Ed25519"||o.startsWith("RSA")?"pkcs8":"raw";return await crypto.subtle.importKey(d,u,r,!1,n)}async function M(e){return await ie("keys",e)??null}async function V(){return Et("keys")}async function Le(e){await fe("keys",e)}async function I(e){let t=await ie("meta",e);return t?t.value:null}async function T(e,t){await $("meta",{key:e,value:t})}async function Me(e){await fe("meta",e)}async function Be(e){await $("audit",e)}async function N(){let e=await F();return new Promise((t,r)=>{let i=e.transaction("audit","readonly").objectStore("audit").index("by-seqNum").getAll();i.onsuccess=()=>{t(i.result)},i.onerror=()=>{r(new Error("Failed to get audit entries"))}})}async function We(){let e=await N();return e.length>0?e[e.length-1]:null}async function we(e){await $("leases",e)}async function Y(e){return await ie("leases",e)??null}async function ge(e){let t=await F();return new Promise((r,n)=>{let u=t.transaction("leases","readonly").objectStore("leases").index("by-userId").getAll(e);u.onsuccess=()=>{r(u.result)},u.onerror=()=>{n(new Error("Failed to get user leases"))}})}async function Z(e){await fe("leases",e)}async function Oe(e){let r=(await V()).filter(a=>a.purpose==="vapid");if(r.length===0)throw new Error("No VAPID key found. Generate a VAPID key first.");if(r.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let n=r[0];if(!n)throw new Error("No VAPID key found after filtering");let s={...n,subscription:e};await $("keys",s)}async function He(){let t=(await V()).filter(a=>a.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to update.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");let{subscription:n,...s}=r;await $("keys",s)}async function me(){let t=(await V()).filter(n=>n.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Cannot determine which to read.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");return r.subscription??null}var oe=e=>`enrollment:passphrase:v2:${e}`,ue=e=>`enrollment:passkey-prf:v2:${e}`,de=e=>`enrollment:passkey-gate:v2:${e}`;function ke(){let e=new Uint8Array(32);return crypto.getRandomValues(e),e}async function he(e,t,r){let n=r??ke(),{iterations:s}=await Ve(),a=crypto.getRandomValues(new Uint8Array(16)),i=await crypto.subtle.importKey("raw",new TextEncoder().encode(t),"PBKDF2",!1,["deriveKey"]),u=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:a,iterations:s},i,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),o=await ye(u),c=crypto.getRandomValues(new Uint8Array(12)),d=ne({kmsVersion:2,method:"passphrase",algVersion:1,purpose:"master-secret"}),l=await crypto.subtle.encrypt({name:"AES-GCM",iv:c,additionalData:d},u,n),p={kmsVersion:2,algVersion:1,method:"passphrase",kdf:{algorithm:"PBKDF2-HMAC-SHA256",iterations:s,salt:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),lastCalibratedAt:Date.now(),platformHash:""},kcv:o,encryptedMS:l,msIV:c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength),msAAD:d,msVersion:1,createdAt:Date.now(),updatedAt:Date.now()};return await T(oe(e),p),{success:!0,ms:n}}async function be(e,t,r,n,s="",a,i){let u=n??ke(),o=a??crypto.getRandomValues(new Uint8Array(32)),c=i??await X("ATS/KMS/KEK-wrap/salt/v2"),d=new TextEncoder().encode("ATS/KMS/KEK-wrap/v2"),l=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]),p=c instanceof Uint8Array?c.buffer:c,y=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:p,info:d},l,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),w=crypto.getRandomValues(new Uint8Array(12)),m=ne({kmsVersion:2,method:"passkey-prf",algVersion:1,credentialId:t,purpose:"master-secret"}),v=await crypto.subtle.encrypt({name:"AES-GCM",iv:w,additionalData:m},y,u),h=Date.now(),k=o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength),P;c instanceof Uint8Array?P=c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength):P=c;let S={kmsVersion:2,algVersion:1,method:"passkey-prf",credentialId:t,rpId:s,kdf:{algorithm:"HKDF-SHA256",appSalt:k,hkdfSalt:P,info:"ATS/KMS/KEK-wrap/v2"},encryptedMS:v,msIV:w.buffer.slice(w.byteOffset,w.byteOffset+w.byteLength),msAAD:m,msVersion:1,createdAt:h,updatedAt:h};return await T(ue(e),S),{success:!0,ms:u}}async function Ae(e,t,r,n=""){let s=r??ke(),a=crypto.getRandomValues(new Uint8Array(32)),i=await X("ATS/KMS/KEK-gate/salt/v2"),u=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),o=await crypto.subtle.importKey("raw",a,"HKDF",!1,["deriveKey"]),c=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:i,info:u},o,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),d=crypto.getRandomValues(new Uint8Array(12)),l=ne({kmsVersion:2,method:"passkey-gate",algVersion:1,credentialId:t,purpose:"master-secret"}),p=await crypto.subtle.encrypt({name:"AES-GCM",iv:d,additionalData:l},c,s),y=Date.now(),w={kmsVersion:2,algVersion:1,method:"passkey-gate",credentialId:t,rpId:n,pepperWrapped:a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength),encryptedMS:p,msIV:d.buffer.slice(d.byteOffset,d.byteOffset+d.byteLength),msAAD:l,msVersion:1,createdAt:y,updatedAt:y};return await T(de(e),w),{success:!0,ms:s}}async function xt(e,t){let r=await I(oe(e));if(!r)return{success:!1,error:"Passphrase not set up"};let n=await crypto.subtle.importKey("raw",new TextEncoder().encode(t),"PBKDF2",!1,["deriveKey"]),s=await crypto.subtle.deriveKey({name:"PBKDF2",hash:"SHA-256",salt:r.kdf.salt,iterations:r.kdf.iterations},n,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"]),a=await ye(s);if(!Re(a,r.kcv))return{success:!1,error:"Invalid passphrase"};try{let i=await crypto.subtle.decrypt({name:"AES-GCM",iv:r.msIV,additionalData:r.msAAD},s,r.encryptedMS);return{success:!0,ms:new Uint8Array(i)}}catch{return{success:!1,error:"Decryption failed"}}}async function Dt(e,t){let r=await I(ue(e));if(!r)return{success:!1,error:"Passkey not set up"};let n=r.kdf.hkdfSalt,s=new TextEncoder().encode(r.kdf.info),a=await crypto.subtle.importKey("raw",t,"HKDF",!1,["deriveKey"]),i=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let u=await crypto.subtle.decrypt({name:"AES-GCM",iv:r.msIV,additionalData:r.msAAD},i,r.encryptedMS);return{success:!0,ms:new Uint8Array(u)}}catch{return{success:!1,error:"Decryption failed"}}}async function Ct(e){let t=await I(de(e));if(!t)return{success:!1,error:"Passkey gate not set up"};let r=new Uint8Array(t.pepperWrapped),n=await X("ATS/KMS/KEK-gate/salt/v2"),s=new TextEncoder().encode("ATS/KMS/KEK-gate/v2"),a=await crypto.subtle.importKey("raw",r,"HKDF",!1,["deriveKey"]),i=await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:n,info:s},a,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);try{let u=await crypto.subtle.decrypt({name:"AES-GCM",iv:t.msIV,additionalData:t.msAAD},i,t.encryptedMS);return{success:!0,ms:new Uint8Array(u)}}catch{return{success:!1,error:"Decryption failed"}}}async function qe(e){let t=await I(oe(e)),r=await I(ue(e)),n=await I(de(e));return!!(t||r||n)}async function Ke(e){return!!await I(oe(e))}async function Ie(e){let t=await I(ue(e)),r=await I(de(e));return!!(t||r)}async function ee(e){let t=await X("ATS/KMS/MKEK/salt/v2"),r=new TextEncoder().encode("ATS/KMS/MKEK/v2"),n=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:t,info:r},n,{name:"AES-GCM",length:256},!1,["encrypt","decrypt","wrapKey","unwrapKey"])}async function B(e,t){let r=Date.now(),n=null;try{let s;switch(e.method){case"passphrase":s=await xt(e.userId,e.passphrase);break;case"passkey-prf":s=await Dt(e.userId,e.prfOutput);break;case"passkey-gate":s=await Ct(e.userId);break;default:throw new Error("Unknown credential method")}if(!s.success)throw new Error(s.error??"Unlock failed");n=s.ms;let a=await ee(n),i=await t(a,n),u=Date.now();return{result:i,unlockTime:r,lockTime:u,duration:u-r}}finally{n&&n.fill(0)}}var ve=Promise.resolve(),E=null;async function Ge(){}async function ce(){let e=await I("LRK");return e||(e=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey","encrypt","decrypt"]),await T("LRK",e)),e}async function te(e){let t=await crypto.subtle.digest("SHA-256",e);return f(t)}async function U(e){let t=await M("audit-user");if(t&&t.publicKeyRaw){let a=await crypto.subtle.unwrapKey("pkcs8",t.wrappedKey,e,{name:"AES-GCM",iv:t.iv,additionalData:t.aad},{name:"Ed25519"},!1,["sign"]),i=await crypto.subtle.importKey("raw",t.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),u=await te(t.publicKeyRaw);E={type:"UAK",keyPair:{privateKey:a,publicKey:i},keyId:u};return}let r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),n=await crypto.subtle.exportKey("raw",r.publicKey);await L(r.privateKey,e,"audit-user",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit",publicKeyRaw:n});let s=await te(n);E={type:"UAK",keyPair:r,keyId:s}}async function je(e,t){if(!E||E.type!=="UAK")throw new Error("UAK must be active to generate LAK - call ensureAuditKey first");let r=Date.now(),n=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign","verify"]),s=await crypto.subtle.exportKey("raw",n.publicKey),a=f(s),i={type:"audit-delegation",version:1,signerKind:"LAK",leaseId:e,delegatePub:a,scope:["vapid:issue","lease:expire"],notBefore:r,notAfter:t,codeHash:"TODO",manifestHash:"TODO",kmsVersion:"v2.0.0"},u=JSON.stringify(i,Object.keys(i).sort()),o=await crypto.subtle.sign("Ed25519",E.keyPair.privateKey,new TextEncoder().encode(u)),c={...i,sig:f(o)},d=await ce(),l=se({kmsVersion:2,kid:`lak-${e}`,alg:"EdDSA",purpose:"lak",createdAt:r,keyType:"lease-audit-key"}),p=crypto.getRandomValues(new Uint8Array(12)),y=await crypto.subtle.wrapKey("pkcs8",n.privateKey,d,{name:"AES-GCM",iv:p,additionalData:l});return await T(`lease-audit-key:${e}`,{leaseId:e,wrappedKey:y,iv:p,aad:l,publicKeyRaw:s,delegationCert:c,expiresAt:t,createdAt:r}),{lakKeyPair:n,delegationCert:c}}async function Fe(e,t){let r=await I(`lease-audit-key:${e}`);if(!r)throw new Error(`LAK not found for lease: ${e}`);let n=await ce(),s=await crypto.subtle.unwrapKey("pkcs8",r.wrappedKey,n,{name:"AES-GCM",iv:r.iv,additionalData:r.aad},{name:"Ed25519"},!1,["sign"]),a=await crypto.subtle.importKey("raw",r.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),i=await te(r.publicKeyRaw);E={type:"LAK",keyPair:{privateKey:s,publicKey:a},keyId:i,cert:t}}async function $e(){let e=await M("audit-instance");if(e&&e.publicKeyRaw){let o=await ce(),c=await crypto.subtle.unwrapKey("pkcs8",e.wrappedKey,o,{name:"AES-GCM",iv:e.iv,additionalData:e.aad},{name:"Ed25519"},!1,["sign"]),d=await crypto.subtle.importKey("raw",e.publicKeyRaw,{name:"Ed25519"},!1,["verify"]),l=await te(e.publicKeyRaw);E={type:"KIAK",keyPair:{privateKey:c,publicKey:d},keyId:l};return}let t=await ce(),r=await crypto.subtle.generateKey({name:"Ed25519"},!0,["sign"]),n=await crypto.subtle.exportKey("raw",r.publicKey);await L(r.privateKey,t,"audit-instance",{name:"Ed25519"},["sign"],{alg:"EdDSA",purpose:"audit-instance",publicKeyRaw:n});let s=await M("audit-instance");if(!s)throw new Error("Failed to retrieve wrapped KIAK after storage");let a=await crypto.subtle.unwrapKey("pkcs8",s.wrappedKey,t,{name:"AES-GCM",iv:s.iv,additionalData:s.aad},{name:"Ed25519"},!1,["sign"]),i=await crypto.subtle.importKey("raw",n,{name:"Ed25519"},!1,["verify"]),u=await te(n);E={type:"KIAK",keyPair:{privateKey:a,publicKey:i},keyId:u}}async function C(e){let t,r,n=new Promise((s,a)=>{t=s,r=a});return ve=ve.then(async()=>{try{if(!E)throw new Error("No active audit signer - call ensureAuditKey, loadLAK, or ensureKIAK first");let s=Date.now(),a=await We(),i=a?a.chainHash:"",o={kmsVersion:2,seqNum:a?a.seqNum+1:1,timestamp:s,op:e.op,kid:e.kid,requestId:e.requestId,userId:e.userId,origin:e.origin,leaseId:e.leaseId,unlockTime:e.unlockTime,lockTime:e.lockTime,duration:e.duration,details:e.details,previousHash:i,signer:E.type,signerId:E.keyId},c=JSON.stringify(o),d=new TextEncoder().encode(i+c),l=await crypto.subtle.digest("SHA-256",d),p=f(l),y=new TextEncoder().encode(p),w=await crypto.subtle.sign("Ed25519",E.keyPair.privateKey,y),m=f(w),v={kmsVersion:o.kmsVersion,seqNum:o.seqNum,timestamp:o.timestamp,op:o.op,kid:o.kid,requestId:o.requestId,userId:o.userId,...o.origin!==void 0&&{origin:o.origin},...o.leaseId!==void 0&&{leaseId:o.leaseId},...o.unlockTime!==void 0&&{unlockTime:o.unlockTime},...o.lockTime!==void 0&&{lockTime:o.lockTime},...o.duration!==void 0&&{duration:o.duration},...o.details!==void 0&&{details:o.details},previousHash:o.previousHash,chainHash:p,signer:o.signer,signerId:o.signerId,...E.cert!==void 0&&{cert:E.cert},sig:m};await Be(v),t(v)}catch(s){r(s)}}).catch(()=>{}),n}async function Ne(){let e=await N(),t=[],r=0;for(let n of e){let s={kmsVersion:n.kmsVersion,seqNum:n.seqNum,timestamp:n.timestamp,op:n.op,kid:n.kid,requestId:n.requestId,userId:n.userId,origin:n.origin,leaseId:n.leaseId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:n.details,previousHash:n.previousHash,signer:n.signer,signerId:n.signerId},a=JSON.stringify(s),i=new TextEncoder().encode(n.previousHash+a),u=await crypto.subtle.digest("SHA-256",i);f(u)!==n.chainHash&&t.push(`Chain hash mismatch at seq ${n.seqNum}`),r+=1}return{valid:t.length===0,verified:r,errors:t}}async function Je(){let e=await M("audit-user");if(!e||!e.publicKeyRaw)throw new Error("UAK not initialized");return{publicKey:f(e.publicKeyRaw)}}function _e(){E=null,ve=Promise.resolve()}function le(e){if(e instanceof Error)return e.message;if(typeof e=="string")return e;if(typeof e=="object"&&e!==null&&"message"in e&&typeof e.message=="string")return e.message;try{return String(e)}catch{return"Unknown error"}}var b=class extends Error{constructor(r,n,s,a){super(`RPC ${r}: Invalid ${n} - expected ${s}, got ${typeof a}`);this.method=r;this.param=n;this.expected=s;this.received=a;this.name="RPCValidationError"}};function A(e,t){if(typeof t!="object"||t===null)throw new b(e,"params","object",t);return t}function g(e,t,r){if(typeof r!="string")throw new b(e,t,"string",r);return r}function H(e,t,r){if(r!==void 0)return g(e,t,r)}function pe(e,t,r){if(typeof r!="number")throw new b(e,t,"number",r);return r}function Rt(e,t,r){if(typeof r!="boolean")throw new b(e,t,"boolean",r);return r}function ze(e,t,r){if(r!==void 0)return Rt(e,t,r)}function Pe(e,t,r){if(r instanceof ArrayBuffer)return r;if(r instanceof Uint8Array){let n=new ArrayBuffer(r.byteLength);return new Uint8Array(n).set(r),n}throw new b(e,t,"ArrayBuffer or Uint8Array",r)}function Se(e,t,r){if(r!==void 0){if(r instanceof Uint8Array)return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);throw new b(e,t,"ArrayBuffer or Uint8Array",r)}}function q(e,t){if(typeof t!="object"||t===null)throw new b(e,"credentials","AuthCredentials object",t);let r=t;if(typeof r.method!="string")throw new b(e,"credentials.method","string",r.method);if(typeof r.userId!="string")throw new b(e,"credentials.userId","string",r.userId);switch(r.method){case"passphrase":if(typeof r.passphrase!="string")throw new b(e,"credentials.passphrase","string",r.passphrase);return{method:"passphrase",passphrase:r.passphrase,userId:r.userId};case"passkey-prf":if(!(r.prfOutput instanceof ArrayBuffer))throw new b(e,"credentials.prfOutput","ArrayBuffer",r.prfOutput);return{method:"passkey-prf",prfOutput:r.prfOutput,userId:r.userId};case"passkey-gate":return{method:"passkey-gate",userId:r.userId};default:throw new b(e,"credentials.method","passphrase | passkey-prf | passkey-gate",r.method)}}function Vt(e,t){if(typeof t!="object"||t===null)throw new b(e,"payload","VAPIDPayload object",t);let r=t;return{aud:g(e,"payload.aud",r.aud),sub:g(e,"payload.sub",r.sub),exp:pe(e,"payload.exp",r.exp),jti:g(e,"payload.jti",r.jti)}}function Qe(e){let t=A("setupPassphrase",e),r=Se("setupPassphrase","existingMS",t.existingMS);return{userId:g("setupPassphrase","userId",t.userId),passphrase:g("setupPassphrase","passphrase",t.passphrase),...r!==void 0&&{existingMS:r}}}function Xe(e){let t=A("setupPasskeyPRF",e);if(!t.credentialId)throw new Error("credentialId required");let r=H("setupPasskeyPRF","rpId",t.rpId),n=Se("setupPasskeyPRF","existingMS",t.existingMS);return{userId:g("setupPasskeyPRF","userId",t.userId),credentialId:Pe("setupPasskeyPRF","credentialId",t.credentialId),prfOutput:Pe("setupPasskeyPRF","prfOutput",t.prfOutput),...r!==void 0&&{rpId:r},...n!==void 0&&{existingMS:n}}}function Ye(e){let t=A("setupWithPopup",e);return{userId:g("setupWithPopup","userId",t.userId)}}function Ze(e){let t=A("setupPasskeyGate",e),r=H("setupPasskeyGate","rpId",t.rpId),n=Se("setupPasskeyGate","existingMS",t.existingMS);return{userId:g("setupPasskeyGate","userId",t.userId),credentialId:Pe("setupPasskeyGate","credentialId",t.credentialId),...r!==void 0&&{rpId:r},...n!==void 0&&{existingMS:n}}}function et(e){let t=A("addEnrollment",e);return{userId:g("addEnrollment","userId",t.userId),credentials:q("addEnrollment",t.credentials)}}function tt(e){let t=A("generateVAPID",e);return{credentials:q("generateVAPID",t.credentials)}}function rt(e){let t=A("regenerateVAPID",e);return{credentials:q("regenerateVAPID",t.credentials)}}function nt(e){let t=A("signJWT",e);return{kid:g("signJWT","kid",t.kid),payload:Vt("signJWT",t.payload),credentials:q("signJWT",t.credentials)}}function st(e){let t=A("createLease",e),r={userId:g("createLease","userId",t.userId),ttlHours:pe("createLease","ttlHours",t.ttlHours),credentials:q("createLease",t.credentials)},n=ze("createLease","autoExtend",t.autoExtend);return n!==void 0&&(r.autoExtend=n),r}function at(e){let t=A("extendLeases",e);if(!Array.isArray(t.leaseIds))throw new Error(`RPC extendLeases: Invalid leaseIds - expected array, got ${typeof t.leaseIds}`);if(t.leaseIds.length===0)throw new Error("RPC extendLeases: leaseIds array cannot be empty");let n={leaseIds:t.leaseIds.map((a,i)=>{if(typeof a!="string"||a.length===0)throw new Error(`RPC extendLeases: Invalid leaseId at index ${i} - expected non-empty string`);return a}),userId:g("extendLeases","userId",t.userId)},s=ze("extendLeases","requestAuth",t.requestAuth);return s!==void 0&&(n.requestAuth=s),t.credentials!==void 0&&(n.credentials=q("extendLeases",t.credentials)),n}function it(e){let t=A("issueVAPIDJWT",e),r=H("issueVAPIDJWT","kid",t.kid),n=H("issueVAPIDJWT","jti",t.jti),s=t.exp!==void 0?pe("issueVAPIDJWT","exp",t.exp):void 0;return{leaseId:g("issueVAPIDJWT","leaseId",t.leaseId),...r!==void 0&&{kid:r},...n!==void 0&&{jti:n},...s!==void 0&&{exp:s}}}function ot(e){let t=A("issueVAPIDJWTs",e),r=H("issueVAPIDJWTs","kid",t.kid);return{leaseId:g("issueVAPIDJWTs","leaseId",t.leaseId),count:pe("issueVAPIDJWTs","count",t.count),...r!==void 0&&{kid:r}}}function ut(e){if(e==null)return{};let t=A("isSetup",e),r=H("isSetup","userId",t.userId);return r!==void 0?{userId:r}:{}}function dt(e){if(e==null)return{};let t=A("getEnrollments",e),r=H("getEnrollments","userId",t.userId);return r!==void 0?{userId:r}:{}}function ct(e){let t=A("getPublicKey",e);return{kid:g("getPublicKey","kid",t.kid)}}function lt(e){let t=A("getUserLeases",e);return{userId:g("getUserLeases","userId",t.userId)}}function pt(e){let t=A("verifyLease",e),r={leaseId:g("verifyLease","leaseId",t.leaseId)};if("deleteIfInvalid"in t){if(typeof t.deleteIfInvalid!="boolean")throw new Error("verifyLease: deleteIfInvalid must be a boolean");r.deleteIfInvalid=t.deleteIfInvalid}return r}function yt(e){let t=A("removeEnrollment",e);return{enrollmentId:g("removeEnrollment","enrollmentId",t.enrollmentId),credentials:q("removeEnrollment",t.credentials)}}var Tt=["fcm.googleapis.com","web.push.apple.com","updates.push.services.mozilla.com","notify.windows.com"];function Ut(e,t){if(typeof t!="object"||t===null)throw new b(e,"subscription","object",t);let r=t,n=g(e,"subscription.endpoint",r.endpoint);if(!n.startsWith("https://"))throw new Error(`${e}: subscription.endpoint must use HTTPS`);let s;try{s=new URL(n)}catch{throw new Error(`${e}: subscription.endpoint is not a valid URL`)}if(!Tt.some(p=>s.hostname===p||s.hostname.endsWith(`.${p}`)))throw new Error(`${e}: subscription.endpoint must be from a known push service (FCM, APNs, Mozilla Push, WNS). Got: ${s.hostname}`);let i=r.expirationTime;if(i!==null&&typeof i!="number")throw new b(e,"subscription.expirationTime","number or null",i);if(typeof r.keys!="object"||r.keys===null)throw new b(e,"subscription.keys","object",r.keys);let u=r.keys,o=g(e,"subscription.keys.p256dh",u.p256dh),c=g(e,"subscription.keys.auth",u.auth);if(o.length===0)throw new Error(`${e}: subscription.keys.p256dh must be non-empty`);if(c.length===0)throw new Error(`${e}: subscription.keys.auth must be non-empty`);let d=g(e,"subscription.eid",r.eid);if(d.length===0)throw new Error(`${e}: subscription.eid must be non-empty`);let l=r.createdAt;if(typeof l!="number")throw new b(e,"subscription.createdAt","number",l);return{endpoint:n,expirationTime:i,keys:{p256dh:o,auth:c},eid:d,createdAt:l}}function ft(e){let t=A("setPushSubscription",e);return{subscription:Ut("setPushSubscription",t.subscription)}}function Mt(e){if(typeof e!="object"||e===null)return!1;let t=e;return typeof t.tokensIssued=="number"&&typeof t.lastResetAt=="number"}function wt(e){return Mt(e)?e:{tokensIssued:0,lastResetAt:Date.now()}}var Ee=new Map,_=new Map,J=new Map;async function Bt(e,t){let r=await crypto.subtle.importKey("raw",e,"HKDF",!1,["deriveKey"]);return await crypto.subtle.deriveKey({name:"HKDF",hash:"SHA-256",salt:t,info:new TextEncoder().encode("ATS/KMS/SessionKEK/v1")},r,{name:"AES-GCM",length:256},!1,["wrapKey","unwrapKey"])}async function gt(){let e=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveBits"]),t=await crypto.subtle.exportKey("raw",e.publicKey),r=crypto.randomUUID(),n=crypto.getRandomValues(new Uint8Array(32)),s=crypto.getRandomValues(new Uint8Array(32));return _.set(r,{privateKey:e.privateKey,appSalt:n,hkdfSalt:s,createdAt:Date.now()}),setTimeout(()=>{_.delete(r)},10*60*1e3),{publicKey:f(t),keyId:r,appSalt:f(n.buffer),hkdfSalt:f(s.buffer)}}async function Wt(e){let t=_.get(e.transportKeyId);if(!t)throw new Error("Transport key not found or expired");let r=D(e.ephemeralPublicKey),n=await crypto.subtle.importKey("raw",r,{name:"ECDH",namedCurve:"P-256"},!1,[]),s=await crypto.subtle.deriveBits({name:"ECDH",public:n},t.privateKey,256),a=await crypto.subtle.importKey("raw",s,"HKDF",!1,["deriveBits"]),i=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},a,256),u=await crypto.subtle.importKey("raw",i,{name:"AES-GCM",length:256},!1,["decrypt"]),o=D(e.iv),c=D(e.encryptedCredentials),d=await crypto.subtle.decrypt({name:"AES-GCM",iv:o,tagLength:128},u,c),l=JSON.parse(new TextDecoder().decode(d)),p;if(e.method==="passphrase"){let y=l;p=await mt({userId:e.userId,passphrase:y.passphrase},e.requestId)}else if(e.method==="passkey-prf"){let y=l;p=await kt({userId:e.userId,credentialId:D(y.credentialId),prfOutput:D(y.prfOutput),...y.rpId!==void 0&&{rpId:y.rpId},appSalt:t.appSalt,hkdfSalt:t.hkdfSalt},e.requestId)}else if(e.method==="passkey-gate"){let y=l;p=await ht({userId:e.userId,credentialId:D(y.credentialId),...y.rpId!==void 0&&{rpId:y.rpId}},e.requestId)}else{let y=e.method;throw new Error(`Unknown method: ${String(y)}`)}return _.delete(e.transportKeyId),p}async function Ot(e,t){let r=await gt(),n=new URL("https://kms.ats.run/");n.searchParams.set("mode","setup");let a=await new Promise((u,o)=>{let c=setTimeout(()=>{o(new Error("Setup with popup timeout"))},3e5);J.set(t,{resolve:u,reject:o,timeout:c}),self.postMessage({type:"worker:setup-with-popup",requestId:t,userId:e.userId,popupURL:n.toString(),transportKey:r.publicKey,transportKeyId:r.keyId,appSalt:r.appSalt,hkdfSalt:r.hkdfSalt})});return await Wt({method:a.method,transportKeyId:a.transportKeyId,ephemeralPublicKey:a.ephemeralPublicKey,iv:a.iv,encryptedCredentials:a.encryptedCredentials,userId:a.userId,requestId:t})}self.addEventListener("message",e=>{let t=e.data;if("type"in t&&t.type==="worker:popup-credentials"){let r=t.requestId;if(r&&t.credentials){let n=J.get(r);n&&(clearTimeout(n.timeout),J.delete(r),n.resolve(t.credentials))}return}if("type"in t&&t.type==="worker:popup-error"){let r=t.requestId;if(r){let n=J.get(r);n&&(clearTimeout(n.timeout),J.delete(r),n.reject(new Error(t.reason||"Popup setup failed")))}return}(async()=>{let r=e.data,n=await Ht(r);self.postMessage(n)})().catch(r=>{console.error("[KMS Worker] Message handling failed:",r);let n=e.data;self.postMessage({id:n?.id||"unknown",error:r instanceof Error?r.message:"Unknown error"})})});async function Ht(e){let{id:t,method:r,params:n}=e;try{let s;switch(r){case"setupWithPopup":s=await Ot(Ye(n),t);break;case"setupPassphrase":s=await mt(Qe(n),t);break;case"setupPasskeyPRF":s=await kt(Xe(n),t);break;case"setupPasskeyGate":s=await ht(Ze(n),t);break;case"addEnrollment":s=await qt(et(n),t);break;case"generateVAPID":s=await Gt(tt(n),t);break;case"regenerateVAPID":s=await jt(rt(n),t);break;case"signJWT":s=await Ft(nt(n),t);break;case"createLease":s=await $t(st(n),t);break;case"extendLeases":s=await Nt(at(n),t);break;case"issueVAPIDJWT":s=await bt(it(n),t);break;case"issueVAPIDJWTs":s=await Jt(ot(n),t);break;case"isSetup":s=await _t(ut(n));break;case"getEnrollments":s=await zt(dt(n));break;case"verifyAuditChain":s=await Qt();break;case"getAuditLog":s=await Xt();break;case"getPublicKey":s=await Yt(ct(n));break;case"getAuditPublicKey":s=await Zt();break;case"getUserLeases":s=await er(lt(n));break;case"verifyLease":s=await tr(pt(n));break;case"getVAPIDKid":s=await rr();break;case"resetKMS":s=await ir();break;case"removeEnrollment":s=await or(yt(n),t);break;case"setPushSubscription":s=await nr(ft(n));break;case"removePushSubscription":s=await sr();break;case"getPushSubscription":s=await ar();break;default:throw new Error(`Unknown RPC method: ${r}`)}return{id:t,result:s}}catch(s){return{id:t,error:le(s)}}}async function mt(e,t){let{userId:r,passphrase:n,existingMS:s}=e;if(!n||n.length<8)throw new Error("Passphrase must be at least 8 characters");let a=await he(r,n,s);if(!a.success)throw new Error(a.error);let i=await ee(a.ms);await U(i);let u=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in u)||!("publicKey"in u))throw new Error("Failed to generate ECDSA keypair");let o=u,c=await crypto.subtle.exportKey("raw",o.publicKey),d=G(new Uint8Array(c)),l=await j(d);return await L(o.privateKey,i,l,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:c}),a.ms.fill(0),await C({op:"setup-passphrase",kid:"",requestId:t,userId:r,details:{method:"passphrase",vapidKid:l}}),{success:!0,enrollmentId:"enrollment:passphrase:v2",vapidPublicKey:f(c),vapidKid:l}}async function kt(e,t){let{userId:r,credentialId:n,prfOutput:s,rpId:a="",existingMS:i,appSalt:u,hkdfSalt:o}=e;if(!n||n.byteLength===0)throw new Error("credentialId required");if(!s||s.byteLength!==32)throw new Error("prfOutput must be 32 bytes");let c=await be(r,n,s,i,a,u,o);if(!c.success)throw new Error(c.error);let d=await ee(c.ms);await U(d);let l=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in l)||!("publicKey"in l))throw new Error("Failed to generate ECDSA keypair");let p=l,y=await crypto.subtle.exportKey("raw",p.publicKey),w=G(new Uint8Array(y)),m=await j(w);return await L(p.privateKey,d,m,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:y}),c.ms.fill(0),await C({op:"setup-passkey-prf",kid:"",requestId:t,userId:r,details:{method:"passkey-prf",credentialId:f(n),vapidKid:m}}),{success:!0,enrollmentId:"enrollment:passkey-prf:v2",vapidPublicKey:f(y),vapidKid:m}}async function ht(e,t){let{userId:r,credentialId:n,rpId:s="",existingMS:a}=e;if(!n||n.byteLength===0)throw new Error("credentialId required");let i=await Ae(r,n,a,s);if(!i.success)throw new Error(i.error);let u=await ee(i.ms);await U(u);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let c=o,d=await crypto.subtle.exportKey("raw",c.publicKey),l=G(new Uint8Array(d)),p=await j(l);return await L(c.privateKey,u,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),i.ms.fill(0),await C({op:"setup-passkey-gate",kid:"",requestId:t,userId:r,details:{method:"passkey-gate",credentialId:f(n),vapidKid:p}}),{success:!0,enrollmentId:"enrollment:passkey-gate:v2",vapidPublicKey:f(d),vapidKid:p}}async function qt(e,t){let{userId:r,credentials:n}=e;console.log("[Worker] handleAddEnrollment START:",{userId:r,method:n.method,requestId:t}),console.log("[Worker] Step 1: Unlocking with credentials to get MS...");let s=await B(n,async(K,x)=>(await U(K),x));console.log("[Worker] Step 1: MS obtained and audit key ensured ✓"),console.log("[Worker] Step 2: Generating transport key...");let a=await gt();console.log("[Worker] Step 2: Transport key generated ✓");let i=new URL("https://kms.ats.run/");i.searchParams.set("mode","setup"),console.log("[Worker] Step 3: Sending worker:setup-with-popup message to parent...");let u=new Promise((K,x)=>{let z=setTimeout(()=>{console.error("[Worker] Popup timeout after 5 minutes"),x(new Error("Add enrollment popup timeout"))},3e5);J.set(t,{resolve:K,reject:x,timeout:z}),console.log("[Worker] Posting message with requestId:",t),self.postMessage({type:"worker:setup-with-popup",requestId:t,userId:e.userId,popupURL:i.toString(),transportKey:a.publicKey,transportKeyId:a.keyId,appSalt:a.appSalt,hkdfSalt:a.hkdfSalt}),console.log("[Worker] Message posted, waiting for popup response...")});console.log("[Worker] Step 4: Waiting for popup credentials...");let o=await u;console.log("[Worker] Step 4: Credentials received ✓");let c=_.get(o.transportKeyId);if(!c)throw new Error("Transport key not found or expired");let d=D(o.ephemeralPublicKey),l=await crypto.subtle.importKey("raw",d,{name:"ECDH",namedCurve:"P-256"},!1,[]),p=await crypto.subtle.deriveBits({name:"ECDH",public:l},c.privateKey,256),y=await crypto.subtle.importKey("raw",p,"HKDF",!1,["deriveBits"]),w=await crypto.subtle.deriveBits({name:"HKDF",salt:new Uint8Array(32),info:new TextEncoder().encode("ATS/KMS/setup-transport/v2"),hash:"SHA-256"},y,256),m=await crypto.subtle.importKey("raw",w,{name:"AES-GCM",length:256},!1,["decrypt"]),v=D(o.iv),h=D(o.encryptedCredentials),k=await crypto.subtle.decrypt({name:"AES-GCM",iv:v,tagLength:128},m,h),P=JSON.parse(new TextDecoder().decode(k));_.delete(o.transportKeyId);let S=o.method,R;if(S==="passphrase")R=await he(r,P.passphrase,s);else if(S==="passkey-prf"){let K=P,x=K.rpId||"";R=await be(r,D(K.credentialId),D(K.prfOutput),s,x)}else if(S==="passkey-gate"){let K=P,x=K.rpId||"";R=await Ae(r,D(K.credentialId),s,x)}else{let K=S;throw new Error(`Unknown enrollment method: ${String(K)}`)}if(s.fill(0),!R.success)throw new Error(R.error);return await C({op:"add-enrollment",kid:"",requestId:t,userId:n.userId,details:{method:S,action:"add-enrollment"}}),{success:!0,enrollmentId:`enrollment:${S}:v2`}}async function Gt(e,t){let{credentials:r}=e,n=await B(r,async(s,a)=>{await U(s);let i=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in i)||!("publicKey"in i))throw new Error("Failed to generate ECDSA keypair");let u=i,o=await crypto.subtle.exportKey("raw",u.publicKey),c=G(new Uint8Array(o)),d=await j(c);return await L(u.privateKey,s,d,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:o}),{kid:d,publicKey:f(o)}});return await C({op:"generate",kid:n.result.kid,requestId:t,userId:r.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid"}}),n.result}async function jt(e,t){let{credentials:r}=e,n=await B(r,async(s,a)=>{await U(s);let u=(await V()).filter(y=>y.purpose==="vapid");for(let y of u)await Le(y.kid);let o=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);if(!("privateKey"in o)||!("publicKey"in o))throw new Error("Failed to generate ECDSA keypair");let c=o,d=await crypto.subtle.exportKey("raw",c.publicKey),l=G(new Uint8Array(d)),p=await j(l);return await L(c.privateKey,s,p,{name:"ECDSA",namedCurve:"P-256"},["sign"],{alg:"ES256",purpose:"vapid",publicKeyRaw:d}),{kid:p,publicKey:f(d),oldKids:u.map(y=>y.kid)}});return await C({op:"regenerate-vapid",kid:n.result.kid,requestId:t,userId:r.userId,unlockTime:n.unlockTime,lockTime:n.lockTime,duration:n.duration,details:{algorithm:"ECDSA",curve:"P-256",purpose:"vapid",oldKids:n.result.oldKids,deletedCount:n.result.oldKids.length}}),{kid:n.result.kid,publicKey:n.result.publicKey}}async function Ft(e,t){let{kid:r,payload:n,credentials:s}=e;if(!n.aud||!n.sub||!n.exp)throw new Error("JWT payload must include aud, sub, and exp");let a=Math.floor(Date.now()/1e3);if(n.exp<=a)throw new Error("JWT exp must be in the future");if(n.exp>a+86400)throw new Error("JWT exp must be <= 24 hours (RFC 8292)");let i=await B(s,async(u,o)=>{await U(u);let c=await Ue(r,u,{name:"ECDSA",namedCurve:"P-256"},["sign"]),d={typ:"JWT",alg:"ES256",kid:r},l=f(new TextEncoder().encode(JSON.stringify(d)).buffer),p=f(new TextEncoder().encode(JSON.stringify(n)).buffer),y=new TextEncoder().encode(`${l}.${p}`),w=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},c,y),m=f(w);return{jwt:`${l}.${p}.${m}`}});return await C({op:"sign",kid:r,requestId:t,userId:s.userId,unlockTime:i.unlockTime,lockTime:i.lockTime,duration:i.duration,details:{algorithm:"ES256",aud:n.aud,exp:n.exp,jti:n.jti}}),i.result}async function $t(e,t){let{userId:r,ttlHours:n,credentials:s,autoExtend:a}=e;if(n<=0||n>720)throw new Error("ttlHours must be between 0 and 720 (30 days)");let u=(await V()).filter(h=>h.purpose==="vapid");if(u.length===0)throw new Error("No VAPID key found. VAPID key should have been generated during setup.");u.sort((h,k)=>k.createdAt-h.createdAt);let o=u[0];if(!o)throw new Error("VAPID key record not found after filtering");let c=o.kid,d=`lease-${crypto.randomUUID()}`,l=crypto.getRandomValues(new Uint8Array(32)),p=Date.now(),y=p+n*3600*1e3,w=await B(s,async(h,k)=>{await U(h);let{delegationCert:P}=await je(d,y),S=await Bt(k,l),R=await M(c);if(!R)throw new Error(`No wrapped key with id: ${c}`);let K=new Uint8Array(R.iv),x=R.aad,z=await crypto.subtle.unwrapKey("pkcs8",R.wrappedKey,h,{name:"AES-GCM",iv:K,additionalData:x},{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),re=crypto.getRandomValues(new Uint8Array(12));return{wrappedLeaseKey:await crypto.subtle.wrapKey("pkcs8",z,S,{name:"AES-GCM",iv:re}),iv:re,sessionKEK:S,lakDelegationCert:P}});await T(`sessionkek:${d}`,w.result.sessionKEK),Ee.set(d,w.result.sessionKEK);let m={tokensPerHour:100,sendsPerMinute:10,burstSends:20,sendsPerMinutePerEid:5},v={leaseId:d,userId:r,ttlHours:n,createdAt:p,exp:y,autoExtend:a??!0,quotas:m,wrappedLeaseKey:w.result.wrappedLeaseKey,wrappedLeaseKeyIV:w.result.iv.buffer.slice(w.result.iv.byteOffset,w.result.iv.byteOffset+w.result.iv.byteLength),leaseSalt:l.buffer.slice(l.byteOffset,l.byteOffset+l.byteLength),kid:c,lakDelegationCert:w.result.lakDelegationCert};return await we(v),await T(`quota:${d}`,{leaseId:d,tokensIssued:0,lastResetAt:p,perEndpoint:{}}),await C({op:"create-lease",kid:c,requestId:t,userId:r,details:{action:"create-lease",leaseId:d,userId:r,ttlHours:n,autoExtend:v.autoExtend}}),{leaseId:d,exp:y,quotas:m,autoExtend:v.autoExtend??!0}}async function Nt(e,t){let{leaseIds:r,credentials:n,requestAuth:s}=e,a=[],i=0,u=0,o=0,c=!1;if(n)try{await B(n,async(d,l)=>(c=!0,Promise.resolve()))}catch(d){for(let l of r){let p=await Y(l);p&&p.autoExtend===!1&&(a.push({leaseId:l,status:"skipped",reason:`Authentication failed: ${le(d)}`}),u++)}if(u===r.length)return{results:a,extended:i,skipped:u,failed:o}}for(let d of r)try{let l=await Y(d);if(!l){a.push({leaseId:d,status:"skipped",reason:`Lease not found: ${d}`}),u++;continue}if(l.autoExtend===!1&&!s){a.push({leaseId:d,status:"skipped",reason:"Lease has autoExtend=false and authentication was not requested"}),u++;continue}if(l.autoExtend===!1&&s&&!c){a.push({leaseId:d,status:"skipped",reason:"Authentication required but credentials not valid"}),u++;continue}let y=(await V()).filter(P=>P.purpose==="vapid");if(y.length===0){a.push({leaseId:d,status:"skipped",reason:"No VAPID key found"}),u++;continue}y.sort((P,S)=>S.createdAt-P.createdAt);let m=y[0].kid;if(l.kid!==m){a.push({leaseId:d,status:"skipped",reason:`Lease is for different VAPID key (lease kid: ${l.kid}, current kid: ${m})`}),u++;continue}let v=Date.now(),h=v+30*24*60*60*1e3,k={...l,exp:h,createdAt:v};await we(k),await C({op:"extend-lease",kid:k.kid,requestId:t,userId:k.userId,details:{action:"extend-lease",leaseId:k.leaseId,userId:k.userId,newExp:h,autoExtend:k.autoExtend}}),a.push({leaseId:d,status:"extended",result:{leaseId:k.leaseId,exp:k.exp,iat:k.createdAt,kid:k.kid,autoExtend:k.autoExtend??!1}}),i++}catch(l){a.push({leaseId:d,status:"skipped",reason:`Error extending lease: ${le(l)}`}),o++}return{results:a,extended:i,skipped:u,failed:o}}async function bt(e,t){let{leaseId:r}=e,{kid:n}=e;if(!n){let Q=(await V()).filter(It=>It.purpose==="vapid");if(Q.length===0)throw new Error("No VAPID key found. Create a lease first to auto-generate one.");if(Q.length>1)throw new Error("Multiple VAPID keys found. Please specify kid explicitly.");let De=Q[0];if(!De)throw new Error("No VAPID key found after filtering");n=De.kid}let s=await Y(r);if(!s)throw new Error(`Lease not found: ${r}`);if(Date.now()>=s.exp)throw new Error("Lease expired");let i=(await V()).filter(W=>W.purpose==="vapid");if(i.length===0)throw new Error("No VAPID key available");i.sort((W,Q)=>Q.createdAt-W.createdAt);let u=i[0]?.kid;if(!u)throw new Error("Failed to determine current VAPID key");if(s.kid!==u)throw new Error("Lease invalidated by VAPID key rotation (wrong-key)");await Fe(r,s.lakDelegationCert);let o=await me();if(!o)throw new Error("No push subscription found. Call setPushSubscription() first.");let c=await I(`quota:${r}`),d=wt(c),l=Date.now()-3600*1e3;if(d.lastResetAt<l&&(d.tokensIssued=0,d.lastResetAt=Date.now()),d.tokensIssued>=s.quotas.tokensPerHour)throw new Error("Quota exceeded: tokens per hour");d.tokensIssued++,await T(`quota:${r}`,d);let p=e.jti??crypto.randomUUID(),y=e.exp??Math.floor(Date.now()/1e3)+900,w=new URL(o.endpoint),m=`${w.protocol}//${w.host}`,v={aud:m,sub:"mailto:kms@example.com",exp:y,jti:p,uid:s.userId,eid:o.eid},h=Ee.get(r);if(!h){let W=await I(`sessionkek:${r}`);if(!W)throw new Error(`SessionKEK not found for lease: ${r}`);h=W,Ee.set(r,h)}let k=s.wrappedLeaseKey,P=new Uint8Array(s.wrappedLeaseKeyIV),S=await crypto.subtle.unwrapKey("pkcs8",k,h,{name:"AES-GCM",iv:P},{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),R={typ:"JWT",alg:"ES256",kid:s.kid},K=f(new TextEncoder().encode(JSON.stringify(R)).buffer),x=f(new TextEncoder().encode(JSON.stringify(v)).buffer),z=new TextEncoder().encode(`${K}.${x}`),re=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},S,z),xe=f(re),At=`${K}.${x}.${xe}`,Kt=await C({op:"sign",kid:s.kid,requestId:t,userId:s.userId,leaseId:r,details:{action:"issue-lease-jwt",jti:p,aud:m,eid:o.eid}});return{jwt:At,jti:p,exp:y,auditEntry:Kt}}async function Jt(e,t){let{leaseId:r,count:n,kid:s}=e;if(!Number.isInteger(n)||n<1||n>10)throw new Error("count must be an integer between 1 and 10");let a=900,i=Math.floor(a*.6),u=Math.floor(Date.now()/1e3),o=[];for(let c=0;c<n;c++){let d=crypto.randomUUID(),l=u+a+c*i,p=await bt({leaseId:r,...s!==void 0&&{kid:s},jti:d,exp:l},`${t}-${c}`);o.push(p)}return o}async function _t(e){let t=e?.userId??"default",r=await qe(t),n=[];await Ke(t)&&n.push("passphrase"),await Ie(t)&&n.push("passkey");let s;return r&&e?.userId&&(s=await ge(e.userId)),{isSetup:r,methods:n,...s!==void 0&&{leases:s}}}async function zt(e){let t=e?.userId??"default",r=[];if(await Ke(t)&&r.push("enrollment:passphrase:v2"),await Ie(t)){let n=await I(`enrollment:passkey-prf:v2:${t}`),s=await I(`enrollment:passkey-gate:v2:${t}`);n&&r.push("enrollment:passkey-prf:v2"),s&&r.push("enrollment:passkey-gate:v2")}return{enrollments:r}}async function Qt(){return await Ne()}async function Xt(){return{entries:await N()}}async function Yt(e){let{kid:t}=e,r=await M(t);if(!r||!r.publicKeyRaw)throw new Error(`Public key not found for kid: ${t}`);return{publicKey:f(r.publicKeyRaw)}}async function Zt(){return await Je()}async function er(e){let{userId:t}=e;return{leases:await ge(t)}}async function tr(e){let{leaseId:t,deleteIfInvalid:r=!1}=e,n=await Y(t);if(!n)return{leaseId:t,valid:!1,reason:"not-found",kid:""};if(Date.now()>=n.exp)return r&&await Z(t),{leaseId:t,valid:!1,reason:"expired",kid:n.kid};let a=(await V()).filter(o=>o.purpose==="vapid");if(a.length===0)return r&&await Z(t),{leaseId:t,valid:!1,reason:"no-vapid-key",kid:n.kid};a.sort((o,c)=>c.createdAt-o.createdAt);let i=a[0];if(!i)return r&&await Z(t),{leaseId:t,valid:!1,reason:"no-vapid-key",kid:n.kid};let u=i.kid;return n.kid!==u?(r&&await Z(t),{leaseId:t,valid:!1,reason:"wrong-key",kid:n.kid}):{leaseId:t,valid:!0,kid:n.kid}}async function rr(){let t=(await V()).filter(n=>n.purpose==="vapid");if(t.length===0)throw new Error("No VAPID key found");if(t.length>1)throw new Error("Multiple VAPID keys found. Please use getPublicKey(kid) with explicit kid.");let r=t[0];if(!r)throw new Error("No VAPID key found after filtering");return{kid:r.kid}}async function nr(e){return await Oe(e.subscription),{success:!0}}async function sr(){return await He(),{success:!0}}async function ar(){return{subscription:await me()}}async function ir(){Te();let e=indexedDB.deleteDatabase("kms-v2");return await new Promise((t,r)=>{e.onsuccess=()=>t(),e.onerror=()=>r(new Error(e.error?.message??"Failed to delete database"))}),await ae(),_e(),{success:!0}}async function or(e,t){let{enrollmentId:r,credentials:n}=e;return await B(n,async(s,a)=>(await U(s),!0)),await Me(r),await C({op:"reset",kid:"",requestId:t,userId:n.userId,details:{action:"remove-enrollment",enrollmentId:r}}),{success:!0}}(async()=>{try{await ae(),await Ge(),await $e(),(await N()).length===0&&await C({op:"kms-init",kid:"",requestId:`init-${Date.now()}`,userId:"system",details:{kmsVersion:"v2.0.0",timestamp:new Date().toISOString(),note:"KMS worker initialized, KIAK generated"}})}catch(e){console.error("[KMS Worker] Initialization failed:",e)}})();export{Ht as handleMessage};
